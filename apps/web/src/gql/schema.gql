schema {
  query: RootQuery
  mutation: RootMutation
}

""""""
interface ACFE_AdvancedLink {
  """"""
  linkText: String

  """"""
  shouldOpenInNewWindow: Boolean
}

""""""
type ACFE_AdvancedLink_ContentNode implements ACFE_AdvancedLink {
  """"""
  contentNode: ContentNode

  """"""
  linkText: String

  """"""
  shouldOpenInNewWindow: Boolean
}

""""""
type ACFE_AdvancedLink_TermNode implements ACFE_AdvancedLink {
  """"""
  linkText: String

  """"""
  shouldOpenInNewWindow: Boolean

  """"""
  term: TermNode
}

""""""
type ACFE_AdvancedLink_Url implements ACFE_AdvancedLink {
  """"""
  linkText: String

  """"""
  shouldOpenInNewWindow: Boolean

  """The url linked to"""
  url: String
}

"""A Field Group managed by ACF"""
interface AcfFieldGroup {
  """The name of the field group"""
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
}

"""Fields associated with an ACF Field Group"""
interface AcfFieldGroupFields {
  """The name of the field group"""
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
}

"""A Gravity Forms address field."""
type AddressField implements FormField & GfFieldWithAddressSetting & GfFieldWithAdminLabelSetting & GfFieldWithAutocompleteSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCopyValuesOptionSetting & GfFieldWithCssClassSetting & GfFieldWithDescriptionSetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSubLabelPlacementSetting & Node {
  """Determines the type of address to be displayed."""
  addressType: AddressFieldTypeEnum

  """Address field value."""
  addressValues: AddressFieldValue

  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """The field id of the field being used as the copy source."""
  copyValuesOptionFieldId: Int

  """
  The label that appears next to the copy values option when the form is displayed. The default value is \“Same as previous\”.
  """
  copyValuesOptionLabel: String

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the country that will be selected by default. Only applicable when &quot;addressType&quot; is set to &quot;INTERATIONAL&quot;.
  """
  defaultCountry: AddressFieldCountryEnum

  """
  Contains the province that will be selected by default. Only applicable when &quot;addressType&quot; is set to &quot;CANADA&quot;.
  """
  defaultProvince: AddressFieldProvinceEnum

  """
  Contains the state that will be selected by default. Only applicable when &quot;addressType&quot; is set to &quot;US&quot;.
  """
  defaultState: AddressFieldProvinceEnum

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """Whether autocomplete should be enabled for this field."""
  hasAutocomplete: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [AddressInputProperty]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Indicates whether the copy values option can be used. This option allows users to skip filling out the field and use the same values as another. For example, if the mailing and billing address are the same.
  """
  shouldCopyValuesOption: Boolean

  """
  The placement of the labels for the subfields within the group. This setting controls all of the subfields, they cannot be set individually. They may be aligned above or below the inputs. If this property is not set, the “Sub-Label Placement” setting on the Form Settings-&gt;Form Layout page is used. If no setting is specified, the default is above inputs.
  """
  subLabelPlacement: FormFieldSubLabelPlacementEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""Countries supported by Gravity Forms Address Field."""
enum AddressFieldCountryEnum {
  """Andorra ."""
  AD

  """United Arab Emirates ."""
  AE

  """Afghanistan ."""
  AF

  """Antigua and Barbuda ."""
  AG

  """Anguilla ."""
  AI

  """Albania ."""
  AL

  """Armenia ."""
  AM

  """Angola ."""
  AO

  """Antarctica ."""
  AQ

  """Argentina ."""
  AR

  """American Samoa ."""
  AS

  """Austria ."""
  AT

  """Australia ."""
  AU

  """Aruba ."""
  AW

  """Åland Islands ."""
  AX

  """Azerbaijan ."""
  AZ

  """Bosnia and Herzegovina ."""
  BA

  """Barbados ."""
  BB

  """Bangladesh ."""
  BD

  """Belgium ."""
  BE

  """Burkina Faso ."""
  BF

  """Bulgaria ."""
  BG

  """Bahrain ."""
  BH

  """Burundi ."""
  BI

  """Benin ."""
  BJ

  """Saint Barthélemy ."""
  BL

  """Bermuda ."""
  BM

  """Brunei Darussalam ."""
  BN

  """Bolivia ."""
  BO

  """Bonaire, Sint Eustatius and Saba ."""
  BQ

  """Brazil ."""
  BR

  """Bahamas ."""
  BS

  """Bhutan ."""
  BT

  """Bouvet Island ."""
  BV

  """Botswana ."""
  BW

  """Belarus ."""
  BY

  """Belize ."""
  BZ

  """Canada ."""
  CA

  """Cocos Islands ."""
  CC

  """Congo, Democratic Republic of the ."""
  CD

  """Central African Republic ."""
  CF

  """Congo ."""
  CG

  """Switzerland ."""
  CH

  """Côte d'Ivoire ."""
  CI

  """Cook Islands ."""
  CK

  """Chile ."""
  CL

  """Cameroon ."""
  CM

  """China ."""
  CN

  """Colombia ."""
  CO

  """Costa Rica ."""
  CR

  """Cuba ."""
  CU

  """Cabo Verde ."""
  CV

  """Curaçao ."""
  CW

  """Christmas Island ."""
  CX

  """Cyprus ."""
  CY

  """Czechia ."""
  CZ

  """Germany ."""
  DE

  """Djibouti ."""
  DJ

  """Denmark ."""
  DK

  """Dominica ."""
  DM

  """Dominican Republic ."""
  DO

  """Algeria ."""
  DZ

  """Ecuador ."""
  EC

  """Estonia ."""
  EE

  """Egypt ."""
  EG

  """Western Sahara ."""
  EH

  """Eritrea ."""
  ER

  """Spain ."""
  ES

  """Ethiopia ."""
  ET

  """Finland ."""
  FI

  """Fiji ."""
  FJ

  """Falkland Islands ."""
  FK

  """Micronesia ."""
  FM

  """Faroe Islands ."""
  FO

  """France ."""
  FR

  """Gabon ."""
  GA

  """United Kingdom ."""
  GB

  """Grenada ."""
  GD

  """Georgia ."""
  GE

  """French Guiana ."""
  GF

  """Guernsey ."""
  GG

  """Ghana ."""
  GH

  """Gibraltar ."""
  GI

  """Greenland ."""
  GL

  """Gambia ."""
  GM

  """Guinea ."""
  GN

  """Guadeloupe ."""
  GP

  """Equatorial Guinea ."""
  GQ

  """Greece ."""
  GR

  """South Georgia and the South Sandwich Islands ."""
  GS

  """Guatemala ."""
  GT

  """Guam ."""
  GU

  """Guinea-Bissau ."""
  GW

  """Guyana ."""
  GY

  """Hong Kong ."""
  HK

  """Heard Island and McDonald Islands ."""
  HM

  """Honduras ."""
  HN

  """Croatia ."""
  HR

  """Haiti ."""
  HT

  """Hungary ."""
  HU

  """Indonesia ."""
  ID

  """Ireland ."""
  IE

  """Israel ."""
  IL

  """Isle of Man ."""
  IM

  """India ."""
  IN

  """British Indian Ocean Territory ."""
  IO

  """Iraq ."""
  IQ

  """Iran ."""
  IR

  """Iceland ."""
  IS

  """Italy ."""
  IT

  """Jersey ."""
  JE

  """Jamaica ."""
  JM

  """Jordan ."""
  JO

  """Japan ."""
  JP

  """Kenya ."""
  KE

  """Kyrgyzstan ."""
  KG

  """Cambodia ."""
  KH

  """Kiribati ."""
  KI

  """Comoros ."""
  KM

  """Saint Kitts and Nevis ."""
  KN

  """Korea, Democratic People's Republic of ."""
  KP

  """Korea, Republic of ."""
  KR

  """Kuwait ."""
  KW

  """Cayman Islands ."""
  KY

  """Kazakhstan ."""
  KZ

  """Lao People's Democratic Republic ."""
  LA

  """Lebanon ."""
  LB

  """Saint Lucia ."""
  LC

  """Liechtenstein ."""
  LI

  """Sri Lanka ."""
  LK

  """Liberia ."""
  LR

  """Lesotho ."""
  LS

  """Lithuania ."""
  LT

  """Luxembourg ."""
  LU

  """Latvia ."""
  LV

  """Libya ."""
  LY

  """Morocco ."""
  MA

  """Monaco ."""
  MC

  """Moldova ."""
  MD

  """Montenegro ."""
  ME

  """Saint Martin ."""
  MF

  """Madagascar ."""
  MG

  """Marshall Islands ."""
  MH

  """North Macedonia ."""
  MK

  """Mali ."""
  ML

  """Myanmar ."""
  MM

  """Mongolia ."""
  MN

  """Macao ."""
  MO

  """Northern Mariana Islands ."""
  MP

  """Martinique ."""
  MQ

  """Mauritania ."""
  MR

  """Montserrat ."""
  MS

  """Malta ."""
  MT

  """Mauritius ."""
  MU

  """Maldives ."""
  MV

  """Malawi ."""
  MW

  """Mexico ."""
  MX

  """Malaysia ."""
  MY

  """Mozambique ."""
  MZ

  """Namibia ."""
  NA

  """New Caledonia ."""
  NC

  """Niger ."""
  NE

  """Norfolk Island ."""
  NF

  """Nigeria ."""
  NG

  """Nicaragua ."""
  NI

  """Netherlands ."""
  NL

  """Norway ."""
  NO

  """Nepal ."""
  NP

  """Nauru ."""
  NR

  """Niue ."""
  NU

  """New Zealand ."""
  NZ

  """Oman ."""
  OM

  """Panama ."""
  PA

  """Peru ."""
  PE

  """French Polynesia ."""
  PF

  """Papua New Guinea ."""
  PG

  """Philippines ."""
  PH

  """Pakistan ."""
  PK

  """Poland ."""
  PL

  """Saint Pierre and Miquelon ."""
  PM

  """Pitcairn ."""
  PN

  """Puerto Rico ."""
  PR

  """Palestine, State of ."""
  PS

  """Portugal ."""
  PT

  """Palau ."""
  PW

  """Paraguay ."""
  PY

  """Qatar ."""
  QA

  """Réunion ."""
  RE

  """Romania ."""
  RO

  """Serbia ."""
  RS

  """Russian Federation ."""
  RU

  """Rwanda ."""
  RW

  """Saudi Arabia ."""
  SA

  """Solomon Islands ."""
  SB

  """Seychelles ."""
  SC

  """Sudan ."""
  SD

  """Sweden ."""
  SE

  """Singapore ."""
  SG

  """Saint Helena, Ascension and Tristan da Cunha ."""
  SH

  """Slovenia ."""
  SI

  """Svalbard and Jan Mayen ."""
  SJ

  """Slovakia ."""
  SK

  """Sierra Leone ."""
  SL

  """San Marino ."""
  SM

  """Senegal ."""
  SN

  """Somalia ."""
  SO

  """Suriname ."""
  SR

  """South Sudan ."""
  SS

  """Sao Tome and Principe ."""
  ST

  """El Salvador ."""
  SV

  """Sint Maarten ."""
  SX

  """Syria Arab Republic ."""
  SY

  """Eswatini ."""
  SZ

  """Turks and Caicos Islands ."""
  TC

  """Chad ."""
  TD

  """French Southern Territories ."""
  TF

  """Togo ."""
  TG

  """Thailand ."""
  TH

  """Tajikistan ."""
  TJ

  """Tokelau ."""
  TK

  """Timor-Leste ."""
  TL

  """Turkmenistan ."""
  TM

  """Tunisia ."""
  TN

  """Tonga ."""
  TO

  """Türkiye ."""
  TR

  """Trinidad and Tobago ."""
  TT

  """Tuvalu ."""
  TV

  """Taiwan ."""
  TW

  """Tanzania, the United Republic of ."""
  TZ

  """Ukraine ."""
  UA

  """Uganda ."""
  UG

  """US Minor Outlying Islands ."""
  UM

  """United States ."""
  US

  """Uruguay ."""
  UY

  """Uzbekistan ."""
  UZ

  """Holy See ."""
  VA

  """Saint Vincent and the Grenadines ."""
  VC

  """Venezuela ."""
  VE

  """Virgin Islands, British ."""
  VG

  """Virgin Islands, U.S. ."""
  VI

  """Viet Nam ."""
  VN

  """Vanuatu ."""
  VU

  """Wallis and Futuna ."""
  WF

  """Samoa ."""
  WS

  """Yemen ."""
  YE

  """Mayotte ."""
  YT

  """South Africa ."""
  ZA

  """Zambia ."""
  ZM

  """Zimbabwe ."""
  ZW
}

"""Input fields for Address FormField."""
input AddressFieldInput {
  """Address city."""
  city: String

  """Address country."""
  country: AddressFieldCountryEnum

  """Address line two."""
  lineTwo: String

  """Address state/region/province name."""
  state: String

  """Street address."""
  street: String

  """Address zip code."""
  zip: String
}

"""Canadian Provinces supported by Gravity Forms Address Field."""
enum AddressFieldProvinceEnum {
  """Alberta ."""
  ALBERTA

  """British Columbia ."""
  BRITISH_COLUMBIA

  """Manitoba ."""
  MANITOBA

  """Newfoundland and Labrador ."""
  NEWFOUNDLAND_AND_LABRADOR

  """New Brunswick ."""
  NEW_BRUNSWICK

  """Northwest Territories ."""
  NORTHWEST_TERRITORIES

  """Nova Scotia ."""
  NOVA_SCOTIA

  """Nunavut ."""
  NUNAVUT

  """Ontario ."""
  ONTARIO

  """Prince Edward Island ."""
  PRINCE_EDWARD_ISLAND

  """Quebec ."""
  QUEBEC

  """Saskatchewan ."""
  SASKATCHEWAN

  """Yukon ."""
  YUKON
}

"""Determines the type of address to be displayed."""
enum AddressFieldTypeEnum {
  """Canada address type."""
  CANADA

  """International address type."""
  INTERNATIONAL

  """United States address type."""
  US
}

"""The individual properties for each element of the address value field."""
type AddressFieldValue {
  """Address city."""
  city: String

  """Address country."""
  country: AddressFieldCountryEnum

  """Address line two."""
  lineTwo: String

  """Address state/region/province name."""
  state: String

  """Street address."""
  street: String

  """Address zip code."""
  zip: String
}

"""AddressInputProperty input values."""
type AddressInputProperty implements GfFieldInput & GfFieldInputWithAddressSetting {
  """The autocomplete attribute for the field."""
  autocompleteAttribute: String

  """
  The custom label for the input. When set, this is used in place of the label.
  """
  customLabel: String

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """
  The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field.
  """
  id: Float

  """Whether or not this field should be hidden."""
  isHidden: Boolean

  """Key used to identify this input."""
  key: String

  """The label to be used for the input."""
  label: String

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  name: String

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String
}

"""The AM or PM cycle in a 12-hour clock."""
enum AmPmEnum {
  """AM. The first 12-hour cycle of the day."""
  AM

  """PM. The second 12-hour cycle of the day."""
  PM
}

"""
Avatars are profile images for users. WordPress by default uses the Gravatar service to host and fetch avatars from.
"""
type Avatar {
  """
  URL for the default image or a default type. Accepts &#039;404&#039; (return a 404 instead of a default image), &#039;retro&#039; (8bit), &#039;monsterid&#039; (monster), &#039;wavatar&#039; (cartoon face), &#039;indenticon&#039; (the &#039;quilt&#039;), &#039;mystery&#039;, &#039;mm&#039;, or &#039;mysteryman&#039; (The Oyster Man), &#039;blank&#039; (transparent GIF), or &#039;gravatar_default&#039; (the Gravatar logo).
  """
  default: String

  """HTML attributes to insert in the IMG element. Is not sanitized."""
  extraAttr: String

  """Whether to always show the default image, never the Gravatar."""
  forceDefault: Boolean

  """Whether the avatar was successfully found."""
  foundAvatar: Boolean

  """Height of the avatar image."""
  height: Int

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """
  What rating to display avatars up to. Accepts &#039;G&#039;, &#039;PG&#039;, &#039;R&#039;, &#039;X&#039;, and are judged in that order.
  """
  rating: String

  """Type of url scheme to use. Typically HTTP vs. HTTPS."""
  scheme: String

  """
  The size of the avatar in pixels. A value of 96 will match a 96px x 96px gravatar image.
  """
  size: Int

  """URL for the gravatar image source."""
  url: String

  """Width of the avatar image."""
  width: Int
}

"""
What rating to display avatars up to. Accepts 'G', 'PG', 'R', 'X', and are judged in that order. Default is the value of the 'avatar_rating' option
"""
enum AvatarRatingEnum {
  """Indicates a G level avatar rating level."""
  G

  """Indicates a PG level avatar rating level."""
  PG

  """Indicates an R level avatar rating level."""
  R

  """Indicates an X level avatar rating level."""
  X
}

"""A Gravity Forms captcha field."""
type CaptchaField implements FormField & GfFieldWithCaptchaBackgroundSetting & GfFieldWithCaptchaBadgeSetting & GfFieldWithCaptchaForegroundSetting & GfFieldWithCaptchaLanguageSetting & GfFieldWithCaptchaSizeSetting & GfFieldWithCaptchaThemeSetting & GfFieldWithCaptchaTypeSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDescriptionSetting & GfFieldWithErrorMessageSetting & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & Node {
  """
  The language used when the captcha is displayed. This property is available when the captchaType is “captcha”, the default. The possible values are the language codes used by WordPress.
  """
  captchaBadgePosition: CaptchaFieldBadgePositionEnum

  """
  The language used when the captcha is displayed. This property is available when the captchaType is “captcha”, the default. The possible values are the language codes used by WordPress.
  """
  captchaLanguage: String

  """
  Determines the theme to be used for the reCAPTCHA field. Only applicable to the recaptcha captcha type.
  """
  captchaTheme: CaptchaFieldThemeEnum

  """Determines the type of CAPTCHA field to be used."""
  captchaType: CaptchaFieldTypeEnum

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """The globally unique ID for the object"""
  id: ID!

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  Determines the image’s background color, in HEX format (i.e. #CCCCCC). Only applicable to simple_captcha and math captcha types.
  """
  simpleCaptchaBackgroundColor: String

  """
  Determines the image’s font color, in HEX format (i.e. #CCCCCC). Only applicable to simple_captcha and math captcha types.
  """
  simpleCaptchaFontColor: String

  """
  Determines the CAPTCHA image size. Only applicable to simple_captcha and math captcha types.
  """
  simpleCaptchaSize: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""The position to place the (invisible) reCaptcha badge."""
enum CaptchaFieldBadgePositionEnum {
  """Bottom-left position."""
  BOTTOM_LEFT

  """Bottom-right position."""
  BOTTOM_RIGHT

  """Inline position."""
  INLINE
}

"""The theme to be used for the reCAPTCHA field."""
enum CaptchaFieldThemeEnum {
  """Dark reCAPTCHA theme."""
  DARK

  """Light reCAPTCHA theme."""
  LIGHT
}

"""Type of CAPTCHA field to be used."""
enum CaptchaFieldTypeEnum {
  """Math CAPTCHA type."""
  MATH

  """reCAPTCHA type."""
  RECAPTCHA

  """Simple CAPTCHA type."""
  SIMPLE
}

"""The category type"""
type Category implements DatabaseIdentifier & HierarchicalNode & HierarchicalTermNode & MenuItemLinkable & Node & TermNode & UniformResourceIdentifiable {
  """
  The ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
  """
  ancestors(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): CategoryToAncestorsCategoryConnection

  """The id field matches the WP_Post-&gt;ID field."""
  categoryId: Int @deprecated(reason: "Deprecated in favor of databaseId")

  """Connection between the category type and its children categories."""
  children(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: CategoryToCategoryConnectionWhereArgs
  ): CategoryToCategoryConnection

  """Connection between the Category type and the ContentNode type"""
  contentNodes(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: CategoryToContentNodeConnectionWhereArgs
  ): CategoryToContentNodeConnection

  """The number of objects connected to the object"""
  count: Int

  """The unique identifier stored in the database"""
  databaseId: Int!

  """The description of the object"""
  description: String

  """Connection between the TermNode type and the EnqueuedScript type"""
  enqueuedScripts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): TermNodeToEnqueuedScriptConnection

  """Connection between the TermNode type and the EnqueuedStylesheet type"""
  enqueuedStylesheets(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): TermNodeToEnqueuedStylesheetConnection

  """The globally unique ID for the object"""
  id: ID!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The link to the term"""
  link: String

  """The human friendly name of the object."""
  name: String

  """Connection between the category type and its parent category."""
  parent: CategoryToParentCategoryConnectionEdge

  """Database id of the parent node"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent node."""
  parentId: ID

  """Connection between the Category type and the post type"""
  posts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: CategoryToPostConnectionWhereArgs
  ): CategoryToPostConnection

  """The Yoast SEO data of the Categories taxonomy."""
  seo: TaxonomySEO

  """An alphanumeric identifier for the object unique to its type."""
  slug: String

  """Connection between the Category type and the Taxonomy type"""
  taxonomy: CategoryToTaxonomyConnectionEdge

  """The name of the taxonomy that the object is associated with"""
  taxonomyName: String

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int

  """The unique resource identifier path"""
  uri: String
}

"""Connection to category Nodes"""
interface CategoryConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected category Nodes
  """
  edges: [CategoryConnectionEdge!]!

  """A list of connected category Nodes"""
  nodes: [Category!]!

  """Information about pagination in a connection."""
  pageInfo: CategoryConnectionPageInfo!
}

"""Edge between a Node and a connected category"""
interface CategoryConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The connected category Node"""
  node: Category!
}

"""Page Info on the connected CategoryConnectionEdge"""
interface CategoryConnectionPageInfo implements PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""The Type of Identifier used to fetch a single resource. Default is ID."""
enum CategoryIdType {
  """The Database ID for the node"""
  DATABASE_ID

  """The hashed Global ID"""
  ID

  """The name of the node"""
  NAME

  """Url friendly name of the node"""
  SLUG

  """The URI for the node"""
  URI
}

"""Connection between the Category type and the category type"""
type CategoryToAncestorsCategoryConnection implements CategoryConnection & Connection {
  """Edges for the CategoryToAncestorsCategoryConnection connection"""
  edges: [CategoryToAncestorsCategoryConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [Category!]!

  """Information about pagination in a connection."""
  pageInfo: CategoryToAncestorsCategoryConnectionPageInfo!
}

"""An edge in a connection"""
type CategoryToAncestorsCategoryConnectionEdge implements CategoryConnectionEdge & Edge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Category!
}

"""Page Info on the &quot;CategoryToAncestorsCategoryConnection&quot;"""
type CategoryToAncestorsCategoryConnectionPageInfo implements CategoryConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Connection between the Category type and the category type"""
type CategoryToCategoryConnection implements CategoryConnection & Connection {
  """Edges for the CategoryToCategoryConnection connection"""
  edges: [CategoryToCategoryConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [Category!]!

  """Information about pagination in a connection."""
  pageInfo: CategoryToCategoryConnectionPageInfo!
}

"""An edge in a connection"""
type CategoryToCategoryConnectionEdge implements CategoryConnectionEdge & Edge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Category!
}

"""Page Info on the &quot;CategoryToCategoryConnection&quot;"""
type CategoryToCategoryConnectionPageInfo implements CategoryConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the CategoryToCategoryConnection connection"""
input CategoryToCategoryConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Direction the connection should be ordered in"""
  order: OrderEnum

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomyId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the Category type and the ContentNode type"""
type CategoryToContentNodeConnection implements Connection & ContentNodeConnection {
  """Edges for the CategoryToContentNodeConnection connection"""
  edges: [CategoryToContentNodeConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [ContentNode!]!

  """Information about pagination in a connection."""
  pageInfo: CategoryToContentNodeConnectionPageInfo!
}

"""An edge in a connection"""
type CategoryToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: ContentNode!
}

"""Page Info on the &quot;CategoryToContentNodeConnection&quot;"""
type CategoryToContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the CategoryToContentNodeConnection connection"""
input CategoryToContentNodeConnectionWhereArgs {
  """The Types of content to filter"""
  contentTypes: [ContentTypesOfCategoryEnum]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific database ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What parameter to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [PostStatusEnum]

  """Show posts with a specific status."""
  status: PostStatusEnum

  """Title of the object"""
  title: String
}

"""Connection between the Category type and the category type"""
type CategoryToParentCategoryConnectionEdge implements CategoryConnectionEdge & Edge & OneToOneConnection {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The node of the connection, without the edges"""
  node: Category!
}

"""Connection between the Category type and the post type"""
type CategoryToPostConnection implements Connection & PostConnection {
  """Edges for the CategoryToPostConnection connection"""
  edges: [CategoryToPostConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [Post!]!

  """Information about pagination in a connection."""
  pageInfo: CategoryToPostConnectionPageInfo!
}

"""An edge in a connection"""
type CategoryToPostConnectionEdge implements Edge & PostConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Post!
}

"""Page Info on the &quot;CategoryToPostConnection&quot;"""
type CategoryToPostConnectionPageInfo implements PageInfo & PostConnectionPageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the CategoryToPostConnection connection"""
input CategoryToPostConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Category ID"""
  categoryId: Int

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryIn: [ID]

  """Use Category Slug"""
  categoryName: String

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific database ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What parameter to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [PostStatusEnum]

  """Show posts with a specific status."""
  status: PostStatusEnum

  """Tag Slug"""
  tag: String

  """Use Tag ID"""
  tagId: String

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagIn: [ID]

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagNotIn: [ID]

  """Array of tag slugs, used to display objects from one tag AND another"""
  tagSlugAnd: [String]

  """Array of tag slugs, used to include objects in ANY specified tags"""
  tagSlugIn: [String]

  """Title of the object"""
  title: String
}

"""Connection between the Category type and the Taxonomy type"""
type CategoryToTaxonomyConnectionEdge implements Edge & OneToOneConnection & TaxonomyConnectionEdge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The node of the connection, without the edges"""
  node: Taxonomy!
}

"""A Gravity Forms checkbox field."""
type CheckboxField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithChoices & GfFieldWithChoicesSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDescriptionSetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSelectAllChoicesSetting & Node {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """Checkbox field value."""
  checkboxValues: [CheckboxFieldValue]

  """The choices for the field."""
  choices: [CheckboxFieldChoice]

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """
  Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
  """
  hasChoiceValue: Boolean

  """Whether the \&quot;select all\&quot; choice should be displayed."""
  hasSelectAll: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [CheckboxInputProperty]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""CheckboxFieldChoice choice values."""
type CheckboxFieldChoice implements GfFieldChoice & GfFieldChoiceWithChoicesSetting {
  """
  Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
  """
  isSelected: Boolean

  """The text to be displayed to the user when displaying this choice."""
  text: String

  """
  The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
  """
  value: String
}

"""Input fields for a single checkbox."""
input CheckboxFieldInput {
  """Input ID."""
  inputId: Float

  """Input value."""
  value: String
}

"""
The individual properties for each element of the Checkbox value field.
"""
type CheckboxFieldValue implements GfFieldValueWithChoice & GfFieldValueWithInput {
  """The selected Gravity Forms field choice object."""
  connectedChoice: GfFieldChoice

  """The selected Gravity Forms field input object."""
  connectedInput: GfFieldInput

  """Input ID."""
  inputId: Float

  """Input text."""
  text: String

  """Input value."""
  value: String
}

"""CheckboxInputProperty input values."""
type CheckboxInputProperty implements GfFieldInput & GfFieldInputWithSelectAllChoicesSetting {
  """
  The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field.
  """
  id: Float

  """The label to be used for the input."""
  label: String

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  name: String
}

"""A Comment object"""
type Comment implements DatabaseIdentifier & Node & UniformResourceIdentifiable {
  """
  User agent used to post the comment. This field is equivalent to WP_Comment-&gt;comment_agent and the value matching the &quot;comment_agent&quot; column in SQL.
  """
  agent: String

  """
  The approval status of the comment. This field is equivalent to WP_Comment-&gt;comment_approved and the value matching the &quot;comment_approved&quot; column in SQL.
  """
  approved: Boolean @deprecated(reason: "Deprecated in favor of the `status` field")

  """The author of the comment"""
  author: CommentToCommenterConnectionEdge

  """
  IP address for the author. This field is equivalent to WP_Comment-&gt;comment_author_IP and the value matching the &quot;comment_author_IP&quot; column in SQL.
  """
  authorIp: String

  """ID for the comment, unique among comments."""
  commentId: Int @deprecated(reason: "Deprecated in favor of databaseId")

  """Connection between the Comment type and the ContentNode type"""
  commentedOn: CommentToContentNodeConnectionEdge

  """
  Content of the comment. This field is equivalent to WP_Comment-&gt;comment_content and the value matching the &quot;comment_content&quot; column in SQL.
  """
  content(
    """Format of the field output"""
    format: PostObjectFieldFormatEnum
  ): String

  """The unique identifier stored in the database"""
  databaseId: Int!

  """
  Date the comment was posted in local time. This field is equivalent to WP_Comment-&gt;date and the value matching the &quot;date&quot; column in SQL.
  """
  date: String

  """
  Date the comment was posted in GMT. This field is equivalent to WP_Comment-&gt;date_gmt and the value matching the &quot;date_gmt&quot; column in SQL.
  """
  dateGmt: String

  """The globally unique identifier for the comment object"""
  id: ID!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """
  Karma value for the comment. This field is equivalent to WP_Comment-&gt;comment_karma and the value matching the &quot;comment_karma&quot; column in SQL.
  """
  karma: Int

  """The permalink of the comment"""
  link: String

  """Connection between the Comment type and the Comment type"""
  parent(
    """Arguments for filtering the connection"""
    where: CommentToParentCommentConnectionWhereArgs
  ): CommentToParentCommentConnectionEdge

  """
  The database id of the parent comment node or null if it is the root comment
  """
  parentDatabaseId: Int

  """The globally unique identifier of the parent comment node."""
  parentId: ID

  """Connection between the Comment type and the Comment type"""
  replies(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: CommentToCommentConnectionWhereArgs
  ): CommentToCommentConnection

  """
  The approval status of the comment. This field is equivalent to WP_Comment-&gt;comment_approved and the value matching the &quot;comment_approved&quot; column in SQL.
  """
  status: CommentStatusEnum

  """
  Type of comment. This field is equivalent to WP_Comment-&gt;comment_type and the value matching the &quot;comment_type&quot; column in SQL.
  """
  type: String

  """The unique resource identifier path"""
  uri: String
}

"""A Comment Author object"""
type CommentAuthor implements Commenter & DatabaseIdentifier & Node {
  """
  Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument.
  """
  avatar(
    """
    Whether to always show the default image, never the Gravatar. Default false
    """
    forceDefault: Boolean

    """The rating level of the avatar."""
    rating: AvatarRatingEnum

    """
    The size attribute of the avatar field can be used to fetch avatars of different sizes. The value corresponds to the dimension in pixels to fetch. The default is 96 pixels.
    """
    size: Int = 96
  ): Avatar

  """The unique identifier stored in the database"""
  databaseId: Int!

  """The email for the comment author"""
  email: String

  """The globally unique identifier for the comment author object"""
  id: ID!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """The name for the comment author."""
  name: String

  """The url the comment author."""
  url: String
}

"""Connection to Comment Nodes"""
interface CommentConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected Comment Nodes
  """
  edges: [CommentConnectionEdge!]!

  """A list of connected Comment Nodes"""
  nodes: [Comment!]!

  """Information about pagination in a connection."""
  pageInfo: CommentConnectionPageInfo!
}

"""Edge between a Node and a connected Comment"""
interface CommentConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The connected Comment Node"""
  node: Comment!
}

"""Page Info on the connected CommentConnectionEdge"""
interface CommentConnectionPageInfo implements PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""
The Type of Identifier used to fetch a single comment node. Default is "ID". To be used along with the "id" field.
"""
enum CommentNodeIdTypeEnum {
  """Identify a resource by the Database ID."""
  DATABASE_ID

  """Identify a resource by the (hashed) Global ID."""
  ID
}

"""The status of the comment object."""
enum CommentStatusEnum {
  """Comments with the Approved status"""
  APPROVE

  """Comments with the Unapproved status"""
  HOLD

  """Comments with the Spam status"""
  SPAM

  """Comments with the Trash status"""
  TRASH
}

"""Connection between the Comment type and the Comment type"""
type CommentToCommentConnection implements CommentConnection & Connection {
  """Edges for the CommentToCommentConnection connection"""
  edges: [CommentToCommentConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [Comment!]!

  """Information about pagination in a connection."""
  pageInfo: CommentToCommentConnectionPageInfo!
}

"""An edge in a connection"""
type CommentToCommentConnectionEdge implements CommentConnectionEdge & Edge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Comment!
}

"""Page Info on the &quot;CommentToCommentConnection&quot;"""
type CommentToCommentConnectionPageInfo implements CommentConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the CommentToCommentConnection connection"""
input CommentToCommentConnectionWhereArgs {
  """Comment author email address."""
  authorEmail: String

  """Array of author IDs to include comments for."""
  authorIn: [ID]

  """Array of author IDs to exclude comments for."""
  authorNotIn: [ID]

  """Comment author URL."""
  authorUrl: String

  """Array of comment IDs to include."""
  commentIn: [ID]

  """
  Array of IDs of users whose unapproved comments will be returned by the query regardless of status.
  """
  commentNotIn: [ID]

  """Include comments of a given type."""
  commentType: String

  """Include comments from a given array of comment types."""
  commentTypeIn: [String]

  """Exclude comments from a given array of comment types."""
  commentTypeNotIn: String

  """Content object author ID to limit results by."""
  contentAuthor: [ID]

  """Array of author IDs to retrieve comments for."""
  contentAuthorIn: [ID]

  """Array of author IDs *not* to retrieve comments for."""
  contentAuthorNotIn: [ID]

  """Limit results to those affiliated with a given content object ID."""
  contentId: ID

  """Array of content object IDs to include affiliated comments for."""
  contentIdIn: [ID]

  """Array of content object IDs to exclude affiliated comments for."""
  contentIdNotIn: [ID]

  """Content object name (i.e. slug ) to retrieve affiliated comments for."""
  contentName: String

  """Content Object parent ID to retrieve affiliated comments for."""
  contentParent: Int

  """
  Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentStatus: [PostStatusEnum]

  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [ContentTypeEnum]

  """
  Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]

  """Karma score to retrieve matching comments for."""
  karma: Int

  """The cardinality of the order of the connection"""
  order: OrderEnum

  """Field to order the comments by."""
  orderby: CommentsConnectionOrderbyEnum

  """Parent ID of comment to retrieve children of."""
  parent: Int

  """Array of parent IDs of comments to retrieve children for."""
  parentIn: [ID]

  """Array of parent IDs of comments *not* to retrieve children for."""
  parentNotIn: [ID]

  """Search term(s) to retrieve matching comments for."""
  search: String

  """Comment status to limit results by."""
  status: String

  """Include comments for a specific user ID."""
  userId: ID
}

"""Connection between the Comment type and the Commenter type"""
type CommentToCommenterConnectionEdge implements CommenterConnectionEdge & Edge & OneToOneConnection {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The node of the connection, without the edges"""
  node: Commenter!
}

"""Connection between the Comment type and the ContentNode type"""
type CommentToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge & OneToOneConnection {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The node of the connection, without the edges"""
  node: ContentNode!
}

"""Connection between the Comment type and the Comment type"""
type CommentToParentCommentConnectionEdge implements CommentConnectionEdge & Edge & OneToOneConnection {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The node of the connection, without the edges"""
  node: Comment!
}

"""
Arguments for filtering the CommentToParentCommentConnection connection
"""
input CommentToParentCommentConnectionWhereArgs {
  """Comment author email address."""
  authorEmail: String

  """Array of author IDs to include comments for."""
  authorIn: [ID]

  """Array of author IDs to exclude comments for."""
  authorNotIn: [ID]

  """Comment author URL."""
  authorUrl: String

  """Array of comment IDs to include."""
  commentIn: [ID]

  """
  Array of IDs of users whose unapproved comments will be returned by the query regardless of status.
  """
  commentNotIn: [ID]

  """Include comments of a given type."""
  commentType: String

  """Include comments from a given array of comment types."""
  commentTypeIn: [String]

  """Exclude comments from a given array of comment types."""
  commentTypeNotIn: String

  """Content object author ID to limit results by."""
  contentAuthor: [ID]

  """Array of author IDs to retrieve comments for."""
  contentAuthorIn: [ID]

  """Array of author IDs *not* to retrieve comments for."""
  contentAuthorNotIn: [ID]

  """Limit results to those affiliated with a given content object ID."""
  contentId: ID

  """Array of content object IDs to include affiliated comments for."""
  contentIdIn: [ID]

  """Array of content object IDs to exclude affiliated comments for."""
  contentIdNotIn: [ID]

  """Content object name (i.e. slug ) to retrieve affiliated comments for."""
  contentName: String

  """Content Object parent ID to retrieve affiliated comments for."""
  contentParent: Int

  """
  Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentStatus: [PostStatusEnum]

  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [ContentTypeEnum]

  """
  Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]

  """Karma score to retrieve matching comments for."""
  karma: Int

  """The cardinality of the order of the connection"""
  order: OrderEnum

  """Field to order the comments by."""
  orderby: CommentsConnectionOrderbyEnum

  """Parent ID of comment to retrieve children of."""
  parent: Int

  """Array of parent IDs of comments to retrieve children for."""
  parentIn: [ID]

  """Array of parent IDs of comments *not* to retrieve children for."""
  parentNotIn: [ID]

  """Search term(s) to retrieve matching comments for."""
  search: String

  """Comment status to limit results by."""
  status: String

  """Include comments for a specific user ID."""
  userId: ID
}

"""The author of a comment"""
interface Commenter implements DatabaseIdentifier & Node {
  """
  Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument.
  """
  avatar: Avatar

  """Identifies the primary key from the database."""
  databaseId: Int!

  """The email address of the author of a comment."""
  email: String

  """The globally unique identifier for the comment author."""
  id: ID!

  """
  Whether the author information is considered restricted. (not fully public)
  """
  isRestricted: Boolean

  """The name of the author of a comment."""
  name: String

  """The url of the author of a comment."""
  url: String
}

"""Edge between a Node and a connected Commenter"""
interface CommenterConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The connected Commenter Node"""
  node: Commenter!
}

"""Options for ordering the connection"""
enum CommentsConnectionOrderbyEnum {
  """Order by browser user agent of the commenter."""
  COMMENT_AGENT

  """Order by approval status of the comment."""
  COMMENT_APPROVED

  """Order by name of the comment author."""
  COMMENT_AUTHOR

  """Order by e-mail of the comment author."""
  COMMENT_AUTHOR_EMAIL

  """Order by IP address of the comment author."""
  COMMENT_AUTHOR_IP

  """Order by URL address of the comment author."""
  COMMENT_AUTHOR_URL

  """Order by the comment contents."""
  COMMENT_CONTENT

  """Order by date/time timestamp of the comment."""
  COMMENT_DATE

  """Order by GMT timezone date/time timestamp of the comment."""
  COMMENT_DATE_GMT

  """Order by the globally unique identifier for the comment object"""
  COMMENT_ID

  """Order by the array list of comment IDs listed in the where clause."""
  COMMENT_IN

  """Order by the comment karma score."""
  COMMENT_KARMA

  """Order by the comment parent ID."""
  COMMENT_PARENT

  """Order by the post object ID."""
  COMMENT_POST_ID

  """
  Order by the the type of comment, such as 'comment', 'pingback', or 'trackback'.
  """
  COMMENT_TYPE

  """Order by the user ID."""
  USER_ID
}

"""Gravity Forms conditional logic."""
type ConditionalLogic {
  """The type of action the conditional logic will perform."""
  actionType: ConditionalLogicActionTypeEnum

  """Determines how to the rules should be evaluated."""
  logicType: ConditionalLogicLogicTypeEnum

  """Conditional logic rules."""
  rules: [ConditionalLogicRule]
}

"""The type of action the conditional logic will perform."""
enum ConditionalLogicActionTypeEnum {
  """Text button (default)."""
  HIDE

  """Image button."""
  SHOW
}

"""Determines how to the rules should be evaluated."""
enum ConditionalLogicLogicTypeEnum {
  """Evaulate all logic rules."""
  ALL

  """Evaluate any logic rule."""
  ANY
}

"""Gravity Forms conditional logic rule."""
type ConditionalLogicRule {
  """
  Target field Id. Field that will have it’s value compared with the value property to determine if this rule is a match.
  """
  fieldId: Float

  """Operator to be used when evaluating this rule."""
  operator: FormRuleOperatorEnum

  """The value to compare with field specified by fieldId."""
  value: String
}

"""
A plural connection from one Node Type in the Graph to another Node Type, with support for relational data via &quot;edges&quot;.
"""
interface Connection {
  """A list of edges (relational context) between connected nodes"""
  edges: [Edge!]!

  """A list of connected nodes"""
  nodes: [Node!]!

  """Information about pagination in a connection."""
  pageInfo: PageInfo!
}

"""A Gravity Forms consent field."""
type ConsentField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithCheckboxLabelSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDescriptionSetting & GfFieldWithErrorMessageSetting & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithRulesSetting & Node {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Text of the consent checkbox."""
  checkboxLabel: String

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  Consent field value. This is `true` when consent is given, `false` when it is not.
  """
  consentValue: Boolean

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """The globally unique ID for the object"""
  id: ID!

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""Nodes used to manage content"""
interface ContentNode implements Node & UniformResourceIdentifiable {
  """Connection between the ContentNode type and the ContentType type"""
  contentType: ContentNodeToContentTypeConnectionEdge

  """The name of the Content Type the node belongs to"""
  contentTypeName: String!

  """The ID of the node in the database."""
  databaseId: Int!

  """Post publishing date."""
  date: String

  """The publishing date set in GMT."""
  dateGmt: String

  """The desired slug of the post"""
  desiredSlug: String

  """
  If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds
  """
  editingLockedBy: ContentNodeToEditLockConnectionEdge

  """The RSS enclosure for the object"""
  enclosure: String

  """Connection between the ContentNode type and the EnqueuedScript type"""
  enqueuedScripts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): ContentNodeToEnqueuedScriptConnection

  """
  Connection between the ContentNode type and the EnqueuedStylesheet type
  """
  enqueuedStylesheets(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection

  """
  The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
  """
  guid: String

  """The globally unique ID for the object"""
  id: ID!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the object is a node in the preview state"""
  isPreview: Boolean

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The user that most recently edited the node"""
  lastEditedBy: ContentNodeToEditLastConnectionEdge

  """The permalink of the post"""
  link: String

  """
  The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
  """
  modified: String

  """
  The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
  """
  modifiedGmt: String

  """The database id of the preview node"""
  previewRevisionDatabaseId: Int

  """Whether the object is a node in the preview state"""
  previewRevisionId: ID

  """The Yoast SEO data of the ContentNode"""
  seo: PostTypeSEO

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
  """
  slug: String

  """The current status of the object"""
  status: String

  """The template assigned to a node of content"""
  template: ContentTemplate

  """The unique resource identifier path"""
  uri: String
}

"""Connection to ContentNode Nodes"""
interface ContentNodeConnection implements Connection {
  """
  A list of edges (relational context) between ContentType and connected ContentNode Nodes
  """
  edges: [ContentNodeConnectionEdge!]!

  """A list of connected ContentNode Nodes"""
  nodes: [ContentNode!]!

  """Information about pagination in a connection."""
  pageInfo: ContentNodeConnectionPageInfo!
}

"""Edge between a Node and a connected ContentNode"""
interface ContentNodeConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The connected ContentNode Node"""
  node: ContentNode!
}

"""Page Info on the connected ContentNodeConnectionEdge"""
interface ContentNodeConnectionPageInfo implements PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""The Type of Identifier used to fetch a single resource. Default is ID."""
enum ContentNodeIdTypeEnum {
  """Identify a resource by the Database ID."""
  DATABASE_ID

  """Identify a resource by the (hashed) Global ID."""
  ID

  """Identify a resource by the URI."""
  URI
}

"""Connection between the ContentNode type and the ContentType type"""
type ContentNodeToContentTypeConnectionEdge implements ContentTypeConnectionEdge & Edge & OneToOneConnection {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The node of the connection, without the edges"""
  node: ContentType!
}

"""Connection between the ContentNode type and the User type"""
type ContentNodeToEditLastConnectionEdge implements Edge & OneToOneConnection & UserConnectionEdge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The node of the connection, without the edges"""
  node: User!
}

"""Connection between the ContentNode type and the User type"""
type ContentNodeToEditLockConnectionEdge implements Edge & OneToOneConnection & UserConnectionEdge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The timestamp for when the node was last edited"""
  lockTimestamp: String

  """The node of the connection, without the edges"""
  node: User!
}

"""Connection between the ContentNode type and the EnqueuedScript type"""
type ContentNodeToEnqueuedScriptConnection implements Connection & EnqueuedScriptConnection {
  """Edges for the ContentNodeToEnqueuedScriptConnection connection"""
  edges: [ContentNodeToEnqueuedScriptConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [EnqueuedScript!]!

  """Information about pagination in a connection."""
  pageInfo: ContentNodeToEnqueuedScriptConnectionPageInfo!
}

"""An edge in a connection"""
type ContentNodeToEnqueuedScriptConnectionEdge implements Edge & EnqueuedScriptConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: EnqueuedScript!
}

"""Page Info on the &quot;ContentNodeToEnqueuedScriptConnection&quot;"""
type ContentNodeToEnqueuedScriptConnectionPageInfo implements EnqueuedScriptConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""
Connection between the ContentNode type and the EnqueuedStylesheet type
"""
type ContentNodeToEnqueuedStylesheetConnection implements Connection & EnqueuedStylesheetConnection {
  """Edges for the ContentNodeToEnqueuedStylesheetConnection connection"""
  edges: [ContentNodeToEnqueuedStylesheetConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [EnqueuedStylesheet!]!

  """Information about pagination in a connection."""
  pageInfo: ContentNodeToEnqueuedStylesheetConnectionPageInfo!
}

"""An edge in a connection"""
type ContentNodeToEnqueuedStylesheetConnectionEdge implements Edge & EnqueuedStylesheetConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: EnqueuedStylesheet!
}

"""Page Info on the &quot;ContentNodeToEnqueuedStylesheetConnection&quot;"""
type ContentNodeToEnqueuedStylesheetConnectionPageInfo implements EnqueuedStylesheetConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""The template assigned to a node of content"""
interface ContentTemplate {
  """The name of the template"""
  templateName: String
}

"""An Post Type object"""
type ContentType implements Node & UniformResourceIdentifiable {
  """Whether this content type should can be exported."""
  canExport: Boolean

  """Connection between the ContentType type and the Taxonomy type"""
  connectedTaxonomies(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): ContentTypeToTaxonomyConnection

  """Connection between the ContentType type and the ContentNode type"""
  contentNodes(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: ContentTypeToContentNodeConnectionWhereArgs
  ): ContentTypeToContentNodeConnection

  """
  Whether content of this type should be deleted when the author of it is deleted from the system.
  """
  deleteWithUser: Boolean

  """Description of the content type."""
  description: String

  """
  Whether to exclude nodes of this content type from front end search results.
  """
  excludeFromSearch: Boolean

  """The plural name of the content type within the GraphQL Schema."""
  graphqlPluralName: String

  """The singular name of the content type within the GraphQL Schema."""
  graphqlSingleName: String

  """
  Whether this content type should have archives. Content archives are generated by type and by date.
  """
  hasArchive: Boolean

  """Whether the content type is hierarchical, for example pages."""
  hierarchical: Boolean

  """The globally unique identifier of the post-type object."""
  id: ID!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether this page is set to the static front page."""
  isFrontPage: Boolean!

  """Whether this page is set to the blog posts page."""
  isPostsPage: Boolean!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """Display name of the content type."""
  label: String

  """Details about the content type labels."""
  labels: PostTypeLabelDetails

  """The name of the icon file to display as a menu icon."""
  menuIcon: String

  """
  The position of this post type in the menu. Only applies if show_in_menu is true.
  """
  menuPosition: Int

  """
  The internal name of the post type. This should not be used for display purposes.
  """
  name: String

  """
  Whether a content type is intended for use publicly either via the admin interface or by front-end users. While the default settings of exclude_from_search, publicly_queryable, show_ui, and show_in_nav_menus are inherited from public, each does not rely on this relationship and controls a very specific intention.
  """
  public: Boolean

  """
  Whether queries can be performed on the front end for the content type as part of parse_request().
  """
  publiclyQueryable: Boolean

  """
  Name of content type to display in REST API &quot;wp/v2&quot; namespace.
  """
  restBase: String

  """The REST Controller class assigned to handling this content type."""
  restControllerClass: String

  """Makes this content type available via the admin bar."""
  showInAdminBar: Boolean

  """Whether to add the content type to the GraphQL Schema."""
  showInGraphql: Boolean

  """
  Where to show the content type in the admin menu. To work, $show_ui must be true. If true, the post type is shown in its own top level menu. If false, no menu is shown. If a string of an existing top level menu (eg. &quot;tools.php&quot; or &quot;edit.php?post_type=page&quot;), the post type will be placed as a sub-menu of that.
  """
  showInMenu: Boolean

  """Makes this content type available for selection in navigation menus."""
  showInNavMenus: Boolean

  """
  Whether the content type is associated with a route under the the REST API &quot;wp/v2&quot; namespace.
  """
  showInRest: Boolean

  """
  Whether to generate and allow a UI for managing this content type in the admin.
  """
  showUi: Boolean

  """The unique resource identifier path"""
  uri: String
}

"""Connection to ContentType Nodes"""
interface ContentTypeConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected ContentType Nodes
  """
  edges: [ContentTypeConnectionEdge!]!

  """A list of connected ContentType Nodes"""
  nodes: [ContentType!]!

  """Information about pagination in a connection."""
  pageInfo: ContentTypeConnectionPageInfo!
}

"""Edge between a Node and a connected ContentType"""
interface ContentTypeConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The connected ContentType Node"""
  node: ContentType!
}

"""Page Info on the connected ContentTypeConnectionEdge"""
interface ContentTypeConnectionPageInfo implements PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Allowed Content Types"""
enum ContentTypeEnum {
  """The Type of Content object"""
  ATTACHMENT

  """The Type of Content object"""
  PAGE

  """The Type of Content object"""
  POST
}

"""
The Type of Identifier used to fetch a single Content Type node. To be used along with the "id" field. Default is "ID".
"""
enum ContentTypeIdTypeEnum {
  """The globally unique ID"""
  ID

  """The name of the content type."""
  NAME
}

"""Connection between the ContentType type and the ContentNode type"""
type ContentTypeToContentNodeConnection implements Connection & ContentNodeConnection {
  """Edges for the ContentTypeToContentNodeConnection connection"""
  edges: [ContentTypeToContentNodeConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [ContentNode!]!

  """Information about pagination in a connection."""
  pageInfo: ContentTypeToContentNodeConnectionPageInfo!
}

"""An edge in a connection"""
type ContentTypeToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: ContentNode!
}

"""Page Info on the &quot;ContentTypeToContentNodeConnection&quot;"""
type ContentTypeToContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""
Arguments for filtering the ContentTypeToContentNodeConnection connection
"""
input ContentTypeToContentNodeConnectionWhereArgs {
  """The Types of content to filter"""
  contentTypes: [ContentTypeEnum]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific database ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What parameter to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [PostStatusEnum]

  """Show posts with a specific status."""
  status: PostStatusEnum

  """Title of the object"""
  title: String
}

"""Connection between the ContentType type and the Taxonomy type"""
type ContentTypeToTaxonomyConnection implements Connection & TaxonomyConnection {
  """Edges for the ContentTypeToTaxonomyConnection connection"""
  edges: [ContentTypeToTaxonomyConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [Taxonomy!]!

  """Information about pagination in a connection."""
  pageInfo: ContentTypeToTaxonomyConnectionPageInfo!
}

"""An edge in a connection"""
type ContentTypeToTaxonomyConnectionEdge implements Edge & TaxonomyConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Taxonomy!
}

"""Page Info on the &quot;ContentTypeToTaxonomyConnection&quot;"""
type ContentTypeToTaxonomyConnectionPageInfo implements PageInfo & TaxonomyConnectionPageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Allowed Content Types of the Category taxonomy."""
enum ContentTypesOfCategoryEnum {
  """The Type of Content object"""
  POST
}

"""Allowed Content Types of the PostFormat taxonomy."""
enum ContentTypesOfPostFormatEnum {
  """The Type of Content object"""
  POST
}

"""Allowed Content Types of the Tag taxonomy."""
enum ContentTypesOfTagEnum {
  """The Type of Content object"""
  POST
}

"""Input for the createCategory mutation."""
input CreateCategoryInput {
  """The slug that the category will be an alias of"""
  aliasOf: String

  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The description of the category object"""
  description: String

  """The name of the category object to mutate"""
  name: String!

  """The ID of the category that should be set as the parent"""
  parentId: ID

  """
  If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name.
  """
  slug: String
}

"""The payload for the createCategory mutation."""
type CreateCategoryPayload {
  """The created category"""
  category: Category

  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
}

"""Input for the createComment mutation."""
input CreateCommentInput {
  """The approval status of the comment."""
  approved: String

  """The name of the comment's author."""
  author: String

  """The email of the comment's author."""
  authorEmail: String

  """The url of the comment's author."""
  authorUrl: String

  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The database ID of the post object the comment belongs to."""
  commentOn: Int

  """Content of the comment."""
  content: String

  """
  The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17 
  """
  date: String

  """Parent comment ID of current comment."""
  parent: ID

  """The approval status of the comment"""
  status: CommentStatusEnum

  """Type of comment."""
  type: String
}

"""The payload for the createComment mutation."""
type CreateCommentPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The comment that was created"""
  comment: Comment

  """
  Whether the mutation succeeded. If the comment is not approved, the server will not return the comment to a non authenticated user, but a success message can be returned if the create succeeded, and the client can optimistically add the comment to the client cache
  """
  success: Boolean
}

"""Input for the createMediaItem mutation."""
input CreateMediaItemInput {
  """Alternative text to display when mediaItem is not displayed"""
  altText: String

  """The userId to assign as the author of the mediaItem"""
  authorId: ID

  """The caption for the mediaItem"""
  caption: String

  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The comment status for the mediaItem"""
  commentStatus: String

  """The date of the mediaItem"""
  date: String

  """The date (in GMT zone) of the mediaItem"""
  dateGmt: String

  """Description of the mediaItem"""
  description: String

  """The file name of the mediaItem"""
  filePath: String

  """The file type of the mediaItem"""
  fileType: MimeTypeEnum

  """The ID of the parent object"""
  parentId: ID

  """The ping status for the mediaItem"""
  pingStatus: String

  """The slug of the mediaItem"""
  slug: String

  """The status of the mediaItem"""
  status: MediaItemStatusEnum

  """The title of the mediaItem"""
  title: String
}

"""The payload for the createMediaItem mutation."""
type CreateMediaItemPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The MediaItem object mutation type."""
  mediaItem: MediaItem
}

"""Input for the createPage mutation."""
input CreatePageInput {
  """The userId to assign as the author of the object"""
  authorId: ID

  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The comment status for the object"""
  commentStatus: String

  """The content of the object"""
  content: String

  """
  The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17 
  """
  date: String

  """
  A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types.
  """
  menuOrder: Int

  """The ID of the parent object"""
  parentId: ID

  """The password used to protect the content of the object"""
  password: String

  """The slug of the object"""
  slug: String

  """The status of the object"""
  status: PostStatusEnum

  """The title of the object"""
  title: String
}

"""The payload for the createPage mutation."""
type CreatePagePayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The Post object mutation type."""
  page: Page
}

"""Input for the createPostFormat mutation."""
input CreatePostFormatInput {
  """The slug that the post_format will be an alias of"""
  aliasOf: String

  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The description of the post_format object"""
  description: String

  """The name of the post_format object to mutate"""
  name: String!

  """
  If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name.
  """
  slug: String
}

"""The payload for the createPostFormat mutation."""
type CreatePostFormatPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The created post_format"""
  postFormat: PostFormat
}

"""Input for the createPost mutation."""
input CreatePostInput {
  """The userId to assign as the author of the object"""
  authorId: ID

  """Set connections between the post and categories"""
  categories: PostCategoriesInput

  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The comment status for the object"""
  commentStatus: String

  """The content of the object"""
  content: String

  """
  The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17 
  """
  date: String

  """The excerpt of the object"""
  excerpt: String

  """
  A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types.
  """
  menuOrder: Int

  """The password used to protect the content of the object"""
  password: String

  """The ping status for the object"""
  pingStatus: String

  """URLs that have been pinged."""
  pinged: [String]

  """Set connections between the post and postFormats"""
  postFormats: PostPostFormatsInput

  """The slug of the object"""
  slug: String

  """The status of the object"""
  status: PostStatusEnum

  """Set connections between the post and tags"""
  tags: PostTagsInput

  """The title of the object"""
  title: String

  """URLs queued to be pinged."""
  toPing: [String]
}

"""The payload for the createPost mutation."""
type CreatePostPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The Post object mutation type."""
  post: Post
}

"""Input for the createTag mutation."""
input CreateTagInput {
  """The slug that the post_tag will be an alias of"""
  aliasOf: String

  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The description of the post_tag object"""
  description: String

  """The name of the post_tag object to mutate"""
  name: String!

  """
  If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name.
  """
  slug: String
}

"""The payload for the createTag mutation."""
type CreateTagPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The created post_tag"""
  tag: Tag
}

"""Input for the createUser mutation."""
input CreateUserInput {
  """User's AOL IM account."""
  aim: String

  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """A string containing content about the user."""
  description: String

  """
  A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user).
  """
  displayName: String

  """A string containing the user's email address."""
  email: String

  """	The user's first name."""
  firstName: String

  """User's Jabber account."""
  jabber: String

  """The user's last name."""
  lastName: String

  """User's locale."""
  locale: String

  """
  A string that contains a URL-friendly name for the user. The default is the user's username.
  """
  nicename: String

  """The user's nickname, defaults to the user's username."""
  nickname: String

  """A string that contains the plain text password for the user."""
  password: String

  """If true, this will refresh the users JWT secret."""
  refreshJwtUserSecret: Boolean

  """The date the user registered. Format is Y-m-d H:i:s."""
  registered: String

  """
  If true, this will revoke the users JWT secret. If false, this will unrevoke the JWT secret AND issue a new one. To revoke, the user must have proper capabilities to edit users JWT secrets.
  """
  revokeJwtUserSecret: Boolean

  """
  A string for whether to enable the rich editor or not. False if not empty.
  """
  richEditing: String

  """An array of roles to be assigned to the user."""
  roles: [String]

  """A string that contains the user's username for logging in."""
  username: String!

  """A string containing the user's URL for the user's web site."""
  websiteUrl: String

  """User's Yahoo IM account."""
  yim: String
}

"""The payload for the createUser mutation."""
type CreateUserPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The User object mutation type."""
  user: User
}

"""Object that can be identified with a Database ID"""
interface DatabaseIdentifier {
  """The unique identifier stored in the database"""
  databaseId: Int!
}

"""A Gravity Forms date field."""
type DateField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDateFormatSetting & GfFieldWithDateInputTypeSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSubLabelPlacementSetting & Node {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines how the date field displays it’s calendar icon."""
  calendarIconType: FormFieldCalendarIconTypeEnum

  """
  Contains the URL to the custom calendar icon. Only applicable when calendarIconType is set to custom.
  """
  calendarIconUrl: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """Determines how the date is displayed."""
  dateFormat: DateFieldFormatEnum

  """The type of date field to display."""
  dateType: DateFieldTypeEnum

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [DateInputProperty]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """
  The placement of the labels for the subfields within the group. This setting controls all of the subfields, they cannot be set individually. They may be aligned above or below the inputs. If this property is not set, the “Sub-Label Placement” setting on the Form Settings-&gt;Form Layout page is used. If no setting is specified, the default is above inputs.
  """
  subLabelPlacement: FormFieldSubLabelPlacementEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""How the DateField date is displayed."""
enum DateFieldFormatEnum {
  """dd/mm/yyyy format."""
  DMY

  """dd-mm-yyyy format."""
  DMY_DASH

  """dd.mm.yyyy format."""
  DMY_DOT

  """mm/dd/yyyy format."""
  MDY

  """yyyy/mm/dd format."""
  YMD_DASH

  """yyyy.mm.dd format."""
  YMD_DOT

  """yyyy/mm/dd format."""
  YMD_SLASH
}

"""Type of date field to display."""
enum DateFieldTypeEnum {
  """A date dropdown."""
  DROPDOWN

  """A simple date field."""
  FIELD

  """A datepicker."""
  PICKER
}

"""Date values"""
input DateInput {
  """Day of the month (from 1 to 31)"""
  day: Int

  """Month number (from 1 to 12)"""
  month: Int

  """4 digit year (e.g. 2017)"""
  year: Int
}

"""DateInputProperty input values."""
type DateInputProperty implements GfFieldInput & GfFieldInputWithDateFormatSetting {
  """The autocomplete attribute for the field."""
  autocompleteAttribute: String

  """
  The custom label for the input. When set, this is used in place of the label.
  """
  customLabel: String

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """
  The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field.
  """
  id: Float

  """The label to be used for the input."""
  label: String

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String
}

"""Filter the connection based on input"""
input DateQueryInput {
  """Nodes should be returned after this date"""
  after: DateInput

  """Nodes should be returned before this date"""
  before: DateInput

  """Column to query against"""
  column: PostObjectsConnectionDateColumnEnum

  """For after/before, whether exact value should be matched or not"""
  compare: String

  """Day of the month (from 1 to 31)"""
  day: Int

  """Hour (from 0 to 23)"""
  hour: Int

  """For after/before, whether exact value should be matched or not"""
  inclusive: Boolean

  """Minute (from 0 to 59)"""
  minute: Int

  """Month number (from 1 to 12)"""
  month: Int

  """OR or AND, how the sub-arrays should be compared"""
  relation: RelationEnum

  """Second (0 to 59)"""
  second: Int

  """Week of the year (from 0 to 53)"""
  week: Int

  """4 digit year (e.g. 2017)"""
  year: Int
}

"""The template assigned to the node"""
type DefaultTemplate implements ContentTemplate {
  """The name of the template"""
  templateName: String
}

"""Input for the deleteCategory mutation."""
input DeleteCategoryInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The ID of the category to delete"""
  id: ID!
}

"""The payload for the deleteCategory mutation."""
type DeleteCategoryPayload {
  """The deleted term object"""
  category: Category

  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The ID of the deleted object"""
  deletedId: ID
}

"""Input for the deleteComment mutation."""
input DeleteCommentInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """
  Whether the comment should be force deleted instead of being moved to the trash
  """
  forceDelete: Boolean

  """The deleted comment ID"""
  id: ID!
}

"""The payload for the deleteComment mutation."""
type DeleteCommentPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The deleted comment object"""
  comment: Comment

  """The deleted comment ID"""
  deletedId: ID
}

"""Input for the deleteGfDraftEntry mutation."""
input DeleteGfDraftEntryInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """Either the global ID of the draft entry, or its resume token."""
  id: ID!

  """The ID type for the draft entry. Defaults to `ID` ."""
  idType: DraftEntryIdTypeEnum
}

"""The payload for the deleteGfDraftEntry mutation."""
type DeleteGfDraftEntryPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The global ID of the draft entry that was deleted."""
  deletedId: ID

  """The draft entry object before it was deleted."""
  draftEntry: GfDraftEntry
}

"""Input for the deleteGfEntry mutation."""
input DeleteGfEntryInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """
  Whether the entry should be force deleted instead of being moved to the trash.
  """
  forceDelete: Boolean

  """ID of the entry to delete, either a global or database ID."""
  id: ID!
}

"""The payload for the deleteGfEntry mutation."""
type DeleteGfEntryPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The global ID of the draft entry that was deleted."""
  deletedId: ID

  """The entry object before it was deleted."""
  entry: GfSubmittedEntry
}

"""Input for the deleteMediaItem mutation."""
input DeleteMediaItemInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """
  Whether the mediaItem should be force deleted instead of being moved to the trash
  """
  forceDelete: Boolean

  """The ID of the mediaItem to delete"""
  id: ID!
}

"""The payload for the deleteMediaItem mutation."""
type DeleteMediaItemPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The ID of the deleted mediaItem"""
  deletedId: ID

  """The mediaItem before it was deleted"""
  mediaItem: MediaItem
}

"""Input for the deletePage mutation."""
input DeletePageInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """
  Whether the object should be force deleted instead of being moved to the trash
  """
  forceDelete: Boolean

  """The ID of the page to delete"""
  id: ID!

  """Override the edit lock when another user is editing the post"""
  ignoreEditLock: Boolean
}

"""The payload for the deletePage mutation."""
type DeletePagePayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The ID of the deleted object"""
  deletedId: ID

  """The object before it was deleted"""
  page: Page
}

"""Input for the deletePostFormat mutation."""
input DeletePostFormatInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The ID of the postFormat to delete"""
  id: ID!
}

"""The payload for the deletePostFormat mutation."""
type DeletePostFormatPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The ID of the deleted object"""
  deletedId: ID

  """The deleted term object"""
  postFormat: PostFormat
}

"""Input for the deletePost mutation."""
input DeletePostInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """
  Whether the object should be force deleted instead of being moved to the trash
  """
  forceDelete: Boolean

  """The ID of the post to delete"""
  id: ID!

  """Override the edit lock when another user is editing the post"""
  ignoreEditLock: Boolean
}

"""The payload for the deletePost mutation."""
type DeletePostPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The ID of the deleted object"""
  deletedId: ID

  """The object before it was deleted"""
  post: Post
}

"""Input for the deleteTag mutation."""
input DeleteTagInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The ID of the tag to delete"""
  id: ID!
}

"""The payload for the deleteTag mutation."""
type DeleteTagPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The ID of the deleted object"""
  deletedId: ID

  """The deleted term object"""
  tag: Tag
}

"""Input for the deleteUser mutation."""
input DeleteUserInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The ID of the user you want to delete"""
  id: ID!

  """Reassign posts and links to new User ID."""
  reassignId: ID
}

"""The payload for the deleteUser mutation."""
type DeleteUserPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The ID of the user that you just deleted"""
  deletedId: ID

  """The deleted user object"""
  user: User
}

"""The discussion setting type"""
type DiscussionSettings {
  """Allow people to submit comments on new posts."""
  defaultCommentStatus: String

  """
  Allow link notifications from other blogs (pingbacks and trackbacks) on new articles.
  """
  defaultPingStatus: String
}

"""The Type of Identifier used to fetch a single resource."""
enum DraftEntryIdTypeEnum {
  """Unique global ID for the object."""
  ID

  """The resume token assigned by Gravity Forms. Used by draft entries."""
  RESUME_TOKEN
}

"""Relational context between connected nodes"""
interface Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The connected node"""
  node: Node!
}

"""A Gravity Forms email field."""
type EmailField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithAutocompleteSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & GfFieldWithSubLabelPlacementSetting & GfGfFieldWithEmailConfirmationSetting & Node {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """Whether autocomplete should be enabled for this field."""
  hasAutocomplete: Boolean

  """Determines whether the Confirm Email field is active."""
  hasEmailConfirmation: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [EmailInputProperty]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """
  The placement of the labels for the subfields within the group. This setting controls all of the subfields, they cannot be set individually. They may be aligned above or below the inputs. If this property is not set, the “Sub-Label Placement” setting on the Form Settings-&gt;Form Layout page is used. If no setting is specified, the default is above inputs.
  """
  subLabelPlacement: FormFieldSubLabelPlacementEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""Input fields for email field."""
input EmailFieldInput {
  """
  Email confirmation input value. Only used when email confirmation is enabled.
  """
  confirmationValue: String

  """Email input value."""
  value: String
}

"""EmailInputProperty input values."""
type EmailInputProperty implements GfFieldInput & GfFieldInputWithEmailConfirmationSetting {
  """The autocomplete attribute for the field."""
  autocompleteAttribute: String

  """
  The custom label for the input. When set, this is used in place of the label.
  """
  customLabel: String

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """
  The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field.
  """
  id: Float

  """The label to be used for the input."""
  label: String

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  name: String

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String
}

"""Asset enqueued by the CMS"""
interface EnqueuedAsset {
  """The inline code to be run after the asset is loaded."""
  after: [String]

  """Deprecated"""
  args: Boolean @deprecated(reason: "Use `EnqueuedAsset.media` instead.")

  """The inline code to be run before the asset is loaded."""
  before: [String]

  """
  The HTML conditional comment for the enqueued asset. E.g. IE 6, lte IE 7, etc
  """
  conditional: String

  """Dependencies needed to use this asset"""
  dependencies: [EnqueuedAsset]

  """Extra information needed for the script"""
  extra: String @deprecated(reason: "Use `EnqueuedScript.extraData` instead.")

  """The handle of the enqueued asset"""
  handle: String

  """The ID of the enqueued asset"""
  id: ID!

  """The source of the asset"""
  src: String

  """The version of the enqueued asset"""
  version: String
}

"""Script enqueued by the CMS"""
type EnqueuedScript implements EnqueuedAsset & Node {
  """The inline code to be run after the asset is loaded."""
  after: [String]

  """Deprecated"""
  args: Boolean @deprecated(reason: "Use `EnqueuedAsset.media` instead.")

  """The inline code to be run before the asset is loaded."""
  before: [String]

  """
  The HTML conditional comment for the enqueued asset. E.g. IE 6, lte IE 7, etc
  """
  conditional: String

  """Dependencies needed to use this asset"""
  dependencies: [EnqueuedScript]

  """Extra information needed for the script"""
  extra: String @deprecated(reason: "Use `EnqueuedScript.extraData` instead.")

  """Extra data supplied to the enqueued script"""
  extraData: String

  """The handle of the enqueued asset"""
  handle: String

  """The global ID of the enqueued script"""
  id: ID!

  """The source of the asset"""
  src: String

  """The loading strategy to use on the script tag"""
  strategy: ScriptLoadingStrategyEnum

  """The version of the enqueued script"""
  version: String
}

"""Connection to EnqueuedScript Nodes"""
interface EnqueuedScriptConnection implements Connection {
  """
  A list of edges (relational context) between ContentNode and connected EnqueuedScript Nodes
  """
  edges: [EnqueuedScriptConnectionEdge!]!

  """A list of connected EnqueuedScript Nodes"""
  nodes: [EnqueuedScript!]!

  """Information about pagination in a connection."""
  pageInfo: EnqueuedScriptConnectionPageInfo!
}

"""Edge between a Node and a connected EnqueuedScript"""
interface EnqueuedScriptConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The connected EnqueuedScript Node"""
  node: EnqueuedScript!
}

"""Page Info on the connected EnqueuedScriptConnectionEdge"""
interface EnqueuedScriptConnectionPageInfo implements PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Stylesheet enqueued by the CMS"""
type EnqueuedStylesheet implements EnqueuedAsset & Node {
  """The inline code to be run after the asset is loaded."""
  after: [String]

  """Deprecated"""
  args: Boolean @deprecated(reason: "Use `EnqueuedAsset.media` instead.")

  """The inline code to be run before the asset is loaded."""
  before: [String]

  """
  The HTML conditional comment for the enqueued asset. E.g. IE 6, lte IE 7, etc
  """
  conditional: String

  """Dependencies needed to use this asset"""
  dependencies: [EnqueuedStylesheet]

  """Extra information needed for the script"""
  extra: String @deprecated(reason: "Use `EnqueuedScript.extraData` instead.")

  """The handle of the enqueued asset"""
  handle: String

  """The global ID of the enqueued stylesheet"""
  id: ID!

  """Whether the enqueued style is RTL or not"""
  isRtl: Boolean

  """The media attribute to use for the link"""
  media: String

  """
  The absolute path to the enqueued style. Set when the stylesheet is meant to load inline.
  """
  path: String

  """The `rel` attribute to use for the link"""
  rel: String

  """The source of the asset"""
  src: String

  """Optional suffix, used in combination with RTL"""
  suffix: String

  """
  The title of the enqueued style. Used for preferred/alternate stylesheets.
  """
  title: String

  """The version of the enqueued style"""
  version: String
}

"""Connection to EnqueuedStylesheet Nodes"""
interface EnqueuedStylesheetConnection implements Connection {
  """
  A list of edges (relational context) between ContentNode and connected EnqueuedStylesheet Nodes
  """
  edges: [EnqueuedStylesheetConnectionEdge!]!

  """A list of connected EnqueuedStylesheet Nodes"""
  nodes: [EnqueuedStylesheet!]!

  """Information about pagination in a connection."""
  pageInfo: EnqueuedStylesheetConnectionPageInfo!
}

"""Edge between a Node and a connected EnqueuedStylesheet"""
interface EnqueuedStylesheetConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The connected EnqueuedStylesheet Node"""
  node: EnqueuedStylesheet!
}

"""Page Info on the connected EnqueuedStylesheetConnectionEdge"""
interface EnqueuedStylesheetConnectionPageInfo implements PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Options for ordering the connection."""
input EntriesConnectionOrderbyInput {
  """The field name used to sort the results."""
  field: String

  """Whether the sorting field's values are numeric."""
  isNumeric: Boolean

  """The cardinality of the order of the connection."""
  order: OrderEnum
}

"""Date Filters input fields for Entries queries."""
input EntriesDateFiltersInput {
  """End date in Y-m-d H:i:s format."""
  endDate: String

  """Start date in Y-m-d H:i:s format."""
  startDate: String
}

"""Field Filters input fields for Entries queries."""
input EntriesFieldFiltersInput {
  """
  The field value(s) to filter by. Must be boolean values. If using this field, do not also use stringValues, intValues or floatValues.
  """
  boolValues: [Boolean]

  """
  The field value(s) to filter by. Must be float values. If using this field, do not also use stringValues, intValues or boolValues.
  """
  floatValues: [Float]

  """
  The field value(s) to filter by. Must be integer values. If using this field, do not also use stringValues, floatValues or boolValues.
  """
  intValues: [Int]

  """
  Optional. The entry meta key to filter by. You can use the ID of the form field, or the names of any of the columns in Gravity Form's database table for entries, such as "date_created", "is_read, "created_by", etc. If omitted, the value will be checked against all meta keys. .
  """
  key: String

  """The operator to use for filtering."""
  operator: FieldFiltersOperatorEnum

  """
  The field value(s) to filter by. Must be string values. If using this field, do not also use intValues, floatValues or boolValues.
  """
  stringValues: [String]
}

"""The Type of Identifier used to fetch a single resource."""
enum EntryIdTypeEnum {
  """The database ID assigned by Gravity Forms. Used by submitted entries."""
  DATABASE_ID

  """Unique global ID for the object."""
  ID

  """The resume token assigned by Gravity Forms. Used by draft entries."""
  RESUME_TOKEN
}

"""Status of entries to get. Default is ACTIVE."""
enum EntryStatusEnum {
  """Active entries (default)."""
  ACTIVE

  """All entries."""
  ALL

  """Spam entries."""
  SPAM

  """Entries in the trash."""
  TRASH
}

"""The type of Gravity Forms entry."""
enum EntryTypeEnum {
  """A Gravity Forms draft entry."""
  DRAFT

  """A Gravity Forms partial entry."""
  PARTIAL

  """A submitted Gravity Forms entry."""
  SUBMITTED
}

"""Field error."""
type FieldError {
  """The form field that the error is connected to."""
  connectedFormField: FormField

  """The field with the associated error message."""
  id: Float

  """Error message."""
  message: String
}

"""Whether to filter by ALL or ANY of the field filters. Default is ALL."""
enum FieldFiltersModeEnum {
  """All field filters (default)."""
  ALL

  """Any field filters."""
  ANY
}

"""The operator to use for filtering."""
enum FieldFiltersOperatorEnum {
  """
  Find field values that contain the passed value. Only one value may be passed when using this operator. SQL Equivalent: `LIKE %value%`.
  """
  CONTAINS

  """
  Default. Find field values that are equal to one of the values in the passed array. Default.
  """
  IN

  """
  Find field values that are an exact match for the passed value. Only one value may be passed when using this operator. SQL Equivalent: `=`.
  """
  IS

  """
  Find field values that are NOT an exact match for the passed value. Only one value may be passed when using this operator. SQL Equivalent: `NOT`.
  """
  IS_NOT

  """
  Find field values that are an exact match for the passed value. SQL wildcards are supported. Only one value may be passed when using this operator. SQL Equivalent: `LIKE`.
  """
  LIKE

  """Find field values that do NOT match those in the values array."""
  NOT_IN
}

"""A Gravity Forms fileupload field."""
type FileUploadField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDescriptionSetting & GfFieldWithErrorMessageSetting & GfFieldWithFileExtensionsSetting & GfFieldWithFileSizeSetting & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithMultipleFilesSetting & GfFieldWithPersonalData & GfFieldWithRulesSetting & Node {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """A comma-delimited list of the file extensions which may be uploaded."""
  allowedExtensions: [String]

  """Indicates whether multiple files may be uploaded."""
  canAcceptMultipleFiles: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """File upload value"""
  fileUploadValues: [FileUploadFieldValue]

  """The globally unique ID for the object"""
  id: ID!

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The maximum size (in MB) an uploaded file may be ."""
  maxFileSize: Int

  """
  When the field is set to allow multiple files to be uploaded, this property is available to set a limit on how many may be uploaded.
  """
  maxFiles: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""The individual file properties from an uploaded file."""
type FileUploadFieldValue {
  """The path to the parent directory of the file."""
  basePath: String

  """The base url to the parent directory of the file."""
  baseUrl: String

  """The filename."""
  filename: String

  """The url to the file."""
  url: String
}

"""Gravity Forms button."""
type FormButton {
  """
  Controls when the form button should be visible based on values selected on the form.
  """
  conditionalLogic: ConditionalLogic

  """
  Contains the URL for the image button. Only applicable when type is set to image.
  """
  imageUrl: String

  """Contains the button text. Only applicable when type is set to text."""
  text: String

  """Specifies the type of button to be displayed. Defaults to TEXT."""
  type: FormButtonTypeEnum
}

"""Type of button to be displayed. Default is TEXT."""
enum FormButtonTypeEnum {
  """Image button."""
  IMAGE

  """Text button (default)."""
  TEXT
}

"""Properties for all the email notifications which exist for a form."""
type FormConfirmation {
  """Controls which form confirmation message should be displayed."""
  conditionalLogic: ConditionalLogic

  """ID."""
  id: String

  """
  Whether the confirmation is active or inactive. The default confirmation is always active.
  """
  isActive: Boolean

  """
  Whether the confirmation message should be formatted so that paragraphs are automatically added for new lines.
  """
  isAutoformatted: Boolean

  """Whether this is the default confirmation."""
  isDefault: Boolean

  """
  Contains the confirmation message that will be displayed. Only applicable when type is set to &quot;MESSAGE&quot;.
  """
  message: String

  """The confirmation name."""
  name: String

  """
  The page that the browser will be redirected to. Only applicable when type is set to `PAGE`.
  """
  page: FormConfirmationToPageConnectionEdge

  """
  Contains the Id of the WordPress page that the browser will be redirected to. Only applicable when type is set to `PAGE`.
  """
  pageId: Int

  """
  Contains the query string to be appended to the redirection url. Only applicable when type is set to `REDIRECT`.
  """
  queryString: String

  """Determines the type of confirmation to be used."""
  type: FormConfirmationTypeEnum

  """
  Contains the URL that the browser will be redirected to. Only applicable when type is set to `REDIRECT`.
  """
  url: String
}

"""Connection between the FormConfirmation type and the Page type"""
type FormConfirmationToPageConnectionEdge implements Edge & OneToOneConnection & PageConnectionEdge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The node of the connection, without the edges"""
  node: Page!
}

"""Type of form confirmation to be used."""
enum FormConfirmationTypeEnum {
  """Use a confirmation "message"."""
  MESSAGE

  """Use a redirect to a different WordPress "page"."""
  PAGE

  """Use a "redirect" to a given URL."""
  REDIRECT
}

"""
The policies governing which entry data to include when erasing and exporting personal data.
"""
type FormDataPolicies {
  """
  Whether entry data from this form is included when erasing and exporting personal data.
  """
  canExportAndErase: Boolean

  """The individual entry data exporting and erasing policies."""
  entryData: [FormEntryDataPolicy]

  """The database ID of the Gravity Forms field used to identify the user."""
  identificationFieldDatabaseId: Int
}

"""
Determines where the field description is displayed relative to the field.
"""
enum FormDescriptionPlacementEnum {
  """
  The field description is displayed above the field input (i.e. immediately after the field label).
  """
  ABOVE

  """The field description is displayed below the field input."""
  BELOW
}

"""The individual entry data exporting and erasing policies."""
type FormEntryDataPolicy {
  """The array key for the Gravity Forms Entry."""
  key: String

  """Whether this field should be included when erasing personal data."""
  shouldErase: Boolean

  """Whether this field should be included when exporting personal data."""
  shouldExport: Boolean
}

"""Gravity Forms form entry limititation details."""
type FormEntryLimits {
  """Whether the form has a limit on the number of submissions."""
  hasLimit: Boolean

  """
  Message that will be displayed when the maximum number of submissions have been reached.
  """
  limitReachedMessage: String

  """The time period during which submissions are allowed."""
  limitationPeriod: FormLimitEntriesPeriodEnum

  """The number of submissions allowed."""
  maxEntries: Int
}

"""Gravity Forms field."""
interface FormField implements Node {
  """Field database ID."""
  databaseId: Int!

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """Global ID."""
  id: ID!

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""How the date field displays its calendar icon."""
enum FormFieldCalendarIconTypeEnum {
  """Default calendar icon."""
  CALENDAR

  """Custom calendar icon."""
  CUSTOM

  """No calendar icon."""
  NONE
}

"""Connection to FormField Nodes"""
interface FormFieldConnection implements Connection {
  """
  A list of edges (relational context) between SubmitGfFormPayload and connected FormField Nodes
  """
  edges: [FormFieldConnectionEdge!]!

  """A list of connected FormField Nodes"""
  nodes: [FormField!]!

  """Information about pagination in a connection."""
  pageInfo: FormFieldConnectionPageInfo!
}

"""Edge between a Node and a connected FormField"""
interface FormFieldConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The connected FormField Node"""
  node: FormField!
}

"""Page Info on the connected FormFieldConnectionEdge"""
interface FormFieldConnectionPageInfo implements PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""
The form field-specifc policies for exporting and erasing personal data.
"""
type FormFieldDataPolicy {
  """Whether this field is used to identify the user&#039;s personal data."""
  isIdentificationField: Boolean

  """Whether this field should be included when erasing personal data."""
  shouldErase: Boolean

  """Whether this field should be included when exporting personal data."""
  shouldExport: Boolean
}

"""
Determines where the field description is displayed relative to the field.
"""
enum FormFieldDescriptionPlacementEnum {
  """
  The field description is displayed above the field input (i.e. immediately after the field label).
  """
  ABOVE

  """The field description is displayed below the field input."""
  BELOW

  """The field description is inherited from the form default settings."""
  INHERIT
}

"""
The field label position. Empty when using the form defaults or a value of "hidden_label".
"""
enum FormFieldLabelPlacementEnum {
  """Field label is hidden."""
  HIDDEN

  """Field label is inherited from the form defaults."""
  INHERIT

  """Field label is displayed beside the fields and aligned to the left."""
  LEFT

  """Field label is displayed beside the fields and aligned to the right."""
  RIGHT

  """Field label is displayed on top of the fields."""
  TOP
}

"""Type of indicator to use when field is required."""
enum FormFieldRequiredIndicatorEnum {
  """Asterisk (*) indicator."""
  ASTERISK

  """Custom indicator."""
  CUSTOM

  """Text (Required) indicator (default)."""
  TEXT
}

"""The size of the field when displayed on the page."""
enum FormFieldSizeEnum {
  """Large field size."""
  LARGE

  """Medium field size."""
  MEDIUM

  """Small field size."""
  SMALL
}

"""Determines how sub-labels are aligned."""
enum FormFieldSubLabelPlacementEnum {
  """
  The sub-label is displayed above the sub-field input (i.e. immediately after the field label).
  """
  ABOVE

  """The sub-label is displayed below the sub-field input."""
  BELOW

  """Field label is inherited from the form defaults."""
  INHERIT
}

"""Gravity Forms Field Type."""
enum FormFieldTypeEnum {
  """A Gravity Forms address field."""
  ADDRESS

  """A Gravity Forms calculation field."""
  CALCULATION

  """A Gravity Forms captcha field."""
  CAPTCHA

  """A Gravity Forms checkbox field."""
  CHECKBOX

  """A Gravity Forms consent field."""
  CONSENT

  """A Gravity Forms date field."""
  DATE

  """A Gravity Forms email field."""
  EMAIL

  """A Gravity Forms fileupload field."""
  FILEUPLOAD

  """A Gravity Forms hidden field."""
  HIDDEN

  """A Gravity Forms hiddenproduct field."""
  HIDDENPRODUCT

  """A Gravity Forms html field."""
  HTML

  """A Gravity Forms list field."""
  LIST

  """A Gravity Forms multiselect field."""
  MULTISELECT

  """A Gravity Forms name field."""
  NAME

  """A Gravity Forms number field."""
  NUMBER

  """A Gravity Forms option field."""
  OPTION

  """A Gravity Forms page field."""
  PAGE

  """A Gravity Forms password field."""
  PASSWORD

  """A Gravity Forms phone field."""
  PHONE

  """A Gravity Forms post_category field."""
  POST_CATEGORY

  """A Gravity Forms post_content field."""
  POST_CONTENT

  """A Gravity Forms post_custom_field field."""
  POST_CUSTOM_FIELD

  """A Gravity Forms post_excerpt field."""
  POST_EXCERPT

  """A Gravity Forms post_image field."""
  POST_IMAGE

  """A Gravity Forms post_tags field."""
  POST_TAGS

  """A Gravity Forms post_title field."""
  POST_TITLE

  """A Gravity Forms price field."""
  PRICE

  """A Gravity Forms product field."""
  PRODUCT

  """A Gravity Forms quantity field."""
  QUANTITY

  """A Gravity Forms radio field."""
  RADIO

  """A Gravity Forms section field."""
  SECTION

  """A Gravity Forms select field."""
  SELECT

  """A Gravity Forms shipping field."""
  SHIPPING

  """A Gravity Forms singleproduct field."""
  SINGLEPRODUCT

  """A Gravity Forms singleshipping field."""
  SINGLESHIPPING

  """A Gravity Forms text field."""
  TEXT

  """A Gravity Forms textarea field."""
  TEXTAREA

  """A Gravity Forms time field."""
  TIME

  """A Gravity Forms total field."""
  TOTAL

  """A Gravity Forms website field."""
  WEBSITE
}

"""Field values input. Includes a field id, and a valid value Input."""
input FormFieldValuesInput {
  """The form field values for Address fields."""
  addressValues: AddressFieldInput

  """The form field values for Checkbox fields."""
  checkboxValues: [CheckboxFieldInput]

  """The form field values for Email fields."""
  emailValues: EmailFieldInput

  """The form field values for file upload fields."""
  fileUploadValues: [Upload]

  """The field id."""
  id: Int!

  """The form field values for post image fields."""
  imageValues: ImageInput

  """The form field values for List fields."""
  listValues: [ListFieldInput]

  """The form field values for Name fields."""
  nameValues: NameFieldInput

  """The form field values for Name fields."""
  productValues: ProductFieldInput

  """The form field values for basic fields."""
  value: String

  """
  The form field values for fields that accept multiple string values. Used by MultiSelect, Post Category, Post Custom, and Post Tags fields.
  """
  values: [String]
}

"""Field visibility."""
enum FormFieldVisibilityEnum {
  """The field is for "administrative" use."""
  ADMINISTRATIVE

  """The field is "hidden"."""
  HIDDEN

  """The field is "visible"."""
  VISIBLE
}

"""The Type of Identifier used to fetch a single resource."""
enum FormIdTypeEnum {
  """The database ID assigned by Gravity Forms."""
  DATABASE_ID

  """Unique global ID for the object."""
  ID
}

"""
Determines where the field labels should be placed in relation to the field.
"""
enum FormLabelPlacementEnum {
  """Field labels are displayed beside the fields and aligned to the left."""
  LEFT

  """Field labels are displayed beside the fields and aligned to the right."""
  RIGHT

  """Field labels are displayed on top of the fields."""
  TOP
}

"""Gravity Forms button."""
type FormLastPageButton {
  """
  Contains the URL for the image button. Only applicable when type is set to image.
  """
  imageUrl: String

  """Contains the button text. Only applicable when type is set to text."""
  text: String

  """Specifies the type of button to be displayed. Defaults to TEXT."""
  type: FormButtonTypeEnum
}

"""
When limitEntries is set to 1, this property specifies the time period during which submissions are allowed.
"""
enum FormLimitEntriesPeriodEnum {
  """Limit entries by "day"."""
  DAY

  """Limit entries by "month"."""
  MONTH

  """Limit entries by "week"."""
  WEEK

  """Limit entries by "year"."""
  YEAR
}

"""Gravity Forms form login requirements data."""
type FormLogin {
  """
  Whether the form is configured to be displayed only to logged in users.
  """
  isLoginRequired: Boolean

  """
  When `isLoginRequired` is set to true, this controls the message displayed when non-logged in user tries to access the form.
  """
  loginRequiredMessage: String
}

"""Properties for all the email notifications which exist for a form."""
type FormNotification {
  """The email or merge tags to be used as the email bcc address."""
  bcc: String

  """
  An associative array containing the conditional logic rules. See the Conditional Logic Object for more details.
  """
  conditionalLogic: ConditionalLogic

  """The notification event. Default is form_submission."""
  event: String

  """The email or merge tag to be used as the email from address."""
  from: String

  """The text or merge tag to be used as the email from name."""
  fromName: String

  """The notification ID. A 13 character unique ID."""
  id: String

  """Is the notification active or inactive. The default is true (active)."""
  isActive: Boolean

  """
  Whether the email message should be formatted so that paragraphs are automatically added for new lines.
  """
  isAutoformatted: Boolean

  """The email body/content. Merge tags supported."""
  message: String

  """The notification name."""
  name: String

  """The email or merge tags to be used as the email reply to address."""
  replyTo: String

  """Routing rules."""
  routing: [FormNotificationRouting]

  """
  The name of the service to be used when sending this notification. Default is wordpress.
  """
  service: String

  """
  Determines if files uploaded on the form should be included when the notification is sent.
  """
  shouldSendAttachments: Boolean

  """The email subject line. Merge tags supported."""
  subject: String

  """
  The ID of an email field, an email address or merge tag to be used as the email to address.
  """
  to: String

  """Identifies what to use for the notification &quot;to&quot;."""
  toType: FormNotificationToTypeEnum
}

"""Properties for all the email notifications which exist for a form."""
type FormNotificationRouting {
  """
  The email or merge tag to be used as the email To address if this rule is a match.
  """
  email: String

  """
  Target field ID. The field that will have it’s value compared with the value property to determine if this rule is a match.
  """
  fieldId: Int

  """Operator to be used when evaluating this rule."""
  operator: FormRuleOperatorEnum

  """The value to compare with the field specified by fieldId."""
  value: String
}

"""What to use for the notification "to"."""
enum FormNotificationToTypeEnum {
  """Email address."""
  EMAIL

  """Form field."""
  FIELD

  """Hidden."""
  HIDDEN

  """Routing using conditional rules."""
  ROUTING
}

"""Style of progress bar."""
enum FormPageProgressStyleEnum {
  """Blue progress bar style."""
  BLUE

  """Custom progress bar style."""
  CUSTOM

  """Green progress bar style."""
  GREEN

  """Grey progress bar style."""
  GREY

  """Orange progress bar style."""
  ORANGE

  """Red progress bar style."""
  RED
}

"""Type of page progress indicator to be displayed."""
enum FormPageProgressTypeEnum {
  """Don't show a page progress indicator."""
  NONE

  """Show page progress indicator as a percentage."""
  PERCENTAGE

  """Show page progress indicator as steps."""
  STEPS
}

"""Gravity Forms form pagination data."""
type FormPagination {
  """
  Progress bar background color. Can be any CSS color value. Only applies when `style` is set to &quot;CUSTOM&quot;.
  """
  backgroundColor: String

  """
  Progress bar text color. Can be any CSS color value. Only applies when `style` is set to &quot;CUSTOM&quot;.
  """
  color: String

  """
  Whether the confirmation bar should be displayed with the confirmation text.
  """
  hasProgressbarOnConfirmation: Boolean

  """Last page button data."""
  lastPageButton: FormLastPageButton

  """Names of the form&#039;s pages."""
  pageNames: [String]

  """
  The confirmation text to display once the end of the progress bar has been reached. Only applies when `hasProgressbarOnConfirmation` is set to true.
  """
  progressbarCompletionText: String

  """Style of progress bar."""
  style: FormPageProgressStyleEnum

  """Type of progress indicator."""
  type: FormPageProgressTypeEnum
}

"""Gravity Forms form Personal Data settings."""
type FormPersonalData {
  """
  The policies governing which entry data to include when erasing and exporting personal data.
  """
  dataPolicies: FormDataPolicies

  """
  The number of days to retain entries. `null` if `retentionPolicy` is set to `RETAIN` entries indefinitely.
  """
  daysToRetain: Int

  """The policy for retaining old entry data."""
  retentionPolicy: FormRetentionPolicyEnum

  """Whether the IP address should be saved to the form submission."""
  shouldSaveIP: Boolean
}

"""Gravity Forms form entry limititation details."""
type FormPostCreation {
  """
  When `useCurrentUserAsAuthor` is `false`, this contains the User object for the author.
  """
  author: User

  """
  When `useCurrentUserAsAuthor` is `false`, this property contains the user database that will be used as the Post author.
  """
  authorDatabaseId: Int

  """
  When `useCurrentUserAsAuthor` is `false`, this property contains the user ID that will be used as the Post author.
  """
  authorId: ID

  """
  Form forms with Post fields, but without a Post Category field, this property contains the default category database ID the post will be associated with when created.
  """
  categoryDatabaseId: Int

  """
  Template to be used when creating the post content. Field variables (i.e. {Name:3} ) can be added to the template to insert user submitted values into the post content. Only applicable when `hasContentTemplate` is `true`.
  """
  contentTemplate: String

  """Determines the format that the Post should be created with."""
  format: PostFormatTypeEnum

  """
  Determines if the post template functionality is enabled. When enabled, the post content will be created based on the template specified by `contentTemplate`.
  """
  hasContentTemplate: Boolean

  """
  Determines if the post title template functionality is enabled. When enabled, the post title will be created based on the template specified by `titleTemplate`.
  """
  hasTitleTemplate: Boolean

  """
  For forms with Post fields, this determines if the post should be created using the current logged in user as the author.
  """
  shouldUseCurrentUserAsAuthor: Boolean

  """
  For forms with Post fields, determines the status that the Post should be created with.
  """
  status: String

  """
  Template to be used when creating the post title. Field variables (i.e. {Name:3} ) can be added to the template to insert user submitted values into the post title. Only applicable when `hasTitleTemplate` is `true`.
  """
  titleTemplate: String
}

"""The Personal Data retention policy."""
enum FormRetentionPolicyEnum {
  """
  Entries will be deleted automatically after a specified number of days.
  """
  DELETE

  """Entries will be retain indefinitely."""
  RETAIN

  """
  Entries will be trashed automatically after a specified number of days.
  """
  TRASH
}

"""Operator to be used when evaluating logic rules."""
enum FormRuleOperatorEnum {
  """Evaluates values that CONTAIN the comparison value."""
  CONTAINS

  """Evaluates values that END with the comparison value."""
  ENDS_WITH

  """Evaluates values that are GREATER than the comparison value."""
  GREATER_THAN

  """Evaluates values that match the comparison value."""
  IS

  """Evaluates values that do NOT match the comparison value."""
  IS_NOT

  """Evaluates values that are LESS than the comparison value."""
  LESS_THAN

  """Evaluates values that START with the comparison value."""
  STARTS_WITH
}

"""Gravity Forms form Save and Continue data."""
type FormSaveAndContinue {
  """Contains the save button text."""
  buttonText: String

  """Whether the Save And Continue feature is enabled."""
  hasSaveAndContinue: Boolean
}

"""Gravity Forms form scheduling data."""
type FormSchedule {
  """Message to be displayed when form is no longer available."""
  closedMessage: String

  """The Date/time details when the form will become inactive."""
  endDetails: FormScheduleDetails

  """
  Specifies if this form is scheduled to be displayed only during a certain configured date/time.
  """
  hasSchedule: Boolean

  """Message to be displayed when form is not yet available."""
  pendingMessage: String

  """The Date/time details when the form will become active/visible."""
  startDetails: FormScheduleDetails
}

"""Gravity Forms form scheduling data."""
type FormScheduleDetails {
  """Whether the date is in the AM or PM of a 12-hour clock."""
  amPm: AmPmEnum

  """The schedule date in local time."""
  date: String

  """The schedule date in GMT."""
  dateGmt: String

  """The hour (1-12)."""
  hour: Int

  """The minute."""
  minute: Int
}

"""Status of forms to get. Default is ACTIVE."""
enum FormStatusEnum {
  """Active forms (default)."""
  ACTIVE

  """Inactive forms."""
  INACTIVE

  """Inactive forms in the trash."""
  INACTIVE_TRASHED

  """Active forms in the trash."""
  TRASHED
}

"""Determines how sub-labels are aligned."""
enum FormSubLabelPlacementEnum {
  """
  The sub-label is displayed above the sub-field input (i.e. immediately after the field label).
  """
  ABOVE

  """The sub-label is displayed below the sub-field input."""
  BELOW
}

"""Gravity Forms submit button."""
type FormSubmitButton {
  """
  Controls when the form button should be visible based on values selected on the form.
  """
  conditionalLogic: ConditionalLogic

  """
  Contains the URL for the image button. Only applicable when type is set to image.
  """
  imageUrl: String

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """Where the submit button should be located."""
  location: FormSubmitButtonLocationEnum

  """Contains the button text. Only applicable when type is set to text."""
  text: String

  """Specifies the type of button to be displayed. Defaults to TEXT."""
  type: FormButtonTypeEnum

  """The width of the submit button element."""
  width: FormSubmitButtonWidthEnum
}

"""Where the submit button should be located."""
enum FormSubmitButtonLocationEnum {
  """
  The submit button will be placed in a new row after all fields of the form.
  """
  BOTTOM

  """
  The submit button will be placed on the last row of the form where it will fill the remaining space left by field columns.
  """
  INLINE
}

"""Submit button width."""
enum FormSubmitButtonWidthEnum {
  """The width is set to match that of the button text."""
  AUTO

  """The width is set to fill 100% of the container."""
  FULL
}

"""Type of button to be displayed. Default is TEXT."""
enum FormsConnectionOrderByEnum {
  """The date the form was created."""
  DATE_CREATED

  """The database ID of the form."""
  ID

  """The Form's active status."""
  IS_ACTIVE

  """The form's trash status ."""
  IS_TRASH

  """The title of the form."""
  TITLE
}

"""Options for ordering the connection."""
input FormsConnectionOrderbyInput {
  """The form column name used to sort the results."""
  column: FormsConnectionOrderByEnum

  """The cardinality of the order of the connection."""
  order: OrderEnum
}

"""The general setting type"""
type GeneralSettings {
  """A date format for all date strings."""
  dateFormat: String

  """Site tagline."""
  description: String

  """This address is used for admin purposes, like new user notification."""
  email: String

  """WordPress locale code."""
  language: String

  """A day number of the week that the week should start on."""
  startOfWeek: Int

  """A time format for all time strings."""
  timeFormat: String

  """A city in the same timezone as you."""
  timezone: String

  """Site title."""
  title: String

  """Site URL."""
  url: String
}

"""Currencies supported by Gravity Forms."""
enum GfCurrencyEnum {
  """Australian Dollar ."""
  AUD

  """Brazilian Real ."""
  BRL

  """Canadian Dollar ."""
  CAD

  """Swiss Franc ."""
  CHF

  """Czech Koruna ."""
  CZK

  """Danish Krone ."""
  DKK

  """Euro ."""
  EUR

  """Pound Sterling ."""
  GBP

  """Hong Kong Dollar ."""
  HKD

  """Hungarian Forint ."""
  HUF

  """Israeli New Sheqel ."""
  ILS

  """Japanese Yen ."""
  JPY

  """Mexican Peso ."""
  MXN

  """Malaysian Ringgit ."""
  MYR

  """Norwegian Krone ."""
  NOK

  """New Zealand Dollar ."""
  NZD

  """Philippine Peso ."""
  PHP

  """Polish Zloty ."""
  PLN

  """Russian Ruble ."""
  RUB

  """Swedish Krona ."""
  SEK

  """Singapore Dollar ."""
  SGD

  """Thai Baht ."""
  THB

  """Taiwan New Dollar ."""
  TWD

  """U.S. Dollar ."""
  USD

  """South African Rand ."""
  ZAR
}

"""A Gravity Forms draft entry."""
type GfDraftEntry implements GfEntry & Node & NodeWithForm {
  """The user who created the entry."""
  createdBy: User

  """
  Database ID of the user that submitted of the form if a logged in user submitted the form.
  """
  createdByDatabaseId: Int

  """
  Global ID of the user that submitted of the form if a logged in user submitted the form.
  """
  createdById: ID

  """The date and time that the entry was created in local time."""
  dateCreated: String

  """The date and time that the entry was created in GMT."""
  dateCreatedGmt: String

  """The date and time that the entry was created in local time."""
  dateUpdated: String

  """The date and time that the entry was updated in GMT."""
  dateUpdatedGmt: String

  """The form object of the node."""
  form: GfForm

  """The database identifier of the form of the node."""
  formDatabaseId: Int

  """The form fields associated with the entry."""
  formFields(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: GfEntryToFormFieldConnectionWhereArgs
  ): GfEntryToFormFieldConnection

  """The globally unique identifier of the form of the node."""
  formId: ID

  """The globally unique ID for the object"""
  id: ID!

  """Client IP of user who submitted the form."""
  ip: String

  """Whether the entry is a draft."""
  isDraft: Boolean

  """Whether the entry has been submitted."""
  isSubmitted: Boolean

  """The entry order summary. Null if the entry has no pricing fields"""
  orderSummary: GfOrderSummary

  """The resume token. Only applies to draft entries."""
  resumeToken: String

  """Source URL of page that contained the form when it was submitted."""
  sourceUrl: String

  """
  Provides the name and version of both the browser and operating system from which the entry was submitted.
  """
  userAgent: String
}

"""Gravity Forms entry interface."""
interface GfEntry implements Node & NodeWithForm {
  """The user who created the entry."""
  createdBy: User

  """
  Database ID of the user that submitted of the form if a logged in user submitted the form.
  """
  createdByDatabaseId: Int

  """
  Global ID of the user that submitted of the form if a logged in user submitted the form.
  """
  createdById: ID

  """The date and time that the entry was created in local time."""
  dateCreated: String

  """The date and time that the entry was created in GMT."""
  dateCreatedGmt: String

  """The date and time that the entry was created in local time."""
  dateUpdated: String

  """The date and time that the entry was updated in GMT."""
  dateUpdatedGmt: String

  """The form object of the node."""
  form: GfForm

  """The database identifier of the form of the node."""
  formDatabaseId: Int

  """The form fields associated with the entry."""
  formFields(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: GfEntryToFormFieldConnectionWhereArgs
  ): GfEntryToFormFieldConnection

  """The globally unique identifier of the form of the node."""
  formId: ID

  """The globally unique ID for the object"""
  id: ID!

  """Client IP of user who submitted the form."""
  ip: String

  """Whether the entry is a draft."""
  isDraft: Boolean

  """Whether the entry has been submitted."""
  isSubmitted: Boolean

  """The entry order summary. Null if the entry has no pricing fields"""
  orderSummary: GfOrderSummary

  """Source URL of page that contained the form when it was submitted."""
  sourceUrl: String

  """
  Provides the name and version of both the browser and operating system from which the entry was submitted.
  """
  userAgent: String
}

"""Connection to GfEntry Nodes"""
interface GfEntryConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected GfEntry Nodes
  """
  edges: [GfEntryConnectionEdge!]!

  """A list of connected GfEntry Nodes"""
  nodes: [GfEntry!]!

  """Information about pagination in a connection."""
  pageInfo: GfEntryConnectionPageInfo!
}

"""Edge between a Node and a connected GfEntry"""
interface GfEntryConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The connected GfEntry Node"""
  node: GfEntry!
}

"""Page Info on the connected GfEntryConnectionEdge"""
interface GfEntryConnectionPageInfo implements PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Connection between the GfEntry type and the FormField type"""
type GfEntryToFormFieldConnection implements Connection & FormFieldConnection {
  """Edges for the GfEntryToFormFieldConnection connection"""
  edges: [GfEntryToFormFieldConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [FormField!]!

  """Information about pagination in a connection."""
  pageInfo: GfEntryToFormFieldConnectionPageInfo!
}

"""An edge in a connection"""
type GfEntryToFormFieldConnectionEdge implements Edge & FormFieldConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: FormField!
}

"""Page Info on the &quot;GfEntryToFormFieldConnection&quot;"""
type GfEntryToFormFieldConnectionPageInfo implements FormFieldConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the GfEntryToFormFieldConnection connection"""
input GfEntryToFormFieldConnectionWhereArgs {
  """Array of form field adminLabels to return."""
  adminLabels: [String]

  """Array of Gravity Forms Field types to return."""
  fieldTypes: [FormFieldTypeEnum]

  """Array of form field IDs to return."""
  ids: [ID]

  """The form page number to return."""
  pageNumber: Int
}

"""Gravity Forms field choice."""
interface GfFieldChoice {
  """The text to be displayed to the user when displaying this choice."""
  text: String

  """
  The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
  """
  value: String
}

"""A Choice for a form field with the `choices_setting` setting."""
interface GfFieldChoiceWithChoicesSetting implements GfFieldChoice {
  """
  Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
  """
  isSelected: Boolean

  """The text to be displayed to the user when displaying this choice."""
  text: String

  """
  The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
  """
  value: String
}

"""A Choice for a form field with the `columns_setting` setting."""
interface GfFieldChoiceWithColumnsSetting implements GfFieldChoice {
  """The text to be displayed to the user when displaying this choice."""
  text: String

  """
  The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
  """
  value: String
}

"""A Choice for a form field with the `name_setting` setting."""
interface GfFieldChoiceWithNameSetting implements GfFieldChoice {
  """
  Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
  """
  isSelected: Boolean

  """The text to be displayed to the user when displaying this choice."""
  text: String

  """
  The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
  """
  value: String
}

"""A Choice for a form field with the `other_choice_setting` setting."""
interface GfFieldChoiceWithOtherChoiceSetting implements GfFieldChoice {
  """Indicates the radio button item is the “Other” choice."""
  isOtherChoice: Boolean

  """The text to be displayed to the user when displaying this choice."""
  text: String

  """
  The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
  """
  value: String
}

"""Gravity Forms field input."""
interface GfFieldInput {
  """
  The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field.
  """
  id: Float

  """The label to be used for the input."""
  label: String
}

"""An Input for a form field with the `address_setting` setting."""
interface GfFieldInputWithAddressSetting {
  """The autocomplete attribute for the field."""
  autocompleteAttribute: String

  """
  The custom label for the input. When set, this is used in place of the label.
  """
  customLabel: String

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Whether or not this field should be hidden."""
  isHidden: Boolean

  """Key used to identify this input."""
  key: String

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  name: String

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String
}

"""An Input for a form field with the `date_format_setting` setting."""
interface GfFieldInputWithDateFormatSetting {
  """The autocomplete attribute for the field."""
  autocompleteAttribute: String

  """
  The custom label for the input. When set, this is used in place of the label.
  """
  customLabel: String

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String
}

"""An Input for a form field with the `email_confirm_setting` setting."""
interface GfFieldInputWithEmailConfirmationSetting {
  """The autocomplete attribute for the field."""
  autocompleteAttribute: String

  """
  The custom label for the input. When set, this is used in place of the label.
  """
  customLabel: String

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  name: String

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String
}

"""An Input for a form field with the `name_setting` setting."""
interface GfFieldInputWithNameSetting {
  """The autocomplete attribute for the field."""
  autocompleteAttribute: String

  """
  The custom label for the input. When set, this is used in place of the label.
  """
  customLabel: String

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """
  Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
  """
  hasChoiceValue: Boolean

  """Whether or not this field should be hidden."""
  isHidden: Boolean

  """Key used to identify this input."""
  key: String

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  name: String

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String
}

"""An Input for a form field with the `password_setting` setting."""
interface GfFieldInputWithPasswordSetting {
  """
  The custom label for the input. When set, this is used in place of the label.
  """
  customLabel: String

  """Whether or not this field should be hidden."""
  isHidden: Boolean

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String
}

"""
An Input for a form field with the `select_all_choices_setting` setting.
"""
interface GfFieldInputWithSelectAllChoicesSetting {
  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  name: String
}

"""An Input for a form field with the `single_product_inputs` setting."""
interface GfFieldInputWithSingleProductInputs {
  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  name: String
}

"""An Input for a form field with the `time_format_setting` setting."""
interface GfFieldInputWithTimeFormatSetting {
  """The autocomplete attribute for the field."""
  autocompleteAttribute: String

  """
  The custom label for the input. When set, this is used in place of the label.
  """
  customLabel: String

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String
}

"""Gravity Forms field value with connected choice."""
interface GfFieldValueWithChoice {
  """The selected Gravity Forms field choice object."""
  connectedChoice: GfFieldChoice
}

"""Gravity Forms field value with connected input."""
interface GfFieldValueWithInput {
  """The selected Gravity Forms field input object."""
  connectedInput: GfFieldInput
}

"""A form field with the `add_icon_url_setting` setting."""
interface GfFieldWithAddIconUrlSetting {
  """The URL of the image to be used for the add row button."""
  addIconUrl: String
}

"""A form field with the `address_setting` setting."""
interface GfFieldWithAddressSetting implements GfFieldWithInputs {
  """Determines the type of address to be displayed."""
  addressType: AddressFieldTypeEnum

  """
  Contains the country that will be selected by default. Only applicable when &quot;addressType&quot; is set to &quot;INTERATIONAL&quot;.
  """
  defaultCountry: AddressFieldCountryEnum

  """
  Contains the province that will be selected by default. Only applicable when &quot;addressType&quot; is set to &quot;CANADA&quot;.
  """
  defaultProvince: AddressFieldProvinceEnum

  """
  Contains the state that will be selected by default. Only applicable when &quot;addressType&quot; is set to &quot;US&quot;.
  """
  defaultState: AddressFieldProvinceEnum

  """The inputs for the field."""
  inputs: [GfFieldInput]
}

"""A form field with the `admin_label_setting` setting."""
interface GfFieldWithAdminLabelSetting {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String
}

"""A form field with the `autocomplete_setting` setting."""
interface GfFieldWithAutocompleteSetting {
  """Whether autocomplete should be enabled for this field."""
  hasAutocomplete: Boolean
}

"""A form field with the `base_price_setting` setting."""
interface GfFieldWithBasePriceSetting {
  """The price of the product, prefixed by the currency."""
  formattedPrice: String

  """The price of the product."""
  price: Float
}

"""A form field with the `calculation_setting` setting."""
interface GfFieldWithCalculationSetting {
  """The formula used for the number field."""
  calculationFormula: String

  """
  Specifies to how many decimal places the number should be rounded. This is available when `isCalculation` is true, but will return null if the number format is `CURRENCY` or if the calculation is set to `Do not round`.
  """
  calculationRounding: Int

  """Indicates whether the number field is a calculation."""
  isCalculation: Boolean
}

"""A form field with the `captcha_bg_setting` setting."""
interface GfFieldWithCaptchaBackgroundSetting {
  """
  Determines the image’s background color, in HEX format (i.e. #CCCCCC). Only applicable to simple_captcha and math captcha types.
  """
  simpleCaptchaBackgroundColor: String
}

"""A form field with the `captcha_badge_setting` setting."""
interface GfFieldWithCaptchaBadgeSetting {
  """
  The language used when the captcha is displayed. This property is available when the captchaType is “captcha”, the default. The possible values are the language codes used by WordPress.
  """
  captchaBadgePosition: CaptchaFieldBadgePositionEnum
}

"""A form field with the `captcha_fg_setting` setting."""
interface GfFieldWithCaptchaForegroundSetting {
  """
  Determines the image’s font color, in HEX format (i.e. #CCCCCC). Only applicable to simple_captcha and math captcha types.
  """
  simpleCaptchaFontColor: String
}

"""A form field with the `captcha_language_setting` setting."""
interface GfFieldWithCaptchaLanguageSetting {
  """
  The language used when the captcha is displayed. This property is available when the captchaType is “captcha”, the default. The possible values are the language codes used by WordPress.
  """
  captchaLanguage: String
}

"""A form field with the `captcha_size_setting` setting."""
interface GfFieldWithCaptchaSizeSetting {
  """
  Determines the CAPTCHA image size. Only applicable to simple_captcha and math captcha types.
  """
  simpleCaptchaSize: FormFieldSizeEnum
}

"""A form field with the `captcha_theme_setting` setting."""
interface GfFieldWithCaptchaThemeSetting {
  """
  Determines the theme to be used for the reCAPTCHA field. Only applicable to the recaptcha captcha type.
  """
  captchaTheme: CaptchaFieldThemeEnum
}

"""A form field with the `captcha_type_setting` setting."""
interface GfFieldWithCaptchaTypeSetting {
  """Determines the type of CAPTCHA field to be used."""
  captchaType: CaptchaFieldTypeEnum
}

"""A form field with the `checkbox_label_setting` setting."""
interface GfFieldWithCheckboxLabelSetting {
  """Text of the consent checkbox."""
  checkboxLabel: String
}

"""A Gravity Forms field with possible field choices."""
interface GfFieldWithChoices {
  """The choices for the field."""
  choices: [GfFieldChoice]
}

"""A form field with the `choices_setting` setting."""
interface GfFieldWithChoicesSetting implements GfFieldWithChoices & GfFieldWithInputs {
  """The choices for the field."""
  choices: [GfFieldChoice]

  """
  Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
  """
  hasChoiceValue: Boolean

  """The inputs for the field."""
  inputs: [GfFieldInput]
}

"""A form field with the `columns_setting` setting."""
interface GfFieldWithColumnsSetting implements GfFieldWithChoices {
  """The choices for the field."""
  choices: [GfFieldChoice]

  """Determines if the field should use multiple columns. Default is false."""
  hasColumns: Boolean
}

"""A form field with the `conditional_logic_setting` setting."""
interface GfFieldWithConditionalLogicSetting {
  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic
}

"""A form field with the `content_setting` setting."""
interface GfFieldWithContentSetting {
  """Content of an HTML block field to be displayed on the form."""
  content: String
}

"""A form field with the `copy_values_option` setting."""
interface GfFieldWithCopyValuesOptionSetting {
  """The field id of the field being used as the copy source."""
  copyValuesOptionFieldId: Int

  """
  The label that appears next to the copy values option when the form is displayed. The default value is \“Same as previous\”.
  """
  copyValuesOptionLabel: String

  """
  Indicates whether the copy values option can be used. This option allows users to skip filling out the field and use the same values as another. For example, if the mailing and billing address are the same.
  """
  shouldCopyValuesOption: Boolean
}

"""A form field with the `css_class_setting` setting."""
interface GfFieldWithCssClassSetting {
  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String
}

"""A form field with the `date_format_setting` setting."""
interface GfFieldWithDateFormatSetting implements GfFieldWithInputs {
  """Determines how the date is displayed."""
  dateFormat: DateFieldFormatEnum

  """The inputs for the field."""
  inputs: [GfFieldInput]
}

"""A form field with the `date_input_type_setting` setting."""
interface GfFieldWithDateInputTypeSetting {
  """Determines how the date field displays it’s calendar icon."""
  calendarIconType: FormFieldCalendarIconTypeEnum

  """
  Contains the URL to the custom calendar icon. Only applicable when calendarIconType is set to custom.
  """
  calendarIconUrl: String

  """The type of date field to display."""
  dateType: DateFieldTypeEnum
}

"""A form field with the `default_value_setting` setting."""
interface GfFieldWithDefaultValueSetting {
  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String
}

"""A form field with the `delete_icon_url_setting` setting."""
interface GfFieldWithDeleteIconUrlSetting {
  """The URL of the image to be used for the delete row button."""
  deleteIconUrl: String
}

"""A form field with the `description_setting` setting."""
interface GfFieldWithDescriptionSetting {
  """Field description."""
  description: String
}

"""A form field with the `disable_margins_setting` setting."""
interface GfFieldWithDisableMarginsSetting {
  """
  Indicates whether the default margins are turned on to align the HTML content with other fields.
  """
  hasMargins: Boolean
}

"""A form field with the `disable_quantity_setting` setting."""
interface GfFieldWithDisableQuantitySetting {
  """Whether the field has the quantity property enabled."""
  hasQuantity: Boolean
}

"""A form field with the `duplicate_setting` setting."""
interface GfFieldWithDuplicatesSetting {
  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean
}

"""A form field with the `enable_enhanced_ui_setting` setting."""
interface GfFieldWithEnhancedUISetting {
  """
  When set to true, the &quot;Chosen&quot; jQuery script will be applied to this field, enabling search capabilities to Drop Down fields and a more user-friendly interface for Multi Select fields.
  """
  hasEnhancedUI: Boolean
}

"""A form field with the `error_message_setting` setting."""
interface GfFieldWithErrorMessageSetting {
  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String
}

"""A form field with the `file_extensions_setting` setting."""
interface GfFieldWithFileExtensionsSetting {
  """A comma-delimited list of the file extensions which may be uploaded."""
  allowedExtensions: [String]
}

"""A form field with the `file_size_setting` setting."""
interface GfFieldWithFileSizeSetting {
  """The maximum size (in MB) an uploaded file may be ."""
  maxFileSize: Int
}

"""A form field with the `input_mask_setting` setting."""
interface GfFieldWithInputMaskSetting {
  """Whether the field has an input mask."""
  hasInputMask: Boolean

  """The pattern used for the input mask."""
  inputMaskValue: String
}

"""A Gravity Forms field with possible field inputs."""
interface GfFieldWithInputs {
  """The inputs for the field."""
  inputs: [GfFieldInput]
}

"""A form field with the `label_placement_setting` setting."""
interface GfFieldWithLabelPlacementSetting {
  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum
}

"""A form field with the `label_setting` setting."""
interface GfFieldWithLabelSetting {
  """Field label that will be displayed on the form and on the admin pages."""
  label: String
}

"""A form field with the `maxlen_setting` setting."""
interface GfFieldWithMaxLengthSetting {
  """
  Specifies the maximum number of characters allowed in a text or textarea (paragraph) field.
  """
  maxLength: Int
}

"""A form field with the `maxrows_setting` setting."""
interface GfFieldWithMaxRowsSetting {
  """The maximum number of rows the user can add to the field."""
  maxRows: Int
}

"""A form field with the `multiple_files_setting` setting."""
interface GfFieldWithMultipleFilesSetting {
  """Indicates whether multiple files may be uploaded."""
  canAcceptMultipleFiles: Boolean

  """
  When the field is set to allow multiple files to be uploaded, this property is available to set a limit on how many may be uploaded.
  """
  maxFiles: Int
}

"""A form field with the `name_setting` setting."""
interface GfFieldWithNameSetting implements GfFieldWithInputs {
  """The inputs for the field."""
  inputs: [GfFieldInput]
}

"""A form field with the `next_button_setting` setting."""
interface GfFieldWithNextButtonSetting {
  """
  An array containing the the individual properties for the &quot;Next&quot; button.
  """
  nextButton: FormButton
}

"""A form field with the `number_format_setting` setting."""
interface GfFieldWithNumberFormatSetting {
  """Specifies the format allowed for the number field."""
  numberFormat: NumberFieldFormatEnum
}

"""A form field with the `other_choice_setting` setting."""
interface GfFieldWithOtherChoiceSetting implements GfFieldWithChoices & GfFieldWithChoicesSetting & GfFieldWithInputs {
  """The choices for the field."""
  choices: [GfFieldChoice]

  """
  Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
  """
  hasChoiceValue: Boolean

  """
  Indicates whether the &#039;Enable &quot;other&quot; choice&#039; option is checked in the editor.
  """
  hasOtherChoice: Boolean

  """The inputs for the field."""
  inputs: [GfFieldInput]
}

"""A form field with the `password_field_setting` setting."""
interface GfFieldWithPasswordFieldSetting {
  """
  Determines if a text field input tag should be created with a &quot;password&quot; type.
  """
  isPasswordInput: Boolean
}

"""A form field with the `password_setting` setting."""
interface GfFieldWithPasswordSetting implements GfFieldWithInputs {
  """The inputs for the field."""
  inputs: [GfFieldInput]
}

"""A form field with the `password_strength_setting` setting."""
interface GfFieldWithPasswordStrengthSetting {
  """Indicates whether the field displays the password strength indicator."""
  hasPasswordStrengthIndicator: Boolean

  """Indicates how strong the password should be."""
  minPasswordStrength: PasswordFieldMinStrengthEnum
}

"""A form field with the `password_visibility_setting` setting."""
interface GfFieldWithPasswordVisibilitySetting {
  """
  Whether the Password visibility toggle should be enabled for this field.
  """
  hasPasswordVisibilityToggle: Boolean
}

"""
The form field-specifc policies for exporting and erasing personal data.
"""
interface GfFieldWithPersonalData {
  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy
}

"""A form field with the `phone_format_setting` setting."""
interface GfFieldWithPhoneFormatSetting {
  """
  Determines the allowed format for phones. If the phone value does not conform with the specified format, the field will fail validation.
  """
  phoneFormat: PhoneFieldFormatEnum
}

"""A form field with the `placeholder_setting` setting."""
interface GfFieldWithPlaceholderSetting {
  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String
}

"""A form field with the `post_category_checkbox_setting` setting."""
interface GfFieldWithPostCategoryCheckboxSetting {
  """
  Determines if all categories should be displayed on the Post Category drop down. If this property is true (display all categories), the Post Category drop down will display the categories hierarchically.
  """
  hasAllCategories: Boolean
}

"""A form field with the `post_category_initial_item_setting` setting."""
interface GfFieldWithPostCategoryInitialItemSetting {
  """The dropdown placeholder for the field."""
  dropdownPlaceholder: String
}

"""A form field with the `post_custom_field_setting` setting."""
interface GfFieldWithPostCustomFieldSetting {
  """The post meta key to which the value should be assigned."""
  postMetaFieldName: String
}

"""A form field with the `post_image_featured_image` setting."""
interface GfFieldWithPostImageFeaturedImageSetting {
  """
  Whether the image field should be used to set the post&#039;s Featured Image
  """
  isFeaturedImage: Boolean
}

"""A form field with the `post_image_setting` setting."""
interface GfFieldWithPostImageSetting implements GfFieldWithFileExtensionsSetting {
  """A comma-delimited list of the file extensions which may be uploaded."""
  allowedExtensions: [String]

  """Controls the visibility of the alt metadata for Post Image fields."""
  hasAlt: Boolean

  """Controls the visibility of the caption metadata for Post Image fields."""
  hasCaption: Boolean

  """
  Controls the visibility of the description metadata for Post Image fields.
  """
  hasDescription: Boolean

  """Controls the visibility of the title metadata for Post Image fields."""
  hasTitle: Boolean
}

"""A form field with the `prepopulate_field_setting` setting."""
interface GfFieldWithPrepopulateFieldSetting {
  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean
}

"""A form field with the `previous_button` setting."""
interface GfFieldWithPreviousButton {
  """
  An array containing the the individual properties for the &quot;Previous&quot; button.
  """
  previousButton: FormButton
}

"""A form field with the `product_field_setting` setting."""
interface GfFieldWithProductFieldSetting {
  """The product field to which the field is associated."""
  connectedProductField: ProductField

  """The id of the product field to which the field is associated."""
  productField: Int @deprecated(reason: "Use `connectedProductField` field instead.")
}

"""A form field with the `range_setting` setting."""
interface GfFieldWithRangeSetting {
  """
  Maximum allowed value for a number field. Values higher than the number specified by this property will cause the field to fail validation.
  """
  rangeMax: Float

  """
  Minimum allowed value for a number field. Values lower than the number specified by this property will cause the field to fail validation.
  """
  rangeMin: Float
}

"""A form field with the `rich_text_editor_setting` setting."""
interface GfFieldWithRichTextEditorSetting {
  """Indicates whether the field uses the rich text editor interface."""
  hasRichTextEditor: Boolean
}

"""A form field with the `rules_setting` setting."""
interface GfFieldWithRulesSetting {
  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean
}

"""A form field with the `select_all_choices_setting` setting."""
interface GfFieldWithSelectAllChoicesSetting implements GfFieldWithChoices & GfFieldWithInputs {
  """The choices for the field."""
  choices: [GfFieldChoice]

  """Whether the \&quot;select all\&quot; choice should be displayed."""
  hasSelectAll: Boolean

  """The inputs for the field."""
  inputs: [GfFieldInput]
}

"""A form field with the `single_product_inputs` setting."""
interface GfFieldWithSingleProductInputs implements GfFieldWithInputs {
  """The inputs for the field."""
  inputs: [GfFieldInput]
}

"""A form field with the `size_setting` setting."""
interface GfFieldWithSizeSetting {
  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum
}

"""A form field with the `sub_label_placement_setting` setting."""
interface GfFieldWithSubLabelPlacementSetting {
  """
  The placement of the labels for the subfields within the group. This setting controls all of the subfields, they cannot be set individually. They may be aligned above or below the inputs. If this property is not set, the “Sub-Label Placement” setting on the Form Settings-&gt;Form Layout page is used. If no setting is specified, the default is above inputs.
  """
  subLabelPlacement: FormFieldSubLabelPlacementEnum
}

"""A form field with the `time_format_setting` setting."""
interface GfFieldWithTimeFormatSetting implements GfFieldWithInputs {
  """The inputs for the field."""
  inputs: [GfFieldInput]

  """Determines how the time is displayed."""
  timeFormat: TimeFieldFormatEnum
}

"""Gravity Forms form."""
type GfForm implements DatabaseIdentifier & Node {
  """
  Contains the form confirmation settings such as confirmation text or redirect URL.
  """
  confirmations: [FormConfirmation]

  """
  String containing the custom CSS classes to be added to the &lt;form&gt; tag.
  """
  cssClass: String

  """The custom text to use to indicate a field is required."""
  customRequiredIndicator: String

  """The unique identifier stored in the database"""
  databaseId: Int!

  """The date and time that the entry was created in local time."""
  dateCreated: String

  """The date and time that the entry was created in GMT."""
  dateCreatedGmt: String

  """Form description."""
  description: String

  """
  Determines if the field description is displayed above the field input (i.e. immediately after the field label) or below the field input.
  """
  descriptionPlacement: FormDescriptionPlacementEnum

  """The entries submitted to the form."""
  entries(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: GfFormToGfEntryConnectionWhereArgs
  ): GfFormToGfEntryConnection

  """The entry limit settings."""
  entryLimits: FormEntryLimits

  """CSS class for the first page."""
  firstPageCssClass: String

  """The form fields associated with the form."""
  formFields(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: GfFormToFormFieldConnectionWhereArgs
  ): GfFormToFormFieldConnection

  """
  When enabled, conditional logic hide/show operation will be performed with a jQuery slide animation. Only applicable to forms with conditional logic.
  """
  hasConditionalLogicAnimation: Boolean

  """Specifies if the form has the Honeypot spam-protection feature."""
  hasHoneypot: Boolean

  """
  If enabled, will show a summary that lists form validation errors at the top of the form when a user attempts a failed submission.
  """
  hasValidationSummary: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """Determines whether the form is active."""
  isActive: Boolean

  """Determines whether the form is in the trash."""
  isTrash: Boolean

  """
  Determines where the field labels should be placed in relation to the field.
  """
  labelPlacement: FormLabelPlacementEnum

  """Login requirements data."""
  login: FormLogin

  """The Gravity Forms markup version."""
  markupVersion: Int

  """The ID to assign to the next field that is added to the form."""
  nextFieldId: Int

  """The properties for all the email notifications which exist for a form."""
  notifications: [FormNotification]

  """Pagination data."""
  pagination: FormPagination

  """Personal data settings."""
  personalData: FormPersonalData

  """Post creation data."""
  postCreation: FormPostCreation

  """Type of indicator to use when field is required."""
  requiredIndicator: FormFieldRequiredIndicatorEnum

  """\&quot;Save and Continue\&quot; data."""
  saveAndContinue: FormSaveAndContinue

  """Form scheduling data."""
  scheduling: FormSchedule

  """How sub-labels are aligned."""
  subLabelPlacement: FormSubLabelPlacementEnum

  """
  Contains the form button settings such as the button text or image button source.
  """
  submitButton: FormSubmitButton

  """Form title."""
  title: String

  """The version of Gravity Forms used to create this form."""
  version: String
}

"""Connection to GfForm Nodes"""
interface GfFormConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected GfForm Nodes
  """
  edges: [GfFormConnectionEdge!]!

  """A list of connected GfForm Nodes"""
  nodes: [GfForm!]!

  """Information about pagination in a connection."""
  pageInfo: GfFormConnectionPageInfo!
}

"""Edge between a Node and a connected GfForm"""
interface GfFormConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The connected GfForm Node"""
  node: GfForm!
}

"""Page Info on the connected GfFormConnectionEdge"""
interface GfFormConnectionPageInfo implements PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Connection between the GfForm type and the FormField type"""
type GfFormToFormFieldConnection implements Connection & FormFieldConnection {
  """Edges for the GfFormToFormFieldConnection connection"""
  edges: [GfFormToFormFieldConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [FormField!]!

  """Information about pagination in a connection."""
  pageInfo: GfFormToFormFieldConnectionPageInfo!
}

"""An edge in a connection"""
type GfFormToFormFieldConnectionEdge implements Edge & FormFieldConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: FormField!
}

"""Page Info on the &quot;GfFormToFormFieldConnection&quot;"""
type GfFormToFormFieldConnectionPageInfo implements FormFieldConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the GfFormToFormFieldConnection connection"""
input GfFormToFormFieldConnectionWhereArgs {
  """Array of form field adminLabels to return."""
  adminLabels: [String]

  """Array of Gravity Forms Field types to return."""
  fieldTypes: [FormFieldTypeEnum]

  """Array of form field IDs to return."""
  ids: [ID]

  """The form page number to return."""
  pageNumber: Int
}

"""Connection between the GfForm type and the GfEntry type"""
type GfFormToGfEntryConnection implements Connection & GfEntryConnection {
  """The number of (filtered) entries submitted to the form."""
  count: Int

  """Edges for the GfFormToGfEntryConnection connection"""
  edges: [GfFormToGfEntryConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [GfEntry!]!

  """Information about pagination in a connection."""
  pageInfo: GfFormToGfEntryConnectionPageInfo!
}

"""An edge in a connection"""
type GfFormToGfEntryConnectionEdge implements Edge & GfEntryConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: GfEntry!
}

"""Page Info on the &quot;GfFormToGfEntryConnection&quot;"""
type GfFormToGfEntryConnectionPageInfo implements GfEntryConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the GfFormToGfEntryConnection connection"""
input GfFormToGfEntryConnectionWhereArgs {
  """Date filters to apply."""
  dateFilters: EntriesDateFiltersInput

  """Field-specific filters to apply."""
  fieldFilters: [EntriesFieldFiltersInput]

  """Whether to filter by ALL or ANY of the field filters. Default is ALL."""
  fieldFiltersMode: FieldFiltersModeEnum

  """How to sort the entries."""
  orderby: EntriesConnectionOrderbyInput

  """Entry status. Default is "ACTIVE"."""
  status: EntryStatusEnum
}

"""A form field with the `email_confirm_setting` setting."""
interface GfGfFieldWithEmailConfirmationSetting implements GfFieldWithInputs & GfFieldWithSubLabelPlacementSetting {
  """Determines whether the Confirm Email field is active."""
  hasEmailConfirmation: Boolean

  """The inputs for the field."""
  inputs: [GfFieldInput]

  """
  The placement of the labels for the subfields within the group. This setting controls all of the subfields, they cannot be set individually. They may be aligned above or below the inputs. If this property is not set, the “Sub-Label Placement” setting on the Form Settings-&gt;Form Layout page is used. If no setting is specified, the default is above inputs.
  """
  subLabelPlacement: FormFieldSubLabelPlacementEnum
}

"""Gravity Forms Logging Settings."""
type GfLogger {
  """Whether the logger is enabled."""
  isEnabled: Boolean

  """The name of the Gravity Forms logger."""
  name: String
}

"""The entry order item."""
type GfOrderItem {
  """The form field that the order item is connected to"""
  connectedFormField: FormField

  """The currency used for the order item"""
  currency: GfCurrencyEnum

  """The item description"""
  description: String

  """Whether this is a discount item"""
  isDiscount: Boolean

  """Whether this is a line item"""
  isLineItem: Boolean

  """Whether this is a recurring item"""
  isRecurring: Boolean

  """Whether this is a setup fee"""
  isSetupFee: Boolean

  """Whether this is a shipping fee"""
  isShipping: Boolean

  """Whether this is a trial item"""
  isTrial: Boolean

  """The item name"""
  name: String

  """The item options"""
  options: [GfOrderItemOption]

  """The item price"""
  price: Float

  """The item quantity"""
  quantity: Float

  """The section this order item belongs to."""
  section: String

  """The item subtotal"""
  subtotal: Float
}

"""An option on an Order item."""
type GfOrderItemOption {
  """The form field that the order item is connected to"""
  connectedFormField: FormField

  """The option&#039;s field label."""
  fieldLabel: String

  """The option name."""
  name: String

  """The option label."""
  optionLabel: String

  """The option price."""
  price: Float
}

"""The entry order information."""
type GfOrderSummary {
  """The currency used for the order"""
  currency: GfCurrencyEnum

  """The order item details."""
  items: [GfOrderItem]

  """The order subtotal."""
  subtotal: Float

  """The order total"""
  total: Float
}

"""Gravity Forms Settings."""
type GfSettings {
  """
  The default currency for your forms. Used for product, credit card, and other fields.
  """
  currency: GfCurrencyEnum

  """
  Whether Gravity Forms to download and install bug fixes and security updates automatically in the background. Requires a valid license key.
  """
  hasBackgroundUpdates: Boolean

  """Whether to output Gravity Forms&#039; default CSS."""
  hasDefaultCss: Boolean

  """
  Whether to display the forms menu in the WordPress top toolbar. The forms menu will display the ten forms recently opened in the form editor.
  """
  hasToolbar: Boolean

  """Whether the server-generated form markup uses HTML5."""
  isHtml5Enabled: Boolean

  """
  Enable to prevent extraneous scripts and styles from being printed on a Gravity Forms admin pages, reducing conflicts with other plugins and themes.
  """
  isNoConflictModeEnabled: Boolean

  """Logging settings."""
  logging: GfSettingsLogging

  """Recaptcha settings."""
  recaptcha: GfSettingsRecaptcha
}

"""Gravity Forms Logging Settings."""
type GfSettingsLogging {
  """
  Whether Gravity Forms internal logging is enabled. Logging allows you to easily debug the inner workings of Gravity Forms to solve any possible issues.
  """
  isLoggingEnabled: Boolean

  """A list of registered Gravity Forms loggers and their configurations."""
  loggers: [GfLogger]
}

"""Gravity Forms reCAPTCHA Settings."""
type GfSettingsRecaptcha {
  """The public reCAPTCHA site key."""
  publicKey: String

  """The type of of reCAPTCHA v2 to be used"""
  type: RecaptchaTypeEnum
}

"""A Gravity Forms submitted entry."""
type GfSubmittedEntry implements DatabaseIdentifier & GfEntry & Node & NodeWithForm {
  """The user who created the entry."""
  createdBy: User

  """
  Database ID of the user that submitted of the form if a logged in user submitted the form.
  """
  createdByDatabaseId: Int

  """
  Global ID of the user that submitted of the form if a logged in user submitted the form.
  """
  createdById: ID

  """The unique identifier stored in the database"""
  databaseId: Int!

  """The date and time that the entry was created in local time."""
  dateCreated: String

  """The date and time that the entry was created in GMT."""
  dateCreatedGmt: String

  """The date and time that the entry was created in local time."""
  dateUpdated: String

  """The date and time that the entry was updated in GMT."""
  dateUpdatedGmt: String

  """The form object of the node."""
  form: GfForm

  """The database identifier of the form of the node."""
  formDatabaseId: Int

  """The form fields associated with the entry."""
  formFields(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: GfEntryToFormFieldConnectionWhereArgs
  ): GfEntryToFormFieldConnection

  """The globally unique identifier of the form of the node."""
  formId: ID

  """The globally unique ID for the object"""
  id: ID!

  """Client IP of user who submitted the form."""
  ip: String

  """Whether the entry is a draft."""
  isDraft: Boolean

  """Whether the entry has been read."""
  isRead: Boolean

  """Indicates if the entry has been starred (i.e marked with a star)."""
  isStarred: Boolean

  """Whether the entry has been submitted."""
  isSubmitted: Boolean

  """The entry order summary. Null if the entry has no pricing fields"""
  orderSummary: GfOrderSummary

  """For forms with Post fields, this is the post object that was created."""
  post: Post

  """
  For forms with Post fields, this property contains the Id of the Post that was created.
  """
  postDatabaseId: Int

  """Source URL of page that contained the form when it was submitted."""
  sourceUrl: String

  """The current status of the entry."""
  status: EntryStatusEnum

  """
  Provides the name and version of both the browser and operating system from which the entry was submitted.
  """
  userAgent: String
}

"""Connection to GfSubmittedEntry Nodes"""
interface GfSubmittedEntryConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected GfSubmittedEntry Nodes
  """
  edges: [GfSubmittedEntryConnectionEdge!]!

  """A list of connected GfSubmittedEntry Nodes"""
  nodes: [GfSubmittedEntry!]!

  """Information about pagination in a connection."""
  pageInfo: GfSubmittedEntryConnectionPageInfo!
}

"""Edge between a Node and a connected GfSubmittedEntry"""
interface GfSubmittedEntryConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The connected GfSubmittedEntry Node"""
  node: GfSubmittedEntry!
}

"""Page Info on the connected GfSubmittedEntryConnectionEdge"""
interface GfSubmittedEntryConnectionPageInfo implements PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""A Gravity Forms hidden field."""
type HiddenField implements FormField & GfFieldWithDefaultValueSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPrepopulateFieldSetting & Node {
  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""Content node with hierarchical (parent/child) relationships"""
interface HierarchicalContentNode implements ContentNode & DatabaseIdentifier & HierarchicalNode & Node & UniformResourceIdentifiable {
  """
  Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
  """
  ancestors(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs
  ): HierarchicalContentNodeToContentNodeAncestorsConnection

  """
  Connection between the HierarchicalContentNode type and the ContentNode type
  """
  children(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs
  ): HierarchicalContentNodeToContentNodeChildrenConnection

  """Connection between the ContentNode type and the ContentType type"""
  contentType: ContentNodeToContentTypeConnectionEdge

  """The name of the Content Type the node belongs to"""
  contentTypeName: String!

  """The unique identifier stored in the database"""
  databaseId: Int!

  """Post publishing date."""
  date: String

  """The publishing date set in GMT."""
  dateGmt: String

  """The desired slug of the post"""
  desiredSlug: String

  """
  If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds
  """
  editingLockedBy: ContentNodeToEditLockConnectionEdge

  """The RSS enclosure for the object"""
  enclosure: String

  """Connection between the ContentNode type and the EnqueuedScript type"""
  enqueuedScripts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): ContentNodeToEnqueuedScriptConnection

  """
  Connection between the ContentNode type and the EnqueuedStylesheet type
  """
  enqueuedStylesheets(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection

  """
  The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
  """
  guid: String

  """The globally unique ID for the object"""
  id: ID!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the object is a node in the preview state"""
  isPreview: Boolean

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The user that most recently edited the node"""
  lastEditedBy: ContentNodeToEditLastConnectionEdge

  """The permalink of the post"""
  link: String

  """
  The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
  """
  modified: String

  """
  The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
  """
  modifiedGmt: String

  """The parent of the node. The parent object can be of various types"""
  parent: HierarchicalContentNodeToParentContentNodeConnectionEdge

  """Database id of the parent node"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent node."""
  parentId: ID

  """The database id of the preview node"""
  previewRevisionDatabaseId: Int

  """Whether the object is a node in the preview state"""
  previewRevisionId: ID

  """The Yoast SEO data of the ContentNode"""
  seo: PostTypeSEO

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
  """
  slug: String

  """The current status of the object"""
  status: String

  """The template assigned to a node of content"""
  template: ContentTemplate

  """The unique resource identifier path"""
  uri: String
}

"""
Connection between the HierarchicalContentNode type and the ContentNode type
"""
type HierarchicalContentNodeToContentNodeAncestorsConnection implements Connection & ContentNodeConnection {
  """
  Edges for the HierarchicalContentNodeToContentNodeAncestorsConnection connection
  """
  edges: [HierarchicalContentNodeToContentNodeAncestorsConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [ContentNode!]!

  """Information about pagination in a connection."""
  pageInfo: HierarchicalContentNodeToContentNodeAncestorsConnectionPageInfo!
}

"""An edge in a connection"""
type HierarchicalContentNodeToContentNodeAncestorsConnectionEdge implements ContentNodeConnectionEdge & Edge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: ContentNode!
}

"""
Page Info on the &quot;HierarchicalContentNodeToContentNodeAncestorsConnection&quot;
"""
type HierarchicalContentNodeToContentNodeAncestorsConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""
Arguments for filtering the HierarchicalContentNodeToContentNodeAncestorsConnection connection
"""
input HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs {
  """The Types of content to filter"""
  contentTypes: [ContentTypeEnum]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific database ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What parameter to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [PostStatusEnum]

  """Show posts with a specific status."""
  status: PostStatusEnum

  """Title of the object"""
  title: String
}

"""
Connection between the HierarchicalContentNode type and the ContentNode type
"""
type HierarchicalContentNodeToContentNodeChildrenConnection implements Connection & ContentNodeConnection {
  """
  Edges for the HierarchicalContentNodeToContentNodeChildrenConnection connection
  """
  edges: [HierarchicalContentNodeToContentNodeChildrenConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [ContentNode!]!

  """Information about pagination in a connection."""
  pageInfo: HierarchicalContentNodeToContentNodeChildrenConnectionPageInfo!
}

"""An edge in a connection"""
type HierarchicalContentNodeToContentNodeChildrenConnectionEdge implements ContentNodeConnectionEdge & Edge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: ContentNode!
}

"""
Page Info on the &quot;HierarchicalContentNodeToContentNodeChildrenConnection&quot;
"""
type HierarchicalContentNodeToContentNodeChildrenConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""
Arguments for filtering the HierarchicalContentNodeToContentNodeChildrenConnection connection
"""
input HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs {
  """The Types of content to filter"""
  contentTypes: [ContentTypeEnum]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific database ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What parameter to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [PostStatusEnum]

  """Show posts with a specific status."""
  status: PostStatusEnum

  """Title of the object"""
  title: String
}

"""
Connection between the HierarchicalContentNode type and the ContentNode type
"""
type HierarchicalContentNodeToParentContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge & OneToOneConnection {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The node of the connection, without the edges"""
  node: ContentNode!
}

"""Node with hierarchical (parent/child) relationships"""
interface HierarchicalNode implements DatabaseIdentifier & Node {
  """The unique identifier stored in the database"""
  databaseId: Int!

  """The globally unique ID for the object"""
  id: ID!

  """Database id of the parent node"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent node."""
  parentId: ID
}

"""Term node with hierarchical (parent/child) relationships"""
interface HierarchicalTermNode implements DatabaseIdentifier & HierarchicalNode & Node & TermNode & UniformResourceIdentifiable {
  """The number of objects connected to the object"""
  count: Int

  """The unique identifier stored in the database"""
  databaseId: Int!

  """The description of the object"""
  description: String

  """Connection between the TermNode type and the EnqueuedScript type"""
  enqueuedScripts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): TermNodeToEnqueuedScriptConnection

  """Connection between the TermNode type and the EnqueuedStylesheet type"""
  enqueuedStylesheets(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): TermNodeToEnqueuedStylesheetConnection

  """The globally unique ID for the object"""
  id: ID!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The link to the term"""
  link: String

  """The human friendly name of the object."""
  name: String

  """Database id of the parent node"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent node."""
  parentId: ID

  """An alphanumeric identifier for the object unique to its type."""
  slug: String

  """The name of the taxonomy that the object is associated with"""
  taxonomyName: String

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int

  """The unique resource identifier path"""
  uri: String
}

"""A Gravity Forms html field."""
type HtmlField implements FormField & GfFieldWithConditionalLogicSetting & GfFieldWithContentSetting & GfFieldWithCssClassSetting & GfFieldWithDisableMarginsSetting & GfFieldWithLabelSetting & Node {
  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """Content of an HTML block field to be displayed on the form."""
  content: String

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Indicates whether the default margins are turned on to align the HTML content with other fields.
  """
  hasMargins: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""
The individual properties for each element of the PostImage value field.
"""
type ImageFieldValue {
  """The image alt text."""
  altText: String

  """The path to the parent directory of the file."""
  basePath: String

  """The base url to the parent directory of the file."""
  baseUrl: String

  """The image caption."""
  caption: String

  """The image description."""
  description: String

  """The filename."""
  filename: String

  """The image title."""
  title: String

  """The url to the file."""
  url: String
}

"""Input fields for a single post Image."""
input ImageInput {
  """The image alt text."""
  altText: String

  """The image caption."""
  caption: String

  """The image description."""
  description: String

  """The image to be uploaded."""
  image: Upload!

  """The image title."""
  title: String
}

"""A Gravity Forms list field."""
type ListField implements FormField & GfFieldWithAddIconUrlSetting & GfFieldWithAdminLabelSetting & GfFieldWithChoices & GfFieldWithColumnsSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDeleteIconUrlSetting & GfFieldWithDescriptionSetting & GfFieldWithErrorMessageSetting & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithMaxRowsSetting & GfFieldWithPersonalData & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & Node {
  """The URL of the image to be used for the add row button."""
  addIconUrl: String

  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """The choices for the field."""
  choices: [ListFieldChoice]

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """The URL of the image to be used for the delete row button."""
  deleteIconUrl: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """Determines if the field should use multiple columns. Default is false."""
  hasColumns: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """List field value."""
  listValues: [ListFieldValue]

  """The maximum number of rows the user can add to the field."""
  maxRows: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""ListFieldChoice choice values."""
type ListFieldChoice implements GfFieldChoice & GfFieldChoiceWithColumnsSetting {
  """The text to be displayed to the user when displaying this choice."""
  text: String

  """
  The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
  """
  value: String
}

"""Input fields for a single List field item."""
input ListFieldInput {
  """Input values for the specific listField row."""
  rowValues: [String]
}

"""The individual properties for each element of the List value field."""
type ListFieldValue {
  """Input values."""
  values: [String]
}

"""Input for the login mutation."""
input LoginInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The plain-text password for the user logging in."""
  password: String!

  """
  The username used for login. Typically a unique or email address depending on specific configuration
  """
  username: String!
}

"""The payload for the login mutation."""
type LoginPayload {
  """JWT Token that can be used in future requests for Authentication"""
  authToken: String

  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """
  A JWT token that can be used in future requests to get a refreshed jwtAuthToken. If the refresh token used in a request is revoked or otherwise invalid, a valid Auth token will NOT be issued in the response headers.
  """
  refreshToken: String

  """The user that was logged in"""
  user: User
}

"""File details for a Media Item"""
type MediaDetails {
  """The filename of the mediaItem"""
  file: String

  """The height of the mediaItem"""
  height: Int

  """Meta information associated with the mediaItem"""
  meta: MediaItemMeta

  """The available sizes of the mediaItem"""
  sizes(
    """The sizes to exclude. Will take precedence over `include`."""
    exclude: [MediaItemSizeEnum]

    """The sizes to include. Can be overridden by `exclude`."""
    include: [MediaItemSizeEnum]
  ): [MediaSize]

  """The width of the mediaItem"""
  width: Int
}

"""The mediaItem type"""
type MediaItem implements ContentNode & DatabaseIdentifier & HierarchicalContentNode & HierarchicalNode & Node & NodeWithAuthor & NodeWithComments & NodeWithTemplate & NodeWithTitle & UniformResourceIdentifiable {
  """Alternative text to display when resource is not displayed"""
  altText: String

  """
  Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
  """
  ancestors(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs
  ): HierarchicalContentNodeToContentNodeAncestorsConnection

  """Connection between the NodeWithAuthor type and the User type"""
  author: NodeWithAuthorToUserConnectionEdge

  """The database identifier of the author of the node"""
  authorDatabaseId: Int

  """The globally unique identifier of the author of the node"""
  authorId: ID

  """The caption for the resource"""
  caption(
    """Format of the field output"""
    format: PostObjectFieldFormatEnum
  ): String

  """
  Connection between the HierarchicalContentNode type and the ContentNode type
  """
  children(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs
  ): HierarchicalContentNodeToContentNodeChildrenConnection

  """
  The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int

  """Whether the comments are open or closed for this particular post."""
  commentStatus: String

  """Connection between the MediaItem type and the Comment type"""
  comments(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: MediaItemToCommentConnectionWhereArgs
  ): MediaItemToCommentConnection

  """Connection between the ContentNode type and the ContentType type"""
  contentType: ContentNodeToContentTypeConnectionEdge

  """The name of the Content Type the node belongs to"""
  contentTypeName: String!

  """The unique identifier stored in the database"""
  databaseId: Int!

  """Post publishing date."""
  date: String

  """The publishing date set in GMT."""
  dateGmt: String

  """Description of the image (stored as post_content)"""
  description(
    """Format of the field output"""
    format: PostObjectFieldFormatEnum
  ): String

  """The desired slug of the post"""
  desiredSlug: String

  """
  If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds
  """
  editingLockedBy: ContentNodeToEditLockConnectionEdge

  """The RSS enclosure for the object"""
  enclosure: String

  """Connection between the ContentNode type and the EnqueuedScript type"""
  enqueuedScripts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): ContentNodeToEnqueuedScriptConnection

  """
  Connection between the ContentNode type and the EnqueuedStylesheet type
  """
  enqueuedStylesheets(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection

  """The filesize in bytes of the resource"""
  fileSize(
    """Size of the MediaItem to return"""
    size: MediaItemSizeEnum
  ): Int

  """
  The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
  """
  guid: String

  """Whether the attachment object is password protected."""
  hasPassword: Boolean

  """The globally unique identifier of the attachment object."""
  id: ID!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the object is a node in the preview state"""
  isPreview: Boolean

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The user that most recently edited the node"""
  lastEditedBy: ContentNodeToEditLastConnectionEdge

  """The permalink of the post"""
  link: String

  """Details about the mediaItem"""
  mediaDetails: MediaDetails

  """The id field matches the WP_Post-&gt;ID field."""
  mediaItemId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")

  """Url of the mediaItem"""
  mediaItemUrl: String

  """Type of resource"""
  mediaType: String

  """The mime type of the mediaItem"""
  mimeType: String

  """
  The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
  """
  modified: String

  """
  The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
  """
  modifiedGmt: String

  """The parent of the node. The parent object can be of various types"""
  parent: HierarchicalContentNodeToParentContentNodeConnectionEdge

  """Database id of the parent node"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent node."""
  parentId: ID

  """The password for the attachment object."""
  password: String

  """The database id of the preview node"""
  previewRevisionDatabaseId: Int

  """Whether the object is a node in the preview state"""
  previewRevisionId: ID

  """The Yoast SEO data of the ContentNode"""
  seo: PostTypeSEO

  """The sizes attribute value for an image."""
  sizes(
    """Size of the MediaItem to calculate sizes with"""
    size: MediaItemSizeEnum
  ): String

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
  """
  slug: String

  """Url of the mediaItem"""
  sourceUrl(
    """Size of the MediaItem to return"""
    size: MediaItemSizeEnum
  ): String

  """
  The srcset attribute specifies the URL of the image to use in different situations. It is a comma separated string of urls and their widths.
  """
  srcSet(
    """Size of the MediaItem to calculate srcSet with"""
    size: MediaItemSizeEnum
  ): String

  """The current status of the object"""
  status: String

  """The template assigned to a node of content"""
  template: ContentTemplate

  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title(
    """Format of the field output"""
    format: PostObjectFieldFormatEnum
  ): String

  """The unique resource identifier path"""
  uri: String
}

"""Connection to mediaItem Nodes"""
interface MediaItemConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected mediaItem Nodes
  """
  edges: [MediaItemConnectionEdge!]!

  """A list of connected mediaItem Nodes"""
  nodes: [MediaItem!]!

  """Information about pagination in a connection."""
  pageInfo: MediaItemConnectionPageInfo!
}

"""Edge between a Node and a connected mediaItem"""
interface MediaItemConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The connected mediaItem Node"""
  node: MediaItem!
}

"""Page Info on the connected MediaItemConnectionEdge"""
interface MediaItemConnectionPageInfo implements PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""The Type of Identifier used to fetch a single resource. Default is ID."""
enum MediaItemIdType {
  """Identify a resource by the Database ID."""
  DATABASE_ID

  """Identify a resource by the (hashed) Global ID."""
  ID

  """
  Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier.
  """
  SLUG

  """Identify a media item by its source url"""
  SOURCE_URL

  """Identify a resource by the URI."""
  URI
}

"""Meta connected to a MediaItem"""
type MediaItemMeta {
  """Aperture measurement of the media item."""
  aperture: Float

  """Information about the camera used to create the media item."""
  camera: String

  """The text string description associated with the media item."""
  caption: String

  """Copyright information associated with the media item."""
  copyright: String

  """The date/time when the media was created."""
  createdTimestamp: Int

  """The original creator of the media item."""
  credit: String

  """The focal length value of the media item."""
  focalLength: Float

  """
  The ISO (International Organization for Standardization) value of the media item.
  """
  iso: Int

  """List of keywords used to describe or identfy the media item."""
  keywords: [String]

  """The vertical or horizontal aspect of the media item."""
  orientation: String

  """The shutter speed information of the media item."""
  shutterSpeed: Float

  """A useful title for the media item."""
  title: String
}

"""The size of the media item object."""
enum MediaItemSizeEnum {
  """MediaItem with the large size"""
  LARGE

  """MediaItem with the medium size"""
  MEDIUM

  """MediaItem with the medium_large size"""
  MEDIUM_LARGE

  """MediaItem with the thumbnail size"""
  THUMBNAIL

  """MediaItem with the 1536x1536 size"""
  _1536X1536

  """MediaItem with the 2048x2048 size"""
  _2048X2048
}

"""The status of the media item object."""
enum MediaItemStatusEnum {
  """Objects with the auto-draft status"""
  AUTO_DRAFT

  """Objects with the inherit status"""
  INHERIT

  """Objects with the private status"""
  PRIVATE

  """Objects with the trash status"""
  TRASH
}

"""Connection between the MediaItem type and the Comment type"""
type MediaItemToCommentConnection implements CommentConnection & Connection {
  """Edges for the MediaItemToCommentConnection connection"""
  edges: [MediaItemToCommentConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [Comment!]!

  """Information about pagination in a connection."""
  pageInfo: MediaItemToCommentConnectionPageInfo!
}

"""An edge in a connection"""
type MediaItemToCommentConnectionEdge implements CommentConnectionEdge & Edge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Comment!
}

"""Page Info on the &quot;MediaItemToCommentConnection&quot;"""
type MediaItemToCommentConnectionPageInfo implements CommentConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the MediaItemToCommentConnection connection"""
input MediaItemToCommentConnectionWhereArgs {
  """Comment author email address."""
  authorEmail: String

  """Array of author IDs to include comments for."""
  authorIn: [ID]

  """Array of author IDs to exclude comments for."""
  authorNotIn: [ID]

  """Comment author URL."""
  authorUrl: String

  """Array of comment IDs to include."""
  commentIn: [ID]

  """
  Array of IDs of users whose unapproved comments will be returned by the query regardless of status.
  """
  commentNotIn: [ID]

  """Include comments of a given type."""
  commentType: String

  """Include comments from a given array of comment types."""
  commentTypeIn: [String]

  """Exclude comments from a given array of comment types."""
  commentTypeNotIn: String

  """Content object author ID to limit results by."""
  contentAuthor: [ID]

  """Array of author IDs to retrieve comments for."""
  contentAuthorIn: [ID]

  """Array of author IDs *not* to retrieve comments for."""
  contentAuthorNotIn: [ID]

  """Limit results to those affiliated with a given content object ID."""
  contentId: ID

  """Array of content object IDs to include affiliated comments for."""
  contentIdIn: [ID]

  """Array of content object IDs to exclude affiliated comments for."""
  contentIdNotIn: [ID]

  """Content object name (i.e. slug ) to retrieve affiliated comments for."""
  contentName: String

  """Content Object parent ID to retrieve affiliated comments for."""
  contentParent: Int

  """
  Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentStatus: [PostStatusEnum]

  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [ContentTypeEnum]

  """
  Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]

  """Karma score to retrieve matching comments for."""
  karma: Int

  """The cardinality of the order of the connection"""
  order: OrderEnum

  """Field to order the comments by."""
  orderby: CommentsConnectionOrderbyEnum

  """Parent ID of comment to retrieve children of."""
  parent: Int

  """Array of parent IDs of comments to retrieve children for."""
  parentIn: [ID]

  """Array of parent IDs of comments *not* to retrieve children for."""
  parentNotIn: [ID]

  """Search term(s) to retrieve matching comments for."""
  search: String

  """Comment status to limit results by."""
  status: String

  """Include comments for a specific user ID."""
  userId: ID
}

"""Details of an available size for a media item"""
type MediaSize {
  """The filename of the referenced size"""
  file: String

  """The filesize of the resource"""
  fileSize: Int

  """The height of the referenced size"""
  height: String

  """The mime type of the referenced size"""
  mimeType: String

  """The referenced size name"""
  name: String

  """The url of the referenced size"""
  sourceUrl: String

  """The width of the referenced size"""
  width: String
}

"""
Menus are the containers for navigation items. Menus can be assigned to menu locations, which are typically registered by the active theme.
"""
type Menu implements DatabaseIdentifier & Node {
  """The number of items in the menu"""
  count: Int

  """The unique identifier stored in the database"""
  databaseId: Int!

  """The globally unique identifier of the nav menu object."""
  id: ID!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """The locations a menu is assigned to"""
  locations: [MenuLocationEnum]

  """WP ID of the nav menu."""
  menuId: Int @deprecated(reason: "Deprecated in favor of the databaseId field")

  """Connection between the Menu type and the MenuItem type"""
  menuItems(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: MenuToMenuItemConnectionWhereArgs
  ): MenuToMenuItemConnection

  """Display name of the menu. Equivalent to WP_Term-&gt;name."""
  name: String

  """The url friendly name of the menu. Equivalent to WP_Term-&gt;slug"""
  slug: String
}

"""Connection to Menu Nodes"""
interface MenuConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected Menu Nodes
  """
  edges: [MenuConnectionEdge!]!

  """A list of connected Menu Nodes"""
  nodes: [Menu!]!

  """Information about pagination in a connection."""
  pageInfo: MenuConnectionPageInfo!
}

"""Edge between a Node and a connected Menu"""
interface MenuConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The connected Menu Node"""
  node: Menu!
}

"""Page Info on the connected MenuConnectionEdge"""
interface MenuConnectionPageInfo implements PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""
Navigation menu items are the individual items assigned to a menu. These are rendered as the links in a navigation menu.
"""
type MenuItem implements DatabaseIdentifier & Node {
  """Connection between the MenuItem type and the MenuItem type"""
  childItems(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: MenuItemToMenuItemConnectionWhereArgs
  ): MenuItemToMenuItemConnection

  """Connection from MenuItem to it&#039;s connected node"""
  connectedNode: MenuItemToMenuItemLinkableConnectionEdge

  """The object connected to this menu item."""
  connectedObject: MenuItemObjectUnion @deprecated(reason: "Deprecated in favor of the connectedNode field")

  """Class attribute for the menu item link"""
  cssClasses: [String]

  """The unique identifier stored in the database"""
  databaseId: Int!

  """Description of the menu item."""
  description: String

  """The globally unique identifier of the nav menu item object."""
  id: ID!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """Label or title of the menu item."""
  label: String

  """Link relationship (XFN) of the menu item."""
  linkRelationship: String

  """The locations the menu item&#039;s Menu is assigned to"""
  locations: [MenuLocationEnum]

  """The Menu a MenuItem is part of"""
  menu: MenuItemToMenuConnectionEdge

  """WP ID of the menu item."""
  menuItemId: Int @deprecated(reason: "Deprecated in favor of the databaseId field")

  """Menu item order"""
  order: Int

  """The database id of the parent menu item or null if it is the root"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent nav menu item object."""
  parentId: ID

  """
  Path for the resource. Relative path for internal resources. Absolute path for external resources.
  """
  path: String

  """Target attribute for the menu item link."""
  target: String

  """Title attribute for the menu item link"""
  title: String

  """The uri of the resource the menu item links to"""
  uri: String

  """URL or destination of the menu item."""
  url: String
}

"""Connection to MenuItem Nodes"""
interface MenuItemConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected MenuItem Nodes
  """
  edges: [MenuItemConnectionEdge!]!

  """A list of connected MenuItem Nodes"""
  nodes: [MenuItem!]!

  """Information about pagination in a connection."""
  pageInfo: MenuItemConnectionPageInfo!
}

"""Edge between a Node and a connected MenuItem"""
interface MenuItemConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The connected MenuItem Node"""
  node: MenuItem!
}

"""Page Info on the connected MenuItemConnectionEdge"""
interface MenuItemConnectionPageInfo implements PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Nodes that can be linked to as Menu Items"""
interface MenuItemLinkable implements DatabaseIdentifier & Node & UniformResourceIdentifiable {
  """The unique identifier stored in the database"""
  databaseId: Int!

  """The globally unique ID for the object"""
  id: ID!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The unique resource identifier path"""
  uri: String
}

"""Edge between a Node and a connected MenuItemLinkable"""
interface MenuItemLinkableConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The connected MenuItemLinkable Node"""
  node: MenuItemLinkable!
}

"""
The Type of Identifier used to fetch a single node. Default is "ID". To be used along with the "id" field.
"""
enum MenuItemNodeIdTypeEnum {
  """Identify a resource by the Database ID."""
  DATABASE_ID

  """Identify a resource by the (hashed) Global ID."""
  ID
}

"""Deprecated in favor of MenuItemLinkeable Interface"""
union MenuItemObjectUnion = Category | Page | Post | Tag

"""Connection between the MenuItem type and the Menu type"""
type MenuItemToMenuConnectionEdge implements Edge & MenuConnectionEdge & OneToOneConnection {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The node of the connection, without the edges"""
  node: Menu!
}

"""Connection between the MenuItem type and the MenuItem type"""
type MenuItemToMenuItemConnection implements Connection & MenuItemConnection {
  """Edges for the MenuItemToMenuItemConnection connection"""
  edges: [MenuItemToMenuItemConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [MenuItem!]!

  """Information about pagination in a connection."""
  pageInfo: MenuItemToMenuItemConnectionPageInfo!
}

"""An edge in a connection"""
type MenuItemToMenuItemConnectionEdge implements Edge & MenuItemConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: MenuItem!
}

"""Page Info on the &quot;MenuItemToMenuItemConnection&quot;"""
type MenuItemToMenuItemConnectionPageInfo implements MenuItemConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the MenuItemToMenuItemConnection connection"""
input MenuItemToMenuItemConnectionWhereArgs {
  """The database ID of the object"""
  id: Int

  """The menu location for the menu being queried"""
  location: MenuLocationEnum

  """The database ID of the parent menu object"""
  parentDatabaseId: Int

  """The ID of the parent menu object"""
  parentId: ID
}

"""Connection between the MenuItem type and the MenuItemLinkable type"""
type MenuItemToMenuItemLinkableConnectionEdge implements Edge & MenuItemLinkableConnectionEdge & OneToOneConnection {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The node of the connection, without the edges"""
  node: MenuItemLinkable!
}

"""Registered menu locations"""
enum MenuLocationEnum {
  """Empty menu location"""
  EMPTY
}

"""
The Type of Identifier used to fetch a single node. Default is "ID". To be used along with the "id" field.
"""
enum MenuNodeIdTypeEnum {
  """Identify a menu node by the Database ID."""
  DATABASE_ID

  """Identify a menu node by the (hashed) Global ID."""
  ID

  """
  Identify a menu node by the slug of menu location to which it is assigned
  """
  LOCATION

  """Identify a menu node by its name"""
  NAME

  """Identify a menu node by its slug"""
  SLUG
}

"""Connection between the Menu type and the MenuItem type"""
type MenuToMenuItemConnection implements Connection & MenuItemConnection {
  """Edges for the MenuToMenuItemConnection connection"""
  edges: [MenuToMenuItemConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [MenuItem!]!

  """Information about pagination in a connection."""
  pageInfo: MenuToMenuItemConnectionPageInfo!
}

"""An edge in a connection"""
type MenuToMenuItemConnectionEdge implements Edge & MenuItemConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: MenuItem!
}

"""Page Info on the &quot;MenuToMenuItemConnection&quot;"""
type MenuToMenuItemConnectionPageInfo implements MenuItemConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the MenuToMenuItemConnection connection"""
input MenuToMenuItemConnectionWhereArgs {
  """The database ID of the object"""
  id: Int

  """The menu location for the menu being queried"""
  location: MenuLocationEnum

  """The database ID of the parent menu object"""
  parentDatabaseId: Int

  """The ID of the parent menu object"""
  parentId: ID
}

"""The MimeType of the object"""
enum MimeTypeEnum {
  """application/java mime type."""
  APPLICATION_JAVA

  """application/msword mime type."""
  APPLICATION_MSWORD

  """application/octet-stream mime type."""
  APPLICATION_OCTET_STREAM

  """application/onenote mime type."""
  APPLICATION_ONENOTE

  """application/oxps mime type."""
  APPLICATION_OXPS

  """application/pdf mime type."""
  APPLICATION_PDF

  """application/rar mime type."""
  APPLICATION_RAR

  """application/rtf mime type."""
  APPLICATION_RTF

  """application/ttaf+xml mime type."""
  APPLICATION_TTAF_XML

  """application/vnd.apple.keynote mime type."""
  APPLICATION_VND_APPLE_KEYNOTE

  """application/vnd.apple.numbers mime type."""
  APPLICATION_VND_APPLE_NUMBERS

  """application/vnd.apple.pages mime type."""
  APPLICATION_VND_APPLE_PAGES

  """application/vnd.ms-access mime type."""
  APPLICATION_VND_MS_ACCESS

  """application/vnd.ms-excel mime type."""
  APPLICATION_VND_MS_EXCEL

  """application/vnd.ms-excel.addin.macroEnabled.12 mime type."""
  APPLICATION_VND_MS_EXCEL_ADDIN_MACROENABLED_12

  """application/vnd.ms-excel.sheet.binary.macroEnabled.12 mime type."""
  APPLICATION_VND_MS_EXCEL_SHEET_BINARY_MACROENABLED_12

  """application/vnd.ms-excel.sheet.macroEnabled.12 mime type."""
  APPLICATION_VND_MS_EXCEL_SHEET_MACROENABLED_12

  """application/vnd.ms-excel.template.macroEnabled.12 mime type."""
  APPLICATION_VND_MS_EXCEL_TEMPLATE_MACROENABLED_12

  """application/vnd.ms-powerpoint mime type."""
  APPLICATION_VND_MS_POWERPOINT

  """application/vnd.ms-powerpoint.addin.macroEnabled.12 mime type."""
  APPLICATION_VND_MS_POWERPOINT_ADDIN_MACROENABLED_12

  """application/vnd.ms-powerpoint.presentation.macroEnabled.12 mime type."""
  APPLICATION_VND_MS_POWERPOINT_PRESENTATION_MACROENABLED_12

  """application/vnd.ms-powerpoint.slideshow.macroEnabled.12 mime type."""
  APPLICATION_VND_MS_POWERPOINT_SLIDESHOW_MACROENABLED_12

  """application/vnd.ms-powerpoint.slide.macroEnabled.12 mime type."""
  APPLICATION_VND_MS_POWERPOINT_SLIDE_MACROENABLED_12

  """application/vnd.ms-powerpoint.template.macroEnabled.12 mime type."""
  APPLICATION_VND_MS_POWERPOINT_TEMPLATE_MACROENABLED_12

  """application/vnd.ms-project mime type."""
  APPLICATION_VND_MS_PROJECT

  """application/vnd.ms-word.document.macroEnabled.12 mime type."""
  APPLICATION_VND_MS_WORD_DOCUMENT_MACROENABLED_12

  """application/vnd.ms-word.template.macroEnabled.12 mime type."""
  APPLICATION_VND_MS_WORD_TEMPLATE_MACROENABLED_12

  """application/vnd.ms-write mime type."""
  APPLICATION_VND_MS_WRITE

  """application/vnd.ms-xpsdocument mime type."""
  APPLICATION_VND_MS_XPSDOCUMENT

  """application/vnd.oasis.opendocument.chart mime type."""
  APPLICATION_VND_OASIS_OPENDOCUMENT_CHART

  """application/vnd.oasis.opendocument.database mime type."""
  APPLICATION_VND_OASIS_OPENDOCUMENT_DATABASE

  """application/vnd.oasis.opendocument.formula mime type."""
  APPLICATION_VND_OASIS_OPENDOCUMENT_FORMULA

  """application/vnd.oasis.opendocument.graphics mime type."""
  APPLICATION_VND_OASIS_OPENDOCUMENT_GRAPHICS

  """application/vnd.oasis.opendocument.presentation mime type."""
  APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION

  """application/vnd.oasis.opendocument.spreadsheet mime type."""
  APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET

  """application/vnd.oasis.opendocument.text mime type."""
  APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT

  """
  application/vnd.openxmlformats-officedocument.presentationml.presentation mime type.
  """
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION

  """
  application/vnd.openxmlformats-officedocument.presentationml.slide mime type.
  """
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE

  """
  application/vnd.openxmlformats-officedocument.presentationml.slideshow mime type.
  """
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDESHOW

  """
  application/vnd.openxmlformats-officedocument.presentationml.template mime type.
  """
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TEMPLATE

  """
  application/vnd.openxmlformats-officedocument.spreadsheetml.sheet mime type.
  """
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET

  """
  application/vnd.openxmlformats-officedocument.spreadsheetml.template mime type.
  """
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TEMPLATE

  """
  application/vnd.openxmlformats-officedocument.wordprocessingml.document mime type.
  """
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT

  """
  application/vnd.openxmlformats-officedocument.wordprocessingml.template mime type.
  """
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_TEMPLATE

  """application/wordperfect mime type."""
  APPLICATION_WORDPERFECT

  """application/x-7z-compressed mime type."""
  APPLICATION_X_7Z_COMPRESSED

  """application/x-gzip mime type."""
  APPLICATION_X_GZIP

  """application/x-tar mime type."""
  APPLICATION_X_TAR

  """application/zip mime type."""
  APPLICATION_ZIP

  """audio/aac mime type."""
  AUDIO_AAC

  """audio/flac mime type."""
  AUDIO_FLAC

  """audio/midi mime type."""
  AUDIO_MIDI

  """audio/mpeg mime type."""
  AUDIO_MPEG

  """audio/ogg mime type."""
  AUDIO_OGG

  """audio/wav mime type."""
  AUDIO_WAV

  """audio/x-matroska mime type."""
  AUDIO_X_MATROSKA

  """audio/x-ms-wax mime type."""
  AUDIO_X_MS_WAX

  """audio/x-ms-wma mime type."""
  AUDIO_X_MS_WMA

  """audio/x-realaudio mime type."""
  AUDIO_X_REALAUDIO

  """image/avif mime type."""
  IMAGE_AVIF

  """image/bmp mime type."""
  IMAGE_BMP

  """image/gif mime type."""
  IMAGE_GIF

  """image/heic mime type."""
  IMAGE_HEIC

  """image/jpeg mime type."""
  IMAGE_JPEG

  """image/png mime type."""
  IMAGE_PNG

  """image/tiff mime type."""
  IMAGE_TIFF

  """image/webp mime type."""
  IMAGE_WEBP

  """image/x-icon mime type."""
  IMAGE_X_ICON

  """text/calendar mime type."""
  TEXT_CALENDAR

  """text/css mime type."""
  TEXT_CSS

  """text/csv mime type."""
  TEXT_CSV

  """text/plain mime type."""
  TEXT_PLAIN

  """text/richtext mime type."""
  TEXT_RICHTEXT

  """text/tab-separated-values mime type."""
  TEXT_TAB_SEPARATED_VALUES

  """text/vtt mime type."""
  TEXT_VTT

  """video/3gpp mime type."""
  VIDEO_3GPP

  """video/3gpp2 mime type."""
  VIDEO_3GPP2

  """video/avi mime type."""
  VIDEO_AVI

  """video/divx mime type."""
  VIDEO_DIVX

  """video/mp4 mime type."""
  VIDEO_MP4

  """video/mpeg mime type."""
  VIDEO_MPEG

  """video/ogg mime type."""
  VIDEO_OGG

  """video/quicktime mime type."""
  VIDEO_QUICKTIME

  """video/webm mime type."""
  VIDEO_WEBM

  """video/x-flv mime type."""
  VIDEO_X_FLV

  """video/x-matroska mime type."""
  VIDEO_X_MATROSKA

  """video/x-ms-asf mime type."""
  VIDEO_X_MS_ASF

  """video/x-ms-wm mime type."""
  VIDEO_X_MS_WM

  """video/x-ms-wmv mime type."""
  VIDEO_X_MS_WMV

  """video/x-ms-wmx mime type."""
  VIDEO_X_MS_WMX
}

"""A Gravity Forms multiselect field."""
type MultiSelectField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithChoices & GfFieldWithChoicesSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDescriptionSetting & GfFieldWithEnhancedUISetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """The choices for the field."""
  choices: [MultiSelectFieldChoice]

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """
  Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
  """
  hasChoiceValue: Boolean

  """
  When set to true, the &quot;Chosen&quot; jQuery script will be applied to this field, enabling search capabilities to Drop Down fields and a more user-friendly interface for Multi Select fields.
  """
  hasEnhancedUI: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [GfFieldInput]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """An array of field values."""
  values: [String]

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""MultiSelectFieldChoice choice values."""
type MultiSelectFieldChoice implements GfFieldChoice & GfFieldChoiceWithChoicesSetting {
  """
  Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
  """
  isSelected: Boolean

  """The text to be displayed to the user when displaying this choice."""
  text: String

  """
  The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
  """
  value: String
}

"""A Gravity Forms name field."""
type NameField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithAutocompleteSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDescriptionSetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithNameSetting & GfFieldWithPersonalData & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSubLabelPlacementSetting & Node {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """Whether autocomplete should be enabled for this field."""
  hasAutocomplete: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [NameInputProperty]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """Name field value."""
  nameValues: NameFieldValue

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  The placement of the labels for the subfields within the group. This setting controls all of the subfields, they cannot be set individually. They may be aligned above or below the inputs. If this property is not set, the “Sub-Label Placement” setting on the Form Settings-&gt;Form Layout page is used. If no setting is specified, the default is above inputs.
  """
  subLabelPlacement: FormFieldSubLabelPlacementEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""NameFieldChoice choice values."""
type NameFieldChoice implements GfFieldChoice & GfFieldChoiceWithNameSetting {
  """
  Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
  """
  isSelected: Boolean

  """The text to be displayed to the user when displaying this choice."""
  text: String

  """
  The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
  """
  value: String
}

"""Input fields for name field."""
input NameFieldInput {
  """First name."""
  first: String

  """Last name."""
  last: String

  """Middle name."""
  middle: String

  """Prefix, such as Mr., Mrs. etc."""
  prefix: String

  """Suffix, such as Sr., Jr. etc."""
  suffix: String
}

"""The individual properties for each element of the Name value field."""
type NameFieldValue {
  """First name."""
  first: String

  """Last name."""
  last: String

  """Middle name."""
  middle: String

  """Prefix, such as Mr., Mrs. etc."""
  prefix: String

  """Suffix, such as Sr., Jr. etc."""
  suffix: String
}

"""NameInputProperty input values."""
type NameInputProperty implements GfFieldInput & GfFieldInputWithNameSetting {
  """The autocomplete attribute for the field."""
  autocompleteAttribute: String

  """The nested NameFieldChoice choice."""
  choices: [NameFieldChoice]

  """
  The custom label for the input. When set, this is used in place of the label.
  """
  customLabel: String

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """
  Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
  """
  hasChoiceValue: Boolean

  """
  The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field.
  """
  id: Float

  """Whether or not this field should be hidden."""
  isHidden: Boolean

  """Key used to identify this input."""
  key: String

  """The label to be used for the input."""
  label: String

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  name: String

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String
}

"""An object with an ID"""
interface Node {
  """The globally unique ID for the object"""
  id: ID!
}

"""A node that can have an author assigned to it"""
interface NodeWithAuthor implements Node {
  """Connection between the NodeWithAuthor type and the User type"""
  author: NodeWithAuthorToUserConnectionEdge

  """The database identifier of the author of the node"""
  authorDatabaseId: Int

  """The globally unique identifier of the author of the node"""
  authorId: ID

  """The globally unique ID for the object"""
  id: ID!
}

"""Connection between the NodeWithAuthor type and the User type"""
type NodeWithAuthorToUserConnectionEdge implements Edge & OneToOneConnection & UserConnectionEdge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The node of the connection, without the edges"""
  node: User!
}

"""A node that can have comments associated with it"""
interface NodeWithComments implements Node {
  """
  The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int

  """Whether the comments are open or closed for this particular post."""
  commentStatus: String

  """The globally unique ID for the object"""
  id: ID!
}

"""A node that supports the content editor"""
interface NodeWithContentEditor implements Node {
  """The content of the post."""
  content(
    """Format of the field output"""
    format: PostObjectFieldFormatEnum
  ): String

  """The globally unique ID for the object"""
  id: ID!
}

"""A node that can have an excerpt"""
interface NodeWithExcerpt implements Node {
  """The excerpt of the post."""
  excerpt(
    """Format of the field output"""
    format: PostObjectFieldFormatEnum
  ): String

  """The globally unique ID for the object"""
  id: ID!
}

"""A node that can have a featured image set"""
interface NodeWithFeaturedImage implements Node {
  """
  Connection between the NodeWithFeaturedImage type and the MediaItem type
  """
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge

  """
  The database identifier for the featured image node assigned to the content node
  """
  featuredImageDatabaseId: Int

  """Globally unique ID of the featured image assigned to the node"""
  featuredImageId: ID

  """The globally unique ID for the object"""
  id: ID!
}

"""
Connection between the NodeWithFeaturedImage type and the MediaItem type
"""
type NodeWithFeaturedImageToMediaItemConnectionEdge implements Edge & MediaItemConnectionEdge & OneToOneConnection {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The node of the connection, without the edges"""
  node: MediaItem!
}

"""A node that can have a Gravity Forms form assigned to it."""
interface NodeWithForm {
  """The form object of the node."""
  form: GfForm

  """The database identifier of the form of the node."""
  formDatabaseId: Int

  """The globally unique identifier of the form of the node."""
  formId: ID
}

"""A node that can have page attributes"""
interface NodeWithPageAttributes implements Node {
  """The globally unique ID for the object"""
  id: ID!

  """
  A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types.
  """
  menuOrder: Int
}

"""A node that can have revisions"""
interface NodeWithRevisions implements Node {
  """The globally unique ID for the object"""
  id: ID!

  """True if the node is a revision of another node"""
  isRevision: Boolean

  """
  If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node.
  """
  revisionOf: NodeWithRevisionsToContentNodeConnectionEdge
}

"""Connection between the NodeWithRevisions type and the ContentNode type"""
type NodeWithRevisionsToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge & OneToOneConnection {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The node of the connection, without the edges"""
  node: ContentNode!
}

"""A node that can have a template associated with it"""
interface NodeWithTemplate implements Node {
  """The globally unique ID for the object"""
  id: ID!

  """The template assigned to the node"""
  template: ContentTemplate
}

"""A node that NodeWith a title"""
interface NodeWithTitle implements Node {
  """The globally unique ID for the object"""
  id: ID!

  """The Yoast SEO data of the ContentNode"""
  seo: PostTypeSEO

  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title(
    """Format of the field output"""
    format: PostObjectFieldFormatEnum
  ): String
}

"""A node that can have trackbacks and pingbacks"""
interface NodeWithTrackbacks implements Node {
  """The globally unique ID for the object"""
  id: ID!

  """Whether the pings are open or closed for this particular post."""
  pingStatus: String

  """URLs that have been pinged."""
  pinged: [String]

  """URLs queued to be pinged."""
  toPing: [String]
}

"""A Gravity Forms number field."""
type NumberField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithAutocompleteSetting & GfFieldWithCalculationSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithErrorMessageSetting & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithNumberFormatSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRangeSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """The autocomplete attribute for the field."""
  autocompleteAttribute: String

  """The formula used for the number field."""
  calculationFormula: String

  """
  Specifies to how many decimal places the number should be rounded. This is available when `isCalculation` is true, but will return null if the number format is `CURRENCY` or if the calculation is set to `Do not round`.
  """
  calculationRounding: Int

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """Whether autocomplete should be enabled for this field."""
  hasAutocomplete: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """Indicates whether the number field is a calculation."""
  isCalculation: Boolean

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """Specifies the format allowed for the number field."""
  numberFormat: NumberFieldFormatEnum

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """
  Maximum allowed value for a number field. Values higher than the number specified by this property will cause the field to fail validation.
  """
  rangeMax: Float

  """
  Minimum allowed value for a number field. Values lower than the number specified by this property will cause the field to fail validation.
  """
  rangeMin: Float

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""The format allowed for the number field. ."""
enum NumberFieldFormatEnum {
  """Currency format."""
  CURRENCY

  """Decimal-comma format (e.g. 9.999,99)."""
  DECIMAL_COMMA

  """Decimal-dot format (e.g. 9,999.99)."""
  DECIMAL_DOT
}

"""
A singular connection from one Node to another, with support for relational data on the &quot;edge&quot; of the connection.
"""
interface OneToOneConnection implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The connected node"""
  node: Node!
}

"""A Gravity Forms checkbox option field."""
type OptionCheckboxField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithChoices & GfFieldWithChoicesSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithProductFieldSetting & GfFieldWithRulesSetting & GfFieldWithSelectAllChoicesSetting & Node & OptionField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """Checkbox field value."""
  checkboxValues: [CheckboxFieldValue]

  """The choices for the field."""
  choices: [OptionCheckboxFieldChoice]

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """The product field to which the field is associated."""
  connectedProductField: ProductField

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """
  Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
  """
  hasChoiceValue: Boolean

  """Whether the \&quot;select all\&quot; choice should be displayed."""
  hasSelectAll: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [OptionCheckboxInputProperty]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """The id of the product field to which the field is associated."""
  productField: Int @deprecated(reason: "Use `connectedProductField` field instead.")

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""OptionCheckboxFieldChoice choice values."""
type OptionCheckboxFieldChoice implements GfFieldChoice & GfFieldChoiceWithChoicesSetting & OptionFieldChoice {
  """The price associated with the choice."""
  formattedPrice: String

  """
  Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
  """
  isSelected: Boolean

  """The price associated with the choice."""
  price: Float

  """The text to be displayed to the user when displaying this choice."""
  text: String

  """
  The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
  """
  value: String
}

"""OptionCheckboxInputProperty input values."""
type OptionCheckboxInputProperty implements GfFieldInput & GfFieldInputWithSelectAllChoicesSetting {
  """
  The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field.
  """
  id: Float

  """The label to be used for the input."""
  label: String

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  name: String
}

"""A Gravity Forms option field."""
interface OptionField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithChoices & GfFieldWithChoicesSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithProductFieldSetting & GfFieldWithRulesSetting & Node {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """The choices for the field."""
  choices: [OptionFieldChoice]

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """The product field to which the field is associated."""
  connectedProductField: ProductField

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """
  Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
  """
  hasChoiceValue: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [GfFieldInput]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """The id of the product field to which the field is associated."""
  productField: Int @deprecated(reason: "Use `connectedProductField` field instead.")

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""OptionFieldChoice choice values."""
interface OptionFieldChoice implements GfFieldChoice & GfFieldChoiceWithChoicesSetting {
  """The price associated with the choice."""
  formattedPrice: String

  """
  Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
  """
  isSelected: Boolean

  """The price associated with the choice."""
  price: Float

  """The text to be displayed to the user when displaying this choice."""
  text: String

  """
  The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
  """
  value: String
}

"""A Gravity Forms radio option field."""
type OptionRadioField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithChoices & GfFieldWithChoicesSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithOtherChoiceSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithProductFieldSetting & GfFieldWithRulesSetting & Node & OptionField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """The choices for the field."""
  choices: [OptionRadioFieldChoice]

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """The product field to which the field is associated."""
  connectedProductField: ProductField

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """
  Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
  """
  hasChoiceValue: Boolean

  """
  Indicates whether the &#039;Enable &quot;other&quot; choice&#039; option is checked in the editor.
  """
  hasOtherChoice: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [GfFieldInput]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """The id of the product field to which the field is associated."""
  productField: Int @deprecated(reason: "Use `connectedProductField` field instead.")

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""OptionRadioFieldChoice choice values."""
type OptionRadioFieldChoice implements GfFieldChoice & GfFieldChoiceWithChoicesSetting & GfFieldChoiceWithOtherChoiceSetting & OptionFieldChoice {
  """The price associated with the choice."""
  formattedPrice: String

  """Indicates the radio button item is the “Other” choice."""
  isOtherChoice: Boolean

  """
  Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
  """
  isSelected: Boolean

  """The price associated with the choice."""
  price: Float

  """The text to be displayed to the user when displaying this choice."""
  text: String

  """
  The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
  """
  value: String
}

"""A Gravity Forms select option field."""
type OptionSelectField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithAutocompleteSetting & GfFieldWithChoices & GfFieldWithChoicesSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithEnhancedUISetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithProductFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node & OptionField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """The autocomplete attribute for the field."""
  autocompleteAttribute: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """The choices for the field."""
  choices: [OptionSelectFieldChoice]

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """The product field to which the field is associated."""
  connectedProductField: ProductField

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """Whether autocomplete should be enabled for this field."""
  hasAutocomplete: Boolean

  """
  Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
  """
  hasChoiceValue: Boolean

  """
  When set to true, the &quot;Chosen&quot; jQuery script will be applied to this field, enabling search capabilities to Drop Down fields and a more user-friendly interface for Multi Select fields.
  """
  hasEnhancedUI: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [GfFieldInput]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """The id of the product field to which the field is associated."""
  productField: Int @deprecated(reason: "Use `connectedProductField` field instead.")

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""OptionSelectFieldChoice choice values."""
type OptionSelectFieldChoice implements GfFieldChoice & GfFieldChoiceWithChoicesSetting & OptionFieldChoice {
  """The price associated with the choice."""
  formattedPrice: String

  """
  Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
  """
  isSelected: Boolean

  """The price associated with the choice."""
  price: Float

  """The text to be displayed to the user when displaying this choice."""
  text: String

  """
  The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
  """
  value: String
}

"""The cardinality of the connection order"""
enum OrderEnum {
  """Sort the query result set in an ascending order"""
  ASC

  """Sort the query result set in a descending order"""
  DESC
}

"""The page type"""
type Page implements ContentNode & DatabaseIdentifier & HierarchicalContentNode & HierarchicalNode & MenuItemLinkable & Node & NodeWithAuthor & NodeWithComments & NodeWithContentEditor & NodeWithFeaturedImage & NodeWithPageAttributes & NodeWithRevisions & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & WithAcfTable {
  """
  Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
  """
  ancestors(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs
  ): HierarchicalContentNodeToContentNodeAncestorsConnection

  """Connection between the NodeWithAuthor type and the User type"""
  author: NodeWithAuthorToUserConnectionEdge

  """The database identifier of the author of the node"""
  authorDatabaseId: Int

  """The globally unique identifier of the author of the node"""
  authorId: ID

  """
  Connection between the HierarchicalContentNode type and the ContentNode type
  """
  children(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs
  ): HierarchicalContentNodeToContentNodeChildrenConnection

  """
  The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int

  """Whether the comments are open or closed for this particular post."""
  commentStatus: String

  """Connection between the Page type and the Comment type"""
  comments(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: PageToCommentConnectionWhereArgs
  ): PageToCommentConnection

  """The content of the post."""
  content(
    """Format of the field output"""
    format: PostObjectFieldFormatEnum
  ): String

  """Connection between the ContentNode type and the ContentType type"""
  contentType: ContentNodeToContentTypeConnectionEdge

  """The name of the Content Type the node belongs to"""
  contentTypeName: String!

  """The unique identifier stored in the database"""
  databaseId: Int!

  """Post publishing date."""
  date: String

  """The publishing date set in GMT."""
  dateGmt: String

  """The desired slug of the post"""
  desiredSlug: String

  """
  If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds
  """
  editingLockedBy: ContentNodeToEditLockConnectionEdge

  """The RSS enclosure for the object"""
  enclosure: String

  """Connection between the ContentNode type and the EnqueuedScript type"""
  enqueuedScripts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): ContentNodeToEnqueuedScriptConnection

  """
  Connection between the ContentNode type and the EnqueuedStylesheet type
  """
  enqueuedStylesheets(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection

  """
  Connection between the NodeWithFeaturedImage type and the MediaItem type
  """
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge

  """
  The database identifier for the featured image node assigned to the content node
  """
  featuredImageDatabaseId: Int

  """Globally unique ID of the featured image assigned to the node"""
  featuredImageId: ID

  """
  The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
  """
  guid: String

  """Whether the page object is password protected."""
  hasPassword: Boolean

  """The globally unique identifier of the page object."""
  id: ID!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether this page is set to the static front page."""
  isFrontPage: Boolean!

  """Whether this page is set to the blog posts page."""
  isPostsPage: Boolean!

  """Whether the object is a node in the preview state"""
  isPreview: Boolean

  """Whether this page is set to the privacy page."""
  isPrivacyPage: Boolean!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """True if the node is a revision of another node"""
  isRevision: Boolean

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The user that most recently edited the node"""
  lastEditedBy: ContentNodeToEditLastConnectionEdge

  """The permalink of the post"""
  link: String

  """
  A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types.
  """
  menuOrder: Int

  """
  The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
  """
  modified: String

  """
  The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
  """
  modifiedGmt: String

  """The id field matches the WP_Post-&gt;ID field."""
  pageId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")

  """The parent of the node. The parent object can be of various types"""
  parent: HierarchicalContentNodeToParentContentNodeConnectionEdge

  """Database id of the parent node"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent node."""
  parentId: ID

  """The password for the page object."""
  password: String

  """Connection between the Page type and the page type"""
  preview: PageToPreviewConnectionEdge

  """The database id of the preview node"""
  previewRevisionDatabaseId: Int

  """Whether the object is a node in the preview state"""
  previewRevisionId: ID

  """
  If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node.
  """
  revisionOf: NodeWithRevisionsToContentNodeConnectionEdge

  """Connection between the Page type and the page type"""
  revisions(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: PageToRevisionConnectionWhereArgs
  ): PageToRevisionConnection

  """The Yoast SEO data of the ContentNode"""
  seo: PostTypeSEO

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
  """
  slug: String

  """The current status of the object"""
  status: String

  """Fields of the Table ACF Field Group"""
  table: Table

  """The template assigned to a node of content"""
  template: ContentTemplate

  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title(
    """Format of the field output"""
    format: PostObjectFieldFormatEnum
  ): String

  """The unique resource identifier path"""
  uri: String
}

"""Connection to page Nodes"""
interface PageConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected page Nodes
  """
  edges: [PageConnectionEdge!]!

  """A list of connected page Nodes"""
  nodes: [Page!]!

  """Information about pagination in a connection."""
  pageInfo: PageConnectionPageInfo!
}

"""Edge between a Node and a connected page"""
interface PageConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The connected page Node"""
  node: Page!
}

"""Page Info on the connected PageConnectionEdge"""
interface PageConnectionPageInfo implements PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""A Gravity Forms page field."""
type PageField implements FormField & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithNextButtonSetting & GfFieldWithPreviousButton & Node {
  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """
  An array containing the the individual properties for the &quot;Next&quot; button.
  """
  nextButton: FormButton

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  An array containing the the individual properties for the &quot;Previous&quot; button.
  """
  previousButton: FormButton

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""The Type of Identifier used to fetch a single resource. Default is ID."""
enum PageIdType {
  """Identify a resource by the Database ID."""
  DATABASE_ID

  """Identify a resource by the (hashed) Global ID."""
  ID

  """Identify a resource by the URI."""
  URI
}

"""Information about pagination in a connection."""
interface PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Connection between the Page type and the Comment type"""
type PageToCommentConnection implements CommentConnection & Connection {
  """Edges for the PageToCommentConnection connection"""
  edges: [PageToCommentConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [Comment!]!

  """Information about pagination in a connection."""
  pageInfo: PageToCommentConnectionPageInfo!
}

"""An edge in a connection"""
type PageToCommentConnectionEdge implements CommentConnectionEdge & Edge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Comment!
}

"""Page Info on the &quot;PageToCommentConnection&quot;"""
type PageToCommentConnectionPageInfo implements CommentConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the PageToCommentConnection connection"""
input PageToCommentConnectionWhereArgs {
  """Comment author email address."""
  authorEmail: String

  """Array of author IDs to include comments for."""
  authorIn: [ID]

  """Array of author IDs to exclude comments for."""
  authorNotIn: [ID]

  """Comment author URL."""
  authorUrl: String

  """Array of comment IDs to include."""
  commentIn: [ID]

  """
  Array of IDs of users whose unapproved comments will be returned by the query regardless of status.
  """
  commentNotIn: [ID]

  """Include comments of a given type."""
  commentType: String

  """Include comments from a given array of comment types."""
  commentTypeIn: [String]

  """Exclude comments from a given array of comment types."""
  commentTypeNotIn: String

  """Content object author ID to limit results by."""
  contentAuthor: [ID]

  """Array of author IDs to retrieve comments for."""
  contentAuthorIn: [ID]

  """Array of author IDs *not* to retrieve comments for."""
  contentAuthorNotIn: [ID]

  """Limit results to those affiliated with a given content object ID."""
  contentId: ID

  """Array of content object IDs to include affiliated comments for."""
  contentIdIn: [ID]

  """Array of content object IDs to exclude affiliated comments for."""
  contentIdNotIn: [ID]

  """Content object name (i.e. slug ) to retrieve affiliated comments for."""
  contentName: String

  """Content Object parent ID to retrieve affiliated comments for."""
  contentParent: Int

  """
  Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentStatus: [PostStatusEnum]

  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [ContentTypeEnum]

  """
  Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]

  """Karma score to retrieve matching comments for."""
  karma: Int

  """The cardinality of the order of the connection"""
  order: OrderEnum

  """Field to order the comments by."""
  orderby: CommentsConnectionOrderbyEnum

  """Parent ID of comment to retrieve children of."""
  parent: Int

  """Array of parent IDs of comments to retrieve children for."""
  parentIn: [ID]

  """Array of parent IDs of comments *not* to retrieve children for."""
  parentNotIn: [ID]

  """Search term(s) to retrieve matching comments for."""
  search: String

  """Comment status to limit results by."""
  status: String

  """Include comments for a specific user ID."""
  userId: ID
}

"""Connection between the Page type and the page type"""
type PageToPreviewConnectionEdge implements Edge & OneToOneConnection & PageConnectionEdge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The node of the connection, without the edges"""
  node: Page!
}

"""Connection between the Page type and the page type"""
type PageToRevisionConnection implements Connection & PageConnection {
  """Edges for the PageToRevisionConnection connection"""
  edges: [PageToRevisionConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [Page!]!

  """Information about pagination in a connection."""
  pageInfo: PageToRevisionConnectionPageInfo!
}

"""An edge in a connection"""
type PageToRevisionConnectionEdge implements Edge & PageConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Page!
}

"""Page Info on the &quot;PageToRevisionConnection&quot;"""
type PageToRevisionConnectionPageInfo implements PageConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the PageToRevisionConnection connection"""
input PageToRevisionConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific database ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What parameter to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [PostStatusEnum]

  """Show posts with a specific status."""
  status: PostStatusEnum

  """Title of the object"""
  title: String
}

"""A Gravity Forms password field."""
type PasswordField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDescriptionSetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPasswordSetting & GfFieldWithPasswordStrengthSetting & GfFieldWithPasswordVisibilitySetting & GfFieldWithPersonalData & GfFieldWithRulesSetting & GfFieldWithSizeSetting & GfFieldWithSubLabelPlacementSetting & Node {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """Indicates whether the field displays the password strength indicator."""
  hasPasswordStrengthIndicator: Boolean

  """
  Whether the Password visibility toggle should be enabled for this field.
  """
  hasPasswordVisibilityToggle: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [PasswordInputProperty]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """Indicates how strong the password should be."""
  minPasswordStrength: PasswordFieldMinStrengthEnum

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """
  The placement of the labels for the subfields within the group. This setting controls all of the subfields, they cannot be set individually. They may be aligned above or below the inputs. If this property is not set, the “Sub-Label Placement” setting on the Form Settings-&gt;Form Layout page is used. If no setting is specified, the default is above inputs.
  """
  subLabelPlacement: FormFieldSubLabelPlacementEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""Indicates how strong the password should be."""
enum PasswordFieldMinStrengthEnum {
  """The password strength must be "bad" or better."""
  BAD

  """The password strength must be "good" or better."""
  GOOD

  """The password strength must be "short" or better."""
  SHORT

  """The password strength must be "strong"."""
  STRONG
}

"""PasswordInputProperty input values."""
type PasswordInputProperty implements GfFieldInput & GfFieldInputWithPasswordSetting {
  """
  The custom label for the input. When set, this is used in place of the label.
  """
  customLabel: String

  """
  The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field.
  """
  id: Float

  """Whether or not this field should be hidden."""
  isHidden: Boolean

  """The label to be used for the input."""
  label: String

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String
}

"""A Gravity Forms phone field."""
type PhoneField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithAutocompleteSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithErrorMessageSetting & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPhoneFormatSetting & GfFieldWithPlaceholderSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """The autocomplete attribute for the field."""
  autocompleteAttribute: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """Whether autocomplete should be enabled for this field."""
  hasAutocomplete: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Determines the allowed format for phones. If the phone value does not conform with the specified format, the field will fail validation.
  """
  phoneFormat: PhoneFieldFormatEnum

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""Tthe allowed format for phone numbers."""
enum PhoneFieldFormatEnum {
  """International phone number format."""
  INTERNATIONAL

  """Standard phone number format."""
  STANDARD
}

"""An plugin object"""
type Plugin implements Node {
  """Name of the plugin author(s), may also be a company name."""
  author: String

  """URI for the related author(s)/company website."""
  authorUri: String

  """Description of the plugin."""
  description: String

  """The globally unique identifier of the plugin object."""
  id: ID!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """Display name of the plugin."""
  name: String

  """Plugin path."""
  path: String

  """
  URI for the plugin website. This is useful for directing users for support requests etc.
  """
  pluginUri: String

  """Current version of the plugin."""
  version: String
}

"""Connection to Plugin Nodes"""
interface PluginConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected Plugin Nodes
  """
  edges: [PluginConnectionEdge!]!

  """A list of connected Plugin Nodes"""
  nodes: [Plugin!]!

  """Information about pagination in a connection."""
  pageInfo: PluginConnectionPageInfo!
}

"""Edge between a Node and a connected Plugin"""
interface PluginConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The connected Plugin Node"""
  node: Plugin!
}

"""Page Info on the connected PluginConnectionEdge"""
interface PluginConnectionPageInfo implements PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""The status of the WordPress plugin."""
enum PluginStatusEnum {
  """The plugin is currently active."""
  ACTIVE

  """The plugin is a drop-in plugin."""
  DROP_IN

  """The plugin is currently inactive."""
  INACTIVE

  """The plugin is a must-use plugin."""
  MUST_USE

  """The plugin is technically active but was paused while loading."""
  PAUSED

  """The plugin was active recently."""
  RECENTLY_ACTIVE

  """The plugin has an upgrade available."""
  UPGRADE
}

"""The post type"""
type Post implements ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithAuthor & NodeWithComments & NodeWithContentEditor & NodeWithExcerpt & NodeWithFeaturedImage & NodeWithRevisions & NodeWithTemplate & NodeWithTitle & NodeWithTrackbacks & Previewable & UniformResourceIdentifiable {
  """The ancestors of the content node."""
  ancestors(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): PostToPostConnection @deprecated(reason: "This content type is not hierarchical and typically will not have ancestors")

  """Connection between the NodeWithAuthor type and the User type"""
  author: NodeWithAuthorToUserConnectionEdge

  """The database identifier of the author of the node"""
  authorDatabaseId: Int

  """The globally unique identifier of the author of the node"""
  authorId: ID

  """Connection between the Post type and the category type"""
  categories(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: PostToCategoryConnectionWhereArgs
  ): PostToCategoryConnection

  """
  The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int

  """Whether the comments are open or closed for this particular post."""
  commentStatus: String

  """Connection between the Post type and the Comment type"""
  comments(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: PostToCommentConnectionWhereArgs
  ): PostToCommentConnection

  """The content of the post."""
  content(
    """Format of the field output"""
    format: PostObjectFieldFormatEnum
  ): String

  """Connection between the ContentNode type and the ContentType type"""
  contentType: ContentNodeToContentTypeConnectionEdge

  """The name of the Content Type the node belongs to"""
  contentTypeName: String!

  """The unique identifier stored in the database"""
  databaseId: Int!

  """Post publishing date."""
  date: String

  """The publishing date set in GMT."""
  dateGmt: String

  """The desired slug of the post"""
  desiredSlug: String

  """
  If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds
  """
  editingLockedBy: ContentNodeToEditLockConnectionEdge

  """The RSS enclosure for the object"""
  enclosure: String

  """Connection between the ContentNode type and the EnqueuedScript type"""
  enqueuedScripts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): ContentNodeToEnqueuedScriptConnection

  """
  Connection between the ContentNode type and the EnqueuedStylesheet type
  """
  enqueuedStylesheets(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection

  """The excerpt of the post."""
  excerpt(
    """Format of the field output"""
    format: PostObjectFieldFormatEnum
  ): String

  """
  Connection between the NodeWithFeaturedImage type and the MediaItem type
  """
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge

  """
  The database identifier for the featured image node assigned to the content node
  """
  featuredImageDatabaseId: Int

  """Globally unique ID of the featured image assigned to the node"""
  featuredImageId: ID

  """
  The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
  """
  guid: String

  """Whether the post object is password protected."""
  hasPassword: Boolean

  """The globally unique identifier of the post object."""
  id: ID!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the object is a node in the preview state"""
  isPreview: Boolean

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """True if the node is a revision of another node"""
  isRevision: Boolean

  """Whether this page is sticky"""
  isSticky: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The user that most recently edited the node"""
  lastEditedBy: ContentNodeToEditLastConnectionEdge

  """The permalink of the post"""
  link: String

  """
  The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
  """
  modified: String

  """
  The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
  """
  modifiedGmt: String

  """The parent of the content node."""
  parent: PostToParentConnectionEdge @deprecated(reason: "This content type is not hierarchical and typically will not have a parent")

  """The password for the post object."""
  password: String

  """Whether the pings are open or closed for this particular post."""
  pingStatus: String

  """URLs that have been pinged."""
  pinged: [String]

  """Connection between the Post type and the postFormat type"""
  postFormats(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: PostToPostFormatConnectionWhereArgs
  ): PostToPostFormatConnection

  """The id field matches the WP_Post-&gt;ID field."""
  postId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")

  """Connection between the Post type and the post type"""
  preview: PostToPreviewConnectionEdge

  """The database id of the preview node"""
  previewRevisionDatabaseId: Int

  """Whether the object is a node in the preview state"""
  previewRevisionId: ID

  """
  If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node.
  """
  revisionOf: NodeWithRevisionsToContentNodeConnectionEdge

  """Connection between the Post type and the post type"""
  revisions(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: PostToRevisionConnectionWhereArgs
  ): PostToRevisionConnection

  """The Yoast SEO data of the ContentNode"""
  seo: PostTypeSEO

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
  """
  slug: String

  """The current status of the object"""
  status: String

  """Connection between the Post type and the tag type"""
  tags(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: PostToTagConnectionWhereArgs
  ): PostToTagConnection

  """The template assigned to the node"""
  template: ContentTemplate

  """Connection between the Post type and the TermNode type"""
  terms(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: PostToTermNodeConnectionWhereArgs
  ): PostToTermNodeConnection

  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title(
    """Format of the field output"""
    format: PostObjectFieldFormatEnum
  ): String

  """URLs queued to be pinged."""
  toPing: [String]

  """The unique resource identifier path"""
  uri: String
}

"""Set relationships between the post to categories"""
input PostCategoriesInput {
  """
  If true, this will append the category to existing related categories. If false, this will replace existing relationships. Default true.
  """
  append: Boolean

  """The input list of items to set."""
  nodes: [PostCategoriesNodeInput]
}

"""
List of categories to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists.
"""
input PostCategoriesNodeInput {
  """
  The description of the category. This field is used to set a description of the category if a new one is created during the mutation.
  """
  description: String

  """
  The ID of the category. If present, this will be used to connect to the post. If no existing category exists with this ID, no connection will be made.
  """
  id: ID

  """
  The name of the category. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field.
  """
  name: String

  """
  The slug of the category. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation.
  """
  slug: String
}

"""A Gravity Forms checkbox post_category field."""
type PostCategoryCheckboxField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithChoices & GfFieldWithChoicesSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPostCategoryCheckboxSetting & GfFieldWithPostCategoryInitialItemSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSelectAllChoicesSetting & GfFieldWithSizeSetting & Node & PostCategoryField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """Checkbox field value."""
  checkboxValues: [CheckboxFieldValue]

  """The choices for the field."""
  choices: [PostCategoryCheckboxFieldChoice]

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """The dropdown placeholder for the field."""
  dropdownPlaceholder: String

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """
  Determines if all categories should be displayed on the Post Category drop down. If this property is true (display all categories), the Post Category drop down will display the categories hierarchically.
  """
  hasAllCategories: Boolean

  """
  Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
  """
  hasChoiceValue: Boolean

  """Whether the \&quot;select all\&quot; choice should be displayed."""
  hasSelectAll: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [PostCategoryCheckboxInputProperty]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""PostCategoryCheckboxFieldChoice choice values."""
type PostCategoryCheckboxFieldChoice implements GfFieldChoice & GfFieldChoiceWithChoicesSetting & PostCategoryFieldChoice {
  """
  Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
  """
  isSelected: Boolean

  """The text to be displayed to the user when displaying this choice."""
  text: String

  """
  The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
  """
  value: String
}

"""PostCategoryCheckboxInputProperty input values."""
type PostCategoryCheckboxInputProperty implements GfFieldInput & GfFieldInputWithSelectAllChoicesSetting {
  """
  The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field.
  """
  id: Float

  """The label to be used for the input."""
  label: String

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  name: String
}

"""A Gravity Forms post_category field."""
interface PostCategoryField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithChoices & GfFieldWithChoicesSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPostCategoryCheckboxSetting & GfFieldWithPostCategoryInitialItemSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """The choices for the field."""
  choices: [PostCategoryFieldChoice]

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """The dropdown placeholder for the field."""
  dropdownPlaceholder: String

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """
  Determines if all categories should be displayed on the Post Category drop down. If this property is true (display all categories), the Post Category drop down will display the categories hierarchically.
  """
  hasAllCategories: Boolean

  """
  Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
  """
  hasChoiceValue: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [GfFieldInput]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""PostCategoryFieldChoice choice values."""
interface PostCategoryFieldChoice implements GfFieldChoice & GfFieldChoiceWithChoicesSetting {
  """
  Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
  """
  isSelected: Boolean

  """The text to be displayed to the user when displaying this choice."""
  text: String

  """
  The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
  """
  value: String
}

"""A Gravity Forms multiselect post_category field."""
type PostCategoryMultiSelectField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithChoices & GfFieldWithChoicesSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithEnhancedUISetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPostCategoryCheckboxSetting & GfFieldWithPostCategoryInitialItemSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node & PostCategoryField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """The choices for the field."""
  choices: [PostCategoryMultiSelectFieldChoice]

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """The dropdown placeholder for the field."""
  dropdownPlaceholder: String

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """
  Determines if all categories should be displayed on the Post Category drop down. If this property is true (display all categories), the Post Category drop down will display the categories hierarchically.
  """
  hasAllCategories: Boolean

  """
  Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
  """
  hasChoiceValue: Boolean

  """
  When set to true, the &quot;Chosen&quot; jQuery script will be applied to this field, enabling search capabilities to Drop Down fields and a more user-friendly interface for Multi Select fields.
  """
  hasEnhancedUI: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [GfFieldInput]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """An array of field values."""
  values: [String]

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""PostCategoryMultiSelectFieldChoice choice values."""
type PostCategoryMultiSelectFieldChoice implements GfFieldChoice & GfFieldChoiceWithChoicesSetting & PostCategoryFieldChoice {
  """
  Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
  """
  isSelected: Boolean

  """The text to be displayed to the user when displaying this choice."""
  text: String

  """
  The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
  """
  value: String
}

"""A Gravity Forms radio post_category field."""
type PostCategoryRadioField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithChoices & GfFieldWithChoicesSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithOtherChoiceSetting & GfFieldWithPersonalData & GfFieldWithPostCategoryCheckboxSetting & GfFieldWithPostCategoryInitialItemSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node & PostCategoryField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """The choices for the field."""
  choices: [PostCategoryRadioFieldChoice]

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """The dropdown placeholder for the field."""
  dropdownPlaceholder: String

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """
  Determines if all categories should be displayed on the Post Category drop down. If this property is true (display all categories), the Post Category drop down will display the categories hierarchically.
  """
  hasAllCategories: Boolean

  """
  Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
  """
  hasChoiceValue: Boolean

  """
  Indicates whether the &#039;Enable &quot;other&quot; choice&#039; option is checked in the editor.
  """
  hasOtherChoice: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [GfFieldInput]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""PostCategoryRadioFieldChoice choice values."""
type PostCategoryRadioFieldChoice implements GfFieldChoice & GfFieldChoiceWithChoicesSetting & GfFieldChoiceWithOtherChoiceSetting & PostCategoryFieldChoice {
  """Indicates the radio button item is the “Other” choice."""
  isOtherChoice: Boolean

  """
  Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
  """
  isSelected: Boolean

  """The text to be displayed to the user when displaying this choice."""
  text: String

  """
  The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
  """
  value: String
}

"""A Gravity Forms select post_category field."""
type PostCategorySelectField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithAutocompleteSetting & GfFieldWithChoices & GfFieldWithChoicesSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithEnhancedUISetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPostCategoryCheckboxSetting & GfFieldWithPostCategoryInitialItemSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node & PostCategoryField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """The autocomplete attribute for the field."""
  autocompleteAttribute: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """The choices for the field."""
  choices: [PostCategorySelectFieldChoice]

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """The dropdown placeholder for the field."""
  dropdownPlaceholder: String

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """
  Determines if all categories should be displayed on the Post Category drop down. If this property is true (display all categories), the Post Category drop down will display the categories hierarchically.
  """
  hasAllCategories: Boolean

  """Whether autocomplete should be enabled for this field."""
  hasAutocomplete: Boolean

  """
  Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
  """
  hasChoiceValue: Boolean

  """
  When set to true, the &quot;Chosen&quot; jQuery script will be applied to this field, enabling search capabilities to Drop Down fields and a more user-friendly interface for Multi Select fields.
  """
  hasEnhancedUI: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [GfFieldInput]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""PostCategorySelectFieldChoice choice values."""
type PostCategorySelectFieldChoice implements GfFieldChoice & GfFieldChoiceWithChoicesSetting & PostCategoryFieldChoice {
  """
  Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
  """
  isSelected: Boolean

  """The text to be displayed to the user when displaying this choice."""
  text: String

  """
  The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
  """
  value: String
}

"""Connection to post Nodes"""
interface PostConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected post Nodes
  """
  edges: [PostConnectionEdge!]!

  """A list of connected post Nodes"""
  nodes: [Post!]!

  """Information about pagination in a connection."""
  pageInfo: PostConnectionPageInfo!
}

"""Edge between a Node and a connected post"""
interface PostConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The connected post Node"""
  node: Post!
}

"""Page Info on the connected PostConnectionEdge"""
interface PostConnectionPageInfo implements PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""A Gravity Forms post_content field."""
type PostContentField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithErrorMessageSetting & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithMaxLengthSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRichTextEditorSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """Indicates whether the field uses the rich text editor interface."""
  hasRichTextEditor: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """
  Specifies the maximum number of characters allowed in a text or textarea (paragraph) field.
  """
  maxLength: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""A Gravity Forms checkbox post_custom_field field."""
type PostCustomCheckboxField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithChoices & GfFieldWithChoicesSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPostCustomFieldSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSelectAllChoicesSetting & GfFieldWithSizeSetting & Node & PostCustomField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """Checkbox field value."""
  checkboxValues: [CheckboxFieldValue]

  """The choices for the field."""
  choices: [PostCustomCheckboxFieldChoice]

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """
  Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
  """
  hasChoiceValue: Boolean

  """Whether the \&quot;select all\&quot; choice should be displayed."""
  hasSelectAll: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [PostCustomCheckboxInputProperty]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """The post meta key to which the value should be assigned."""
  postMetaFieldName: String

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""PostCustomCheckboxFieldChoice choice values."""
type PostCustomCheckboxFieldChoice implements GfFieldChoice & GfFieldChoiceWithChoicesSetting {
  """
  Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
  """
  isSelected: Boolean

  """The text to be displayed to the user when displaying this choice."""
  text: String

  """
  The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
  """
  value: String
}

"""PostCustomCheckboxInputProperty input values."""
type PostCustomCheckboxInputProperty implements GfFieldInput & GfFieldInputWithSelectAllChoicesSetting {
  """
  The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field.
  """
  id: Float

  """The label to be used for the input."""
  label: String

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  name: String
}

"""A Gravity Forms date post_custom_field field."""
type PostCustomDateField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDateFormatSetting & GfFieldWithDateInputTypeSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPostCustomFieldSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & GfFieldWithSubLabelPlacementSetting & Node & PostCustomField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines how the date field displays it’s calendar icon."""
  calendarIconType: FormFieldCalendarIconTypeEnum

  """
  Contains the URL to the custom calendar icon. Only applicable when calendarIconType is set to custom.
  """
  calendarIconUrl: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """Determines how the date is displayed."""
  dateFormat: DateFieldFormatEnum

  """The type of date field to display."""
  dateType: DateFieldTypeEnum

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [PostCustomDateInputProperty]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """The post meta key to which the value should be assigned."""
  postMetaFieldName: String

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """
  The placement of the labels for the subfields within the group. This setting controls all of the subfields, they cannot be set individually. They may be aligned above or below the inputs. If this property is not set, the “Sub-Label Placement” setting on the Form Settings-&gt;Form Layout page is used. If no setting is specified, the default is above inputs.
  """
  subLabelPlacement: FormFieldSubLabelPlacementEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""PostCustomDateInputProperty input values."""
type PostCustomDateInputProperty implements GfFieldInput & GfFieldInputWithDateFormatSetting {
  """The autocomplete attribute for the field."""
  autocompleteAttribute: String

  """
  The custom label for the input. When set, this is used in place of the label.
  """
  customLabel: String

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """
  The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field.
  """
  id: Float

  """The label to be used for the input."""
  label: String

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String
}

"""A Gravity Forms email post_custom_field field."""
type PostCustomEmailField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithAutocompleteSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPostCustomFieldSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & GfFieldWithSubLabelPlacementSetting & GfGfFieldWithEmailConfirmationSetting & Node & PostCustomField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """The autocomplete attribute for the field."""
  autocompleteAttribute: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """Whether autocomplete should be enabled for this field."""
  hasAutocomplete: Boolean

  """Determines whether the Confirm Email field is active."""
  hasEmailConfirmation: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [PostCustomEmailInputProperty]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """The post meta key to which the value should be assigned."""
  postMetaFieldName: String

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """
  The placement of the labels for the subfields within the group. This setting controls all of the subfields, they cannot be set individually. They may be aligned above or below the inputs. If this property is not set, the “Sub-Label Placement” setting on the Form Settings-&gt;Form Layout page is used. If no setting is specified, the default is above inputs.
  """
  subLabelPlacement: FormFieldSubLabelPlacementEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""PostCustomEmailInputProperty input values."""
type PostCustomEmailInputProperty implements GfFieldInput & GfFieldInputWithEmailConfirmationSetting {
  """The autocomplete attribute for the field."""
  autocompleteAttribute: String

  """
  The custom label for the input. When set, this is used in place of the label.
  """
  customLabel: String

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """
  The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field.
  """
  id: Float

  """The label to be used for the input."""
  label: String

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  name: String

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String
}

"""A Gravity Forms post_custom_field field."""
interface PostCustomField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithErrorMessageSetting & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPostCustomFieldSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """The post meta key to which the value should be assigned."""
  postMetaFieldName: String

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""A Gravity Forms fileupload post_custom_field field."""
type PostCustomFileuploadField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithErrorMessageSetting & GfFieldWithFileExtensionsSetting & GfFieldWithFileSizeSetting & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithMultipleFilesSetting & GfFieldWithPersonalData & GfFieldWithPostCustomFieldSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node & PostCustomField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """A comma-delimited list of the file extensions which may be uploaded."""
  allowedExtensions: [String]

  """Indicates whether multiple files may be uploaded."""
  canAcceptMultipleFiles: Boolean

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """File upload value"""
  fileUploadValues: [FileUploadFieldValue]

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The maximum size (in MB) an uploaded file may be ."""
  maxFileSize: Int

  """
  When the field is set to allow multiple files to be uploaded, this property is available to set a limit on how many may be uploaded.
  """
  maxFiles: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """The post meta key to which the value should be assigned."""
  postMetaFieldName: String

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""A Gravity Forms hidden post_custom_field field."""
type PostCustomHiddenField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithErrorMessageSetting & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPostCustomFieldSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node & PostCustomField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """The post meta key to which the value should be assigned."""
  postMetaFieldName: String

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""A Gravity Forms list post_custom_field field."""
type PostCustomListField implements FormField & GfFieldWithAddIconUrlSetting & GfFieldWithAdminLabelSetting & GfFieldWithChoices & GfFieldWithColumnsSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDeleteIconUrlSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithErrorMessageSetting & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithMaxRowsSetting & GfFieldWithPersonalData & GfFieldWithPostCustomFieldSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node & PostCustomField {
  """The URL of the image to be used for the add row button."""
  addIconUrl: String

  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """The choices for the field."""
  choices: [PostCustomListFieldChoice]

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """The URL of the image to be used for the delete row button."""
  deleteIconUrl: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """Determines if the field should use multiple columns. Default is false."""
  hasColumns: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """List field value."""
  listValues: [ListFieldValue]

  """The maximum number of rows the user can add to the field."""
  maxRows: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """The post meta key to which the value should be assigned."""
  postMetaFieldName: String

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""PostCustomListFieldChoice choice values."""
type PostCustomListFieldChoice implements GfFieldChoice & GfFieldChoiceWithColumnsSetting {
  """The text to be displayed to the user when displaying this choice."""
  text: String

  """
  The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
  """
  value: String
}

"""A Gravity Forms multiselect post_custom_field field."""
type PostCustomMultiSelectField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithChoices & GfFieldWithChoicesSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithEnhancedUISetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPostCustomFieldSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node & PostCustomField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """The choices for the field."""
  choices: [PostCustomMultiSelectFieldChoice]

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """
  Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
  """
  hasChoiceValue: Boolean

  """
  When set to true, the &quot;Chosen&quot; jQuery script will be applied to this field, enabling search capabilities to Drop Down fields and a more user-friendly interface for Multi Select fields.
  """
  hasEnhancedUI: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [GfFieldInput]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """The post meta key to which the value should be assigned."""
  postMetaFieldName: String

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """An array of field values."""
  values: [String]

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""PostCustomMultiSelectFieldChoice choice values."""
type PostCustomMultiSelectFieldChoice implements GfFieldChoice & GfFieldChoiceWithChoicesSetting {
  """
  Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
  """
  isSelected: Boolean

  """The text to be displayed to the user when displaying this choice."""
  text: String

  """
  The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
  """
  value: String
}

"""A Gravity Forms number post_custom_field field."""
type PostCustomNumberField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithAutocompleteSetting & GfFieldWithCalculationSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithErrorMessageSetting & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithNumberFormatSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPostCustomFieldSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRangeSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node & PostCustomField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """The autocomplete attribute for the field."""
  autocompleteAttribute: String

  """The formula used for the number field."""
  calculationFormula: String

  """
  Specifies to how many decimal places the number should be rounded. This is available when `isCalculation` is true, but will return null if the number format is `CURRENCY` or if the calculation is set to `Do not round`.
  """
  calculationRounding: Int

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """Whether autocomplete should be enabled for this field."""
  hasAutocomplete: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """Indicates whether the number field is a calculation."""
  isCalculation: Boolean

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """Specifies the format allowed for the number field."""
  numberFormat: NumberFieldFormatEnum

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """The post meta key to which the value should be assigned."""
  postMetaFieldName: String

  """
  Maximum allowed value for a number field. Values higher than the number specified by this property will cause the field to fail validation.
  """
  rangeMax: Float

  """
  Minimum allowed value for a number field. Values lower than the number specified by this property will cause the field to fail validation.
  """
  rangeMin: Float

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""A Gravity Forms phone post_custom_field field."""
type PostCustomPhoneField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithAutocompleteSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithErrorMessageSetting & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPhoneFormatSetting & GfFieldWithPlaceholderSetting & GfFieldWithPostCustomFieldSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node & PostCustomField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """The autocomplete attribute for the field."""
  autocompleteAttribute: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """Whether autocomplete should be enabled for this field."""
  hasAutocomplete: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Determines the allowed format for phones. If the phone value does not conform with the specified format, the field will fail validation.
  """
  phoneFormat: PhoneFieldFormatEnum

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """The post meta key to which the value should be assigned."""
  postMetaFieldName: String

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""A Gravity Forms radio post_custom_field field."""
type PostCustomRadioField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithChoices & GfFieldWithChoicesSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithOtherChoiceSetting & GfFieldWithPersonalData & GfFieldWithPostCustomFieldSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node & PostCustomField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """The choices for the field."""
  choices: [PostCustomRadioFieldChoice]

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """
  Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
  """
  hasChoiceValue: Boolean

  """
  Indicates whether the &#039;Enable &quot;other&quot; choice&#039; option is checked in the editor.
  """
  hasOtherChoice: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [GfFieldInput]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """The post meta key to which the value should be assigned."""
  postMetaFieldName: String

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""PostCustomRadioFieldChoice choice values."""
type PostCustomRadioFieldChoice implements GfFieldChoice & GfFieldChoiceWithChoicesSetting & GfFieldChoiceWithOtherChoiceSetting {
  """Indicates the radio button item is the “Other” choice."""
  isOtherChoice: Boolean

  """
  Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
  """
  isSelected: Boolean

  """The text to be displayed to the user when displaying this choice."""
  text: String

  """
  The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
  """
  value: String
}

"""A Gravity Forms select post_custom_field field."""
type PostCustomSelectField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithAutocompleteSetting & GfFieldWithChoices & GfFieldWithChoicesSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithEnhancedUISetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPostCustomFieldSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node & PostCustomField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """The autocomplete attribute for the field."""
  autocompleteAttribute: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """The choices for the field."""
  choices: [PostCustomSelectFieldChoice]

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """Whether autocomplete should be enabled for this field."""
  hasAutocomplete: Boolean

  """
  Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
  """
  hasChoiceValue: Boolean

  """
  When set to true, the &quot;Chosen&quot; jQuery script will be applied to this field, enabling search capabilities to Drop Down fields and a more user-friendly interface for Multi Select fields.
  """
  hasEnhancedUI: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [GfFieldInput]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """The post meta key to which the value should be assigned."""
  postMetaFieldName: String

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""PostCustomSelectFieldChoice choice values."""
type PostCustomSelectFieldChoice implements GfFieldChoice & GfFieldChoiceWithChoicesSetting {
  """
  Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
  """
  isSelected: Boolean

  """The text to be displayed to the user when displaying this choice."""
  text: String

  """
  The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
  """
  value: String
}

"""A Gravity Forms textarea post_custom_field field."""
type PostCustomTextAreaField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithErrorMessageSetting & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithMaxLengthSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPostCustomFieldSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRichTextEditorSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node & PostCustomField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """Indicates whether the field uses the rich text editor interface."""
  hasRichTextEditor: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """
  Specifies the maximum number of characters allowed in a text or textarea (paragraph) field.
  """
  maxLength: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """The post meta key to which the value should be assigned."""
  postMetaFieldName: String

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""A Gravity Forms text post_custom_field field."""
type PostCustomTextField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithAutocompleteSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithErrorMessageSetting & GfFieldWithInputMaskSetting & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithMaxLengthSetting & GfFieldWithPasswordFieldSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPostCustomFieldSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node & PostCustomField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """The autocomplete attribute for the field."""
  autocompleteAttribute: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """Whether autocomplete should be enabled for this field."""
  hasAutocomplete: Boolean

  """Whether the field has an input mask."""
  hasInputMask: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """The pattern used for the input mask."""
  inputMaskValue: String

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """
  Determines if a text field input tag should be created with a &quot;password&quot; type.
  """
  isPasswordInput: Boolean

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """
  Specifies the maximum number of characters allowed in a text or textarea (paragraph) field.
  """
  maxLength: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """The post meta key to which the value should be assigned."""
  postMetaFieldName: String

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""A Gravity Forms time post_custom_field field."""
type PostCustomTimeField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPostCustomFieldSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & GfFieldWithSubLabelPlacementSetting & GfFieldWithTimeFormatSetting & Node & PostCustomField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [PostCustomTimeInputProperty]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """The post meta key to which the value should be assigned."""
  postMetaFieldName: String

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """
  The placement of the labels for the subfields within the group. This setting controls all of the subfields, they cannot be set individually. They may be aligned above or below the inputs. If this property is not set, the “Sub-Label Placement” setting on the Form Settings-&gt;Form Layout page is used. If no setting is specified, the default is above inputs.
  """
  subLabelPlacement: FormFieldSubLabelPlacementEnum

  """Determines how the time is displayed."""
  timeFormat: TimeFieldFormatEnum

  """Time field value."""
  timeValues: TimeFieldValue

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""PostCustomTimeInputProperty input values."""
type PostCustomTimeInputProperty implements GfFieldInput & GfFieldInputWithTimeFormatSetting {
  """The autocomplete attribute for the field."""
  autocompleteAttribute: String

  """
  The custom label for the input. When set, this is used in place of the label.
  """
  customLabel: String

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """
  The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field.
  """
  id: Float

  """The label to be used for the input."""
  label: String

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String
}

"""A Gravity Forms website post_custom_field field."""
type PostCustomWebsiteField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithErrorMessageSetting & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPostCustomFieldSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node & PostCustomField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """The post meta key to which the value should be assigned."""
  postMetaFieldName: String

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""A Gravity Forms post_excerpt field."""
type PostExcerptField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithErrorMessageSetting & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithMaxLengthSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """
  Specifies the maximum number of characters allowed in a text or textarea (paragraph) field.
  """
  maxLength: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""The postFormat type"""
type PostFormat implements DatabaseIdentifier & Node & TermNode & UniformResourceIdentifiable {
  """Connection between the PostFormat type and the ContentNode type"""
  contentNodes(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: PostFormatToContentNodeConnectionWhereArgs
  ): PostFormatToContentNodeConnection

  """The number of objects connected to the object"""
  count: Int

  """The unique identifier stored in the database"""
  databaseId: Int!

  """The description of the object"""
  description: String

  """Connection between the TermNode type and the EnqueuedScript type"""
  enqueuedScripts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): TermNodeToEnqueuedScriptConnection

  """Connection between the TermNode type and the EnqueuedStylesheet type"""
  enqueuedStylesheets(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): TermNodeToEnqueuedStylesheetConnection

  """The globally unique ID for the object"""
  id: ID!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The link to the term"""
  link: String

  """The human friendly name of the object."""
  name: String

  """The id field matches the WP_Post-&gt;ID field."""
  postFormatId: Int @deprecated(reason: "Deprecated in favor of databaseId")

  """Connection between the PostFormat type and the post type"""
  posts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: PostFormatToPostConnectionWhereArgs
  ): PostFormatToPostConnection

  """The Yoast SEO data of the Formats taxonomy."""
  seo: TaxonomySEO

  """An alphanumeric identifier for the object unique to its type."""
  slug: String

  """Connection between the PostFormat type and the Taxonomy type"""
  taxonomy: PostFormatToTaxonomyConnectionEdge

  """The name of the taxonomy that the object is associated with"""
  taxonomyName: String

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int

  """The unique resource identifier path"""
  uri: String
}

"""Connection to postFormat Nodes"""
interface PostFormatConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected postFormat Nodes
  """
  edges: [PostFormatConnectionEdge!]!

  """A list of connected postFormat Nodes"""
  nodes: [PostFormat!]!

  """Information about pagination in a connection."""
  pageInfo: PostFormatConnectionPageInfo!
}

"""Edge between a Node and a connected postFormat"""
interface PostFormatConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The connected postFormat Node"""
  node: PostFormat!
}

"""Page Info on the connected PostFormatConnectionEdge"""
interface PostFormatConnectionPageInfo implements PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""The Type of Identifier used to fetch a single resource. Default is ID."""
enum PostFormatIdType {
  """The Database ID for the node"""
  DATABASE_ID

  """The hashed Global ID"""
  ID

  """The name of the node"""
  NAME

  """Url friendly name of the node"""
  SLUG

  """The URI for the node"""
  URI
}

"""Connection between the PostFormat type and the ContentNode type"""
type PostFormatToContentNodeConnection implements Connection & ContentNodeConnection {
  """Edges for the PostFormatToContentNodeConnection connection"""
  edges: [PostFormatToContentNodeConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [ContentNode!]!

  """Information about pagination in a connection."""
  pageInfo: PostFormatToContentNodeConnectionPageInfo!
}

"""An edge in a connection"""
type PostFormatToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: ContentNode!
}

"""Page Info on the &quot;PostFormatToContentNodeConnection&quot;"""
type PostFormatToContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""
Arguments for filtering the PostFormatToContentNodeConnection connection
"""
input PostFormatToContentNodeConnectionWhereArgs {
  """The Types of content to filter"""
  contentTypes: [ContentTypesOfPostFormatEnum]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific database ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What parameter to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [PostStatusEnum]

  """Show posts with a specific status."""
  status: PostStatusEnum

  """Title of the object"""
  title: String
}

"""Connection between the PostFormat type and the post type"""
type PostFormatToPostConnection implements Connection & PostConnection {
  """Edges for the PostFormatToPostConnection connection"""
  edges: [PostFormatToPostConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [Post!]!

  """Information about pagination in a connection."""
  pageInfo: PostFormatToPostConnectionPageInfo!
}

"""An edge in a connection"""
type PostFormatToPostConnectionEdge implements Edge & PostConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Post!
}

"""Page Info on the &quot;PostFormatToPostConnection&quot;"""
type PostFormatToPostConnectionPageInfo implements PageInfo & PostConnectionPageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the PostFormatToPostConnection connection"""
input PostFormatToPostConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Category ID"""
  categoryId: Int

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryIn: [ID]

  """Use Category Slug"""
  categoryName: String

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific database ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What parameter to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [PostStatusEnum]

  """Show posts with a specific status."""
  status: PostStatusEnum

  """Tag Slug"""
  tag: String

  """Use Tag ID"""
  tagId: String

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagIn: [ID]

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagNotIn: [ID]

  """Array of tag slugs, used to display objects from one tag AND another"""
  tagSlugAnd: [String]

  """Array of tag slugs, used to include objects in ANY specified tags"""
  tagSlugIn: [String]

  """Title of the object"""
  title: String
}

"""Connection between the PostFormat type and the Taxonomy type"""
type PostFormatToTaxonomyConnectionEdge implements Edge & OneToOneConnection & TaxonomyConnectionEdge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The node of the connection, without the edges"""
  node: Taxonomy!
}

"""List of possible post formats."""
enum PostFormatTypeEnum {
  """A standard post format."""
  STANDARD
}

"""The Type of Identifier used to fetch a single resource. Default is ID."""
enum PostIdType {
  """Identify a resource by the Database ID."""
  DATABASE_ID

  """Identify a resource by the (hashed) Global ID."""
  ID

  """
  Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier.
  """
  SLUG

  """Identify a resource by the URI."""
  URI
}

"""A Gravity Forms post_image field."""
type PostImageField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDescriptionSetting & GfFieldWithErrorMessageSetting & GfFieldWithFileExtensionsSetting & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPostImageFeaturedImageSetting & GfFieldWithPostImageSetting & GfFieldWithRulesSetting & GfFieldWithSubLabelPlacementSetting & Node {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """A comma-delimited list of the file extensions which may be uploaded."""
  allowedExtensions: [String]

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """Controls the visibility of the alt metadata for Post Image fields."""
  hasAlt: Boolean

  """Controls the visibility of the caption metadata for Post Image fields."""
  hasCaption: Boolean

  """
  Controls the visibility of the description metadata for Post Image fields.
  """
  hasDescription: Boolean

  """Controls the visibility of the title metadata for Post Image fields."""
  hasTitle: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """Image field value."""
  imageValues: ImageFieldValue

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """
  Whether the image field should be used to set the post&#039;s Featured Image
  """
  isFeaturedImage: Boolean

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  The placement of the labels for the subfields within the group. This setting controls all of the subfields, they cannot be set individually. They may be aligned above or below the inputs. If this property is not set, the “Sub-Label Placement” setting on the Form Settings-&gt;Form Layout page is used. If no setting is specified, the default is above inputs.
  """
  subLabelPlacement: FormFieldSubLabelPlacementEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""The format of post field data."""
enum PostObjectFieldFormatEnum {
  """
  Provide the field value directly from database. Null on unauthenticated requests.
  """
  RAW

  """Provide the field value as rendered by WordPress. Default."""
  RENDERED
}

"""The column to use when filtering by date"""
enum PostObjectsConnectionDateColumnEnum {
  """The date the comment was created in local time."""
  DATE

  """The most recent modification date of the comment."""
  MODIFIED
}

"""Field to order the connection by"""
enum PostObjectsConnectionOrderbyEnum {
  """Order by author"""
  AUTHOR

  """Order by the number of comments it has acquired"""
  COMMENT_COUNT

  """Order by publish date"""
  DATE

  """Preserve the ID order given in the IN array"""
  IN

  """Order by the menu order value"""
  MENU_ORDER

  """Order by last modified date"""
  MODIFIED

  """Preserve slug order given in the NAME_IN array"""
  NAME_IN

  """Order by parent ID"""
  PARENT

  """Order by slug"""
  SLUG

  """Order by title"""
  TITLE
}

"""Options for ordering the connection"""
input PostObjectsConnectionOrderbyInput {
  """The field to order the connection by"""
  field: PostObjectsConnectionOrderbyEnum!

  """Possible directions in which to order a list of items"""
  order: OrderEnum!
}

"""Set relationships between the post to postFormats"""
input PostPostFormatsInput {
  """
  If true, this will append the postFormat to existing related postFormats. If false, this will replace existing relationships. Default true.
  """
  append: Boolean

  """The input list of items to set."""
  nodes: [PostPostFormatsNodeInput]
}

"""
List of postFormats to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists.
"""
input PostPostFormatsNodeInput {
  """
  The description of the postFormat. This field is used to set a description of the postFormat if a new one is created during the mutation.
  """
  description: String

  """
  The ID of the postFormat. If present, this will be used to connect to the post. If no existing postFormat exists with this ID, no connection will be made.
  """
  id: ID

  """
  The name of the postFormat. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field.
  """
  name: String

  """
  The slug of the postFormat. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation.
  """
  slug: String
}

"""The status of the object."""
enum PostStatusEnum {
  """Objects with the acf-disabled status"""
  ACF_DISABLED

  """Objects with the auto-draft status"""
  AUTO_DRAFT

  """Objects with the draft status"""
  DRAFT

  """Objects with the future status"""
  FUTURE

  """Objects with the inherit status"""
  INHERIT

  """Objects with the pending status"""
  PENDING

  """Objects with the private status"""
  PRIVATE

  """Objects with the publish status"""
  PUBLISH

  """Objects with the request-completed status"""
  REQUEST_COMPLETED

  """Objects with the request-confirmed status"""
  REQUEST_CONFIRMED

  """Objects with the request-failed status"""
  REQUEST_FAILED

  """Objects with the request-pending status"""
  REQUEST_PENDING

  """Objects with the spam status"""
  SPAM

  """Objects with the trash status"""
  TRASH
}

"""A Gravity Forms checkbox post_tags field."""
type PostTagsCheckboxField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithChoices & GfFieldWithChoicesSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSelectAllChoicesSetting & GfFieldWithSizeSetting & Node & PostTagsField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """Checkbox field value."""
  checkboxValues: [CheckboxFieldValue]

  """The choices for the field."""
  choices: [PostTagsCheckboxFieldChoice]

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """
  Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
  """
  hasChoiceValue: Boolean

  """Whether the \&quot;select all\&quot; choice should be displayed."""
  hasSelectAll: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [PostTagsCheckboxInputProperty]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""PostTagsCheckboxFieldChoice choice values."""
type PostTagsCheckboxFieldChoice implements GfFieldChoice & GfFieldChoiceWithChoicesSetting {
  """
  Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
  """
  isSelected: Boolean

  """The text to be displayed to the user when displaying this choice."""
  text: String

  """
  The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
  """
  value: String
}

"""PostTagsCheckboxInputProperty input values."""
type PostTagsCheckboxInputProperty implements GfFieldInput & GfFieldInputWithSelectAllChoicesSetting {
  """
  The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field.
  """
  id: Float

  """The label to be used for the input."""
  label: String

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  name: String
}

"""A Gravity Forms post_tags field."""
interface PostTagsField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithErrorMessageSetting & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""Set relationships between the post to tags"""
input PostTagsInput {
  """
  If true, this will append the tag to existing related tags. If false, this will replace existing relationships. Default true.
  """
  append: Boolean

  """The input list of items to set."""
  nodes: [PostTagsNodeInput]
}

"""A Gravity Forms multiselect post_tags field."""
type PostTagsMultiSelectField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithChoices & GfFieldWithChoicesSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithEnhancedUISetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node & PostTagsField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """The choices for the field."""
  choices: [PostTagsMultiSelectFieldChoice]

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """
  Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
  """
  hasChoiceValue: Boolean

  """
  When set to true, the &quot;Chosen&quot; jQuery script will be applied to this field, enabling search capabilities to Drop Down fields and a more user-friendly interface for Multi Select fields.
  """
  hasEnhancedUI: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [GfFieldInput]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """An array of field values."""
  values: [String]

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""PostTagsMultiSelectFieldChoice choice values."""
type PostTagsMultiSelectFieldChoice implements GfFieldChoice & GfFieldChoiceWithChoicesSetting {
  """
  Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
  """
  isSelected: Boolean

  """The text to be displayed to the user when displaying this choice."""
  text: String

  """
  The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
  """
  value: String
}

"""
List of tags to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists.
"""
input PostTagsNodeInput {
  """
  The description of the tag. This field is used to set a description of the tag if a new one is created during the mutation.
  """
  description: String

  """
  The ID of the tag. If present, this will be used to connect to the post. If no existing tag exists with this ID, no connection will be made.
  """
  id: ID

  """
  The name of the tag. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field.
  """
  name: String

  """
  The slug of the tag. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation.
  """
  slug: String
}

"""A Gravity Forms radio post_tags field."""
type PostTagsRadioField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithChoices & GfFieldWithChoicesSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithOtherChoiceSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node & PostTagsField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """The choices for the field."""
  choices: [PostTagsRadioFieldChoice]

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """
  Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
  """
  hasChoiceValue: Boolean

  """
  Indicates whether the &#039;Enable &quot;other&quot; choice&#039; option is checked in the editor.
  """
  hasOtherChoice: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [GfFieldInput]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""PostTagsRadioFieldChoice choice values."""
type PostTagsRadioFieldChoice implements GfFieldChoice & GfFieldChoiceWithChoicesSetting & GfFieldChoiceWithOtherChoiceSetting {
  """Indicates the radio button item is the “Other” choice."""
  isOtherChoice: Boolean

  """
  Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
  """
  isSelected: Boolean

  """The text to be displayed to the user when displaying this choice."""
  text: String

  """
  The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
  """
  value: String
}

"""A Gravity Forms select post_tags field."""
type PostTagsSelectField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithAutocompleteSetting & GfFieldWithChoices & GfFieldWithChoicesSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithEnhancedUISetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node & PostTagsField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """The autocomplete attribute for the field."""
  autocompleteAttribute: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """The choices for the field."""
  choices: [PostTagsSelectFieldChoice]

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """Whether autocomplete should be enabled for this field."""
  hasAutocomplete: Boolean

  """
  Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
  """
  hasChoiceValue: Boolean

  """
  When set to true, the &quot;Chosen&quot; jQuery script will be applied to this field, enabling search capabilities to Drop Down fields and a more user-friendly interface for Multi Select fields.
  """
  hasEnhancedUI: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [GfFieldInput]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""PostTagsSelectFieldChoice choice values."""
type PostTagsSelectFieldChoice implements GfFieldChoice & GfFieldChoiceWithChoicesSetting {
  """
  Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
  """
  isSelected: Boolean

  """The text to be displayed to the user when displaying this choice."""
  text: String

  """
  The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
  """
  value: String
}

"""A Gravity Forms text post_tags field."""
type PostTagsTextField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithAutocompleteSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithErrorMessageSetting & GfFieldWithInputMaskSetting & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithMaxLengthSetting & GfFieldWithPasswordFieldSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node & PostTagsField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """The autocomplete attribute for the field."""
  autocompleteAttribute: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """Whether autocomplete should be enabled for this field."""
  hasAutocomplete: Boolean

  """Whether the field has an input mask."""
  hasInputMask: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """The pattern used for the input mask."""
  inputMaskValue: String

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """
  Determines if a text field input tag should be created with a &quot;password&quot; type.
  """
  isPasswordInput: Boolean

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """
  Specifies the maximum number of characters allowed in a text or textarea (paragraph) field.
  """
  maxLength: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""A Gravity Forms post_title field."""
type PostTitleField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithErrorMessageSetting & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""Connection between the Post type and the category type"""
type PostToCategoryConnection implements CategoryConnection & Connection {
  """Edges for the PostToCategoryConnection connection"""
  edges: [PostToCategoryConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [Category!]!

  """Information about pagination in a connection."""
  pageInfo: PostToCategoryConnectionPageInfo!
}

"""An edge in a connection"""
type PostToCategoryConnectionEdge implements CategoryConnectionEdge & Edge {
  """A cursor for use in pagination"""
  cursor: String

  """The Yoast SEO Primary category"""
  isPrimary: Boolean

  """The item at the end of the edge"""
  node: Category!
}

"""Page Info on the &quot;PostToCategoryConnection&quot;"""
type PostToCategoryConnectionPageInfo implements CategoryConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the PostToCategoryConnection connection"""
input PostToCategoryConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Direction the connection should be ordered in"""
  order: OrderEnum

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomyId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the Post type and the Comment type"""
type PostToCommentConnection implements CommentConnection & Connection {
  """Edges for the PostToCommentConnection connection"""
  edges: [PostToCommentConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [Comment!]!

  """Information about pagination in a connection."""
  pageInfo: PostToCommentConnectionPageInfo!
}

"""An edge in a connection"""
type PostToCommentConnectionEdge implements CommentConnectionEdge & Edge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Comment!
}

"""Page Info on the &quot;PostToCommentConnection&quot;"""
type PostToCommentConnectionPageInfo implements CommentConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the PostToCommentConnection connection"""
input PostToCommentConnectionWhereArgs {
  """Comment author email address."""
  authorEmail: String

  """Array of author IDs to include comments for."""
  authorIn: [ID]

  """Array of author IDs to exclude comments for."""
  authorNotIn: [ID]

  """Comment author URL."""
  authorUrl: String

  """Array of comment IDs to include."""
  commentIn: [ID]

  """
  Array of IDs of users whose unapproved comments will be returned by the query regardless of status.
  """
  commentNotIn: [ID]

  """Include comments of a given type."""
  commentType: String

  """Include comments from a given array of comment types."""
  commentTypeIn: [String]

  """Exclude comments from a given array of comment types."""
  commentTypeNotIn: String

  """Content object author ID to limit results by."""
  contentAuthor: [ID]

  """Array of author IDs to retrieve comments for."""
  contentAuthorIn: [ID]

  """Array of author IDs *not* to retrieve comments for."""
  contentAuthorNotIn: [ID]

  """Limit results to those affiliated with a given content object ID."""
  contentId: ID

  """Array of content object IDs to include affiliated comments for."""
  contentIdIn: [ID]

  """Array of content object IDs to exclude affiliated comments for."""
  contentIdNotIn: [ID]

  """Content object name (i.e. slug ) to retrieve affiliated comments for."""
  contentName: String

  """Content Object parent ID to retrieve affiliated comments for."""
  contentParent: Int

  """
  Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentStatus: [PostStatusEnum]

  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [ContentTypeEnum]

  """
  Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]

  """Karma score to retrieve matching comments for."""
  karma: Int

  """The cardinality of the order of the connection"""
  order: OrderEnum

  """Field to order the comments by."""
  orderby: CommentsConnectionOrderbyEnum

  """Parent ID of comment to retrieve children of."""
  parent: Int

  """Array of parent IDs of comments to retrieve children for."""
  parentIn: [ID]

  """Array of parent IDs of comments *not* to retrieve children for."""
  parentNotIn: [ID]

  """Search term(s) to retrieve matching comments for."""
  search: String

  """Comment status to limit results by."""
  status: String

  """Include comments for a specific user ID."""
  userId: ID
}

"""Connection between the Post type and the post type"""
type PostToParentConnectionEdge implements Edge & OneToOneConnection & PostConnectionEdge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The node of the connection, without the edges"""
  node: Post! @deprecated(reason: "This content type is not hierarchical and typically will not have a parent")
}

"""Connection between the Post type and the post type"""
type PostToPostConnection implements Connection & PostConnection {
  """Edges for the PostToPostConnection connection"""
  edges: [PostToPostConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [Post!]!

  """Information about pagination in a connection."""
  pageInfo: PostToPostConnectionPageInfo!
}

"""An edge in a connection"""
type PostToPostConnectionEdge implements Edge & PostConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "This content type is not hierarchical and typically will not have ancestors")

  """The item at the end of the edge"""
  node: Post! @deprecated(reason: "This content type is not hierarchical and typically will not have ancestors")
}

"""Page Info on the &quot;PostToPostConnection&quot;"""
type PostToPostConnectionPageInfo implements PageInfo & PostConnectionPageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Connection between the Post type and the postFormat type"""
type PostToPostFormatConnection implements Connection & PostFormatConnection {
  """Edges for the PostToPostFormatConnection connection"""
  edges: [PostToPostFormatConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [PostFormat!]!

  """Information about pagination in a connection."""
  pageInfo: PostToPostFormatConnectionPageInfo!
}

"""An edge in a connection"""
type PostToPostFormatConnectionEdge implements Edge & PostFormatConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The Yoast SEO Primary post_format"""
  isPrimary: Boolean

  """The item at the end of the edge"""
  node: PostFormat!
}

"""Page Info on the &quot;PostToPostFormatConnection&quot;"""
type PostToPostFormatConnectionPageInfo implements PageInfo & PostFormatConnectionPageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the PostToPostFormatConnection connection"""
input PostToPostFormatConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Direction the connection should be ordered in"""
  order: OrderEnum

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomyId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the Post type and the post type"""
type PostToPreviewConnectionEdge implements Edge & OneToOneConnection & PostConnectionEdge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The node of the connection, without the edges"""
  node: Post!
}

"""Connection between the Post type and the post type"""
type PostToRevisionConnection implements Connection & PostConnection {
  """Edges for the PostToRevisionConnection connection"""
  edges: [PostToRevisionConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [Post!]!

  """Information about pagination in a connection."""
  pageInfo: PostToRevisionConnectionPageInfo!
}

"""An edge in a connection"""
type PostToRevisionConnectionEdge implements Edge & PostConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Post!
}

"""Page Info on the &quot;PostToRevisionConnection&quot;"""
type PostToRevisionConnectionPageInfo implements PageInfo & PostConnectionPageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the PostToRevisionConnection connection"""
input PostToRevisionConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Category ID"""
  categoryId: Int

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryIn: [ID]

  """Use Category Slug"""
  categoryName: String

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific database ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What parameter to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [PostStatusEnum]

  """Show posts with a specific status."""
  status: PostStatusEnum

  """Tag Slug"""
  tag: String

  """Use Tag ID"""
  tagId: String

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagIn: [ID]

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagNotIn: [ID]

  """Array of tag slugs, used to display objects from one tag AND another"""
  tagSlugAnd: [String]

  """Array of tag slugs, used to include objects in ANY specified tags"""
  tagSlugIn: [String]

  """Title of the object"""
  title: String
}

"""Connection between the Post type and the tag type"""
type PostToTagConnection implements Connection & TagConnection {
  """Edges for the PostToTagConnection connection"""
  edges: [PostToTagConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [Tag!]!

  """Information about pagination in a connection."""
  pageInfo: PostToTagConnectionPageInfo!
}

"""An edge in a connection"""
type PostToTagConnectionEdge implements Edge & TagConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The Yoast SEO Primary post_tag"""
  isPrimary: Boolean

  """The item at the end of the edge"""
  node: Tag!
}

"""Page Info on the &quot;PostToTagConnection&quot;"""
type PostToTagConnectionPageInfo implements PageInfo & TagConnectionPageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the PostToTagConnection connection"""
input PostToTagConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Direction the connection should be ordered in"""
  order: OrderEnum

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomyId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the Post type and the TermNode type"""
type PostToTermNodeConnection implements Connection & TermNodeConnection {
  """Edges for the PostToTermNodeConnection connection"""
  edges: [PostToTermNodeConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [TermNode!]!

  """Information about pagination in a connection."""
  pageInfo: PostToTermNodeConnectionPageInfo!
}

"""An edge in a connection"""
type PostToTermNodeConnectionEdge implements Edge & TermNodeConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: TermNode!
}

"""Page Info on the &quot;PostToTermNodeConnection&quot;"""
type PostToTermNodeConnectionPageInfo implements PageInfo & TermNodeConnectionPageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the PostToTermNodeConnection connection"""
input PostToTermNodeConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Direction the connection should be ordered in"""
  order: OrderEnum

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """The Taxonomy to filter terms by"""
  taxonomies: [TaxonomyEnum]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomyId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Details for labels of the PostType"""
type PostTypeLabelDetails {
  """Default is ‘Add New’ for both hierarchical and non-hierarchical types."""
  addNew: String

  """Label for adding a new singular item."""
  addNewItem: String

  """Label to signify all items in a submenu link."""
  allItems: String

  """Label for archives in nav menus"""
  archives: String

  """Label for the attributes meta box."""
  attributes: String

  """Label for editing a singular item."""
  editItem: String

  """Label for the Featured Image meta box title."""
  featuredImage: String

  """Label for the table views hidden heading."""
  filterItemsList: String

  """Label for the media frame button."""
  insertIntoItem: String

  """Label for the table hidden heading."""
  itemsList: String

  """Label for the table pagination hidden heading."""
  itemsListNavigation: String

  """Label for the menu name."""
  menuName: String

  """General name for the post type, usually plural."""
  name: String

  """Label for the new item page title."""
  newItem: String

  """Label used when no items are found."""
  notFound: String

  """Label used when no items are in the trash."""
  notFoundInTrash: String

  """Label used to prefix parents of hierarchical items."""
  parentItemColon: String

  """Label for removing the featured image."""
  removeFeaturedImage: String

  """Label for searching plural items."""
  searchItems: String

  """Label for setting the featured image."""
  setFeaturedImage: String

  """Name for one object of this post type."""
  singularName: String

  """Label for the media frame filter."""
  uploadedToThisItem: String

  """Label in the media frame for using a featured image."""
  useFeaturedImage: String

  """Label for viewing a singular item."""
  viewItem: String

  """Label for viewing post type archives."""
  viewItems: String
}

""""""
type PostTypeSEO {
  """"""
  breadcrumbs: [SEOPostTypeBreadcrumbs]

  """"""
  canonical: String

  """"""
  cornerstone: Boolean

  """"""
  focuskw: String

  """"""
  fullHead: String

  """"""
  metaDesc: String

  """"""
  metaKeywords: String

  """"""
  metaRobotsNofollow: String

  """"""
  metaRobotsNoindex: String

  """"""
  opengraphAuthor: String

  """"""
  opengraphDescription: String

  """"""
  opengraphImage: MediaItem

  """"""
  opengraphModifiedTime: String

  """"""
  opengraphPublishedTime: String

  """"""
  opengraphPublisher: String

  """"""
  opengraphSiteName: String

  """"""
  opengraphTitle: String

  """"""
  opengraphType: String

  """"""
  opengraphUrl: String

  """"""
  readingTime: Float

  """"""
  schema: SEOPostTypeSchema

  """"""
  title: String

  """"""
  twitterDescription: String

  """"""
  twitterImage: MediaItem

  """"""
  twitterTitle: String
}

"""Nodes that can be seen in a preview (unpublished) state."""
interface Previewable {
  """Whether the object is a node in the preview state"""
  isPreview: Boolean

  """The database id of the preview node"""
  previewRevisionDatabaseId: Int

  """Whether the object is a node in the preview state"""
  previewRevisionId: ID
}

"""A Gravity Forms calculation calculation field."""
type ProductCalculationField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithCalculationSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDescriptionSetting & GfFieldWithDisableQuantitySetting & GfFieldWithDuplicatesSetting & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & Node & ProductField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """The formula used for the number field."""
  calculationFormula: String

  """
  Specifies to how many decimal places the number should be rounded. This is available when `isCalculation` is true, but will return null if the number format is `CURRENCY` or if the calculation is set to `Do not round`.
  """
  calculationRounding: Int

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """Whether the field has the quantity property enabled."""
  hasQuantity: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """Indicates whether the number field is a calculation."""
  isCalculation: Boolean

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """Product field values."""
  productValues: ProductFieldValue

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""A Gravity Forms product field."""
interface ProductField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithCssClassSetting & GfFieldWithDescriptionSetting & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPrepopulateFieldSetting & Node {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """Product field values."""
  productValues: ProductFieldValue

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""Input fields for Product field."""
input ProductFieldInput {
  """Product price."""
  price: Float

  """Product quantity."""
  quantity: Float
}

"""The individual properties for each element of the Product value field."""
type ProductFieldValue {
  """The product name."""
  name: String

  """The product price."""
  price: String

  """The product quantity."""
  quantity: Float
}

"""A Gravity Forms hiddenproduct hiddenproduct field."""
type ProductHiddenField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithBasePriceSetting & GfFieldWithCssClassSetting & GfFieldWithDescriptionSetting & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPrepopulateFieldSetting & Node & ProductField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """The price of the product, prefixed by the currency."""
  formattedPrice: String

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """The price of the product."""
  price: Float

  """Product field values."""
  productValues: ProductFieldValue

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""A Gravity Forms price product field."""
type ProductPriceField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithErrorMessageSetting & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node & ProductField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """Product field values."""
  productValues: ProductFieldValue

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""A Gravity Forms radio product field."""
type ProductRadioField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithChoices & GfFieldWithChoicesSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithOtherChoiceSetting & GfFieldWithPersonalData & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & Node & ProductField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """The choices for the field."""
  choices: [ProductRadioFieldChoice]

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """
  Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
  """
  hasChoiceValue: Boolean

  """
  Indicates whether the &#039;Enable &quot;other&quot; choice&#039; option is checked in the editor.
  """
  hasOtherChoice: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [GfFieldInput]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """Product field values."""
  productValues: ProductFieldValue

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""ProductRadioFieldChoice choice values."""
type ProductRadioFieldChoice implements GfFieldChoice & GfFieldChoiceWithChoicesSetting & GfFieldChoiceWithOtherChoiceSetting {
  """The price associated with the choice."""
  formattedPrice: String

  """Indicates the radio button item is the “Other” choice."""
  isOtherChoice: Boolean

  """
  Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
  """
  isSelected: Boolean

  """The price associated with the choice."""
  price: Float

  """The text to be displayed to the user when displaying this choice."""
  text: String

  """
  The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
  """
  value: String
}

"""A Gravity Forms select product field."""
type ProductSelectField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithAutocompleteSetting & GfFieldWithChoices & GfFieldWithChoicesSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithEnhancedUISetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node & ProductField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """The autocomplete attribute for the field."""
  autocompleteAttribute: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """The choices for the field."""
  choices: [ProductSelectFieldChoice]

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """Whether autocomplete should be enabled for this field."""
  hasAutocomplete: Boolean

  """
  Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
  """
  hasChoiceValue: Boolean

  """
  When set to true, the &quot;Chosen&quot; jQuery script will be applied to this field, enabling search capabilities to Drop Down fields and a more user-friendly interface for Multi Select fields.
  """
  hasEnhancedUI: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [GfFieldInput]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """Product field values."""
  productValues: ProductFieldValue

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""ProductSelectFieldChoice choice values."""
type ProductSelectFieldChoice implements GfFieldChoice & GfFieldChoiceWithChoicesSetting {
  """The price associated with the choice."""
  formattedPrice: String

  """
  Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
  """
  isSelected: Boolean

  """The price associated with the choice."""
  price: Float

  """The text to be displayed to the user when displaying this choice."""
  text: String

  """
  The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
  """
  value: String
}

"""A Gravity Forms singleproduct singleproduct field."""
type ProductSingleField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithBasePriceSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDescriptionSetting & GfFieldWithDisableQuantitySetting & GfFieldWithDuplicatesSetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSingleProductInputs & Node & ProductField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """The price of the product, prefixed by the currency."""
  formattedPrice: String

  """Whether the field has the quantity property enabled."""
  hasQuantity: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [ProductSingleInputProperty]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """The price of the product."""
  price: Float

  """Product field values."""
  productValues: ProductFieldValue

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""ProductSingleInputProperty input values."""
type ProductSingleInputProperty implements GfFieldInput & GfFieldInputWithSingleProductInputs {
  """
  The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field.
  """
  id: Float

  """The label to be used for the input."""
  label: String

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  name: String
}

"""A Gravity Forms quantity field."""
interface QuantityField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithProductFieldSetting & Node {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """The product field to which the field is associated."""
  connectedProductField: ProductField

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """The id of the product field to which the field is associated."""
  productField: Int @deprecated(reason: "Use `connectedProductField` field instead.")

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""A Gravity Forms hidden quantity field."""
type QuantityHiddenField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithProductFieldSetting & Node & QuantityField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """The product field to which the field is associated."""
  connectedProductField: ProductField

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """The id of the product field to which the field is associated."""
  productField: Int @deprecated(reason: "Use `connectedProductField` field instead.")

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""A Gravity Forms number quantity field."""
type QuantityNumberField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithAutocompleteSetting & GfFieldWithCalculationSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithErrorMessageSetting & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithNumberFormatSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithProductFieldSetting & GfFieldWithRangeSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node & QuantityField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """The autocomplete attribute for the field."""
  autocompleteAttribute: String

  """The formula used for the number field."""
  calculationFormula: String

  """
  Specifies to how many decimal places the number should be rounded. This is available when `isCalculation` is true, but will return null if the number format is `CURRENCY` or if the calculation is set to `Do not round`.
  """
  calculationRounding: Int

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """The product field to which the field is associated."""
  connectedProductField: ProductField

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """Whether autocomplete should be enabled for this field."""
  hasAutocomplete: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """Indicates whether the number field is a calculation."""
  isCalculation: Boolean

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """Specifies the format allowed for the number field."""
  numberFormat: NumberFieldFormatEnum

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """The id of the product field to which the field is associated."""
  productField: Int @deprecated(reason: "Use `connectedProductField` field instead.")

  """
  Maximum allowed value for a number field. Values higher than the number specified by this property will cause the field to fail validation.
  """
  rangeMax: Float

  """
  Minimum allowed value for a number field. Values lower than the number specified by this property will cause the field to fail validation.
  """
  rangeMin: Float

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""A Gravity Forms select quantity field."""
type QuantitySelectField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithAutocompleteSetting & GfFieldWithChoices & GfFieldWithChoicesSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithEnhancedUISetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithProductFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node & QuantityField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """The autocomplete attribute for the field."""
  autocompleteAttribute: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """The choices for the field."""
  choices: [QuantitySelectFieldChoice]

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """The product field to which the field is associated."""
  connectedProductField: ProductField

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """Whether autocomplete should be enabled for this field."""
  hasAutocomplete: Boolean

  """
  Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
  """
  hasChoiceValue: Boolean

  """
  When set to true, the &quot;Chosen&quot; jQuery script will be applied to this field, enabling search capabilities to Drop Down fields and a more user-friendly interface for Multi Select fields.
  """
  hasEnhancedUI: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [GfFieldInput]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """The id of the product field to which the field is associated."""
  productField: Int @deprecated(reason: "Use `connectedProductField` field instead.")

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""QuantitySelectFieldChoice choice values."""
type QuantitySelectFieldChoice implements GfFieldChoice & GfFieldChoiceWithChoicesSetting {
  """The price associated with the choice."""
  formattedPrice: String

  """
  Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
  """
  isSelected: Boolean

  """The price associated with the choice."""
  price: Float

  """The text to be displayed to the user when displaying this choice."""
  text: String

  """
  The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
  """
  value: String
}

"""A Gravity Forms radio field."""
type RadioField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithChoices & GfFieldWithChoicesSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithOtherChoiceSetting & GfFieldWithPersonalData & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & Node {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """The choices for the field."""
  choices: [RadioFieldChoice]

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """
  Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
  """
  hasChoiceValue: Boolean

  """
  Indicates whether the &#039;Enable &quot;other&quot; choice&#039; option is checked in the editor.
  """
  hasOtherChoice: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [GfFieldInput]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""RadioFieldChoice choice values."""
type RadioFieldChoice implements GfFieldChoice & GfFieldChoiceWithChoicesSetting & GfFieldChoiceWithOtherChoiceSetting {
  """Indicates the radio button item is the “Other” choice."""
  isOtherChoice: Boolean

  """
  Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
  """
  isSelected: Boolean

  """The text to be displayed to the user when displaying this choice."""
  text: String

  """
  The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
  """
  value: String
}

"""The reading setting type"""
type ReadingSettings {
  """The ID of the page that should display the latest posts"""
  pageForPosts: Int

  """The ID of the page that should be displayed on the front page"""
  pageOnFront: Int

  """Blog pages show at most."""
  postsPerPage: Int

  """What to show on the front page"""
  showOnFront: String
}

"""Determines which version of reCAPTCHA v2 will be used. """
enum RecaptchaTypeEnum {
  """A checkbox reCAPTCHA type."""
  CHECKBOX

  """An invisible reCAPTCHA type."""
  INVISIBLE
}

"""Input for the refreshJwtAuthToken mutation."""
input RefreshJwtAuthTokenInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """
  A valid, previously issued JWT refresh token. If valid a new Auth token will be provided. If invalid, expired, revoked or otherwise invalid, a new AuthToken will not be provided.
  """
  jwtRefreshToken: String!
}

"""The payload for the refreshJwtAuthToken mutation."""
type RefreshJwtAuthTokenPayload {
  """JWT Token that can be used in future requests for Authentication"""
  authToken: String

  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
}

"""Input for the registerUser mutation."""
input RegisterUserInput {
  """User's AOL IM account."""
  aim: String

  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """A string containing content about the user."""
  description: String

  """
  A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user).
  """
  displayName: String

  """A string containing the user's email address."""
  email: String

  """	The user's first name."""
  firstName: String

  """User's Jabber account."""
  jabber: String

  """The user's last name."""
  lastName: String

  """User's locale."""
  locale: String

  """
  A string that contains a URL-friendly name for the user. The default is the user's username.
  """
  nicename: String

  """The user's nickname, defaults to the user's username."""
  nickname: String

  """A string that contains the plain text password for the user."""
  password: String

  """If true, this will refresh the users JWT secret."""
  refreshJwtUserSecret: Boolean

  """The date the user registered. Format is Y-m-d H:i:s."""
  registered: String

  """
  If true, this will revoke the users JWT secret. If false, this will unrevoke the JWT secret AND issue a new one. To revoke, the user must have proper capabilities to edit users JWT secrets.
  """
  revokeJwtUserSecret: Boolean

  """
  A string for whether to enable the rich editor or not. False if not empty.
  """
  richEditing: String

  """A string that contains the user's username."""
  username: String!

  """A string containing the user's URL for the user's web site."""
  websiteUrl: String

  """User's Yahoo IM account."""
  yim: String
}

"""The payload for the registerUser mutation."""
type RegisterUserPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The User object mutation type."""
  user: User
}

"""
The logical relation between each item in the array when there are more than one.
"""
enum RelationEnum {
  """
  The logical AND condition returns true if both operands are true, otherwise, it returns false.
  """
  AND

  """
  The logical OR condition returns false if both operands are false, otherwise, it returns true.
  """
  OR
}

"""Input for the resetUserPassword mutation."""
input ResetUserPasswordInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """Password reset key"""
  key: String

  """The user's login (username)."""
  login: String

  """The new password."""
  password: String
}

"""The payload for the resetUserPassword mutation."""
type ResetUserPasswordPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The User object mutation type."""
  user: User
}

"""Input for the restoreComment mutation."""
input RestoreCommentInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The ID of the comment to be restored"""
  id: ID!
}

"""The payload for the restoreComment mutation."""
type RestoreCommentPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The restored comment object"""
  comment: Comment

  """The ID of the restored comment"""
  restoredId: ID
}

"""The root mutation"""
type RootMutation {
  """The createCategory mutation"""
  createCategory(
    """Input for the createCategory mutation"""
    input: CreateCategoryInput!
  ): CreateCategoryPayload

  """The createComment mutation"""
  createComment(
    """Input for the createComment mutation"""
    input: CreateCommentInput!
  ): CreateCommentPayload

  """The createMediaItem mutation"""
  createMediaItem(
    """Input for the createMediaItem mutation"""
    input: CreateMediaItemInput!
  ): CreateMediaItemPayload

  """The createPage mutation"""
  createPage(
    """Input for the createPage mutation"""
    input: CreatePageInput!
  ): CreatePagePayload

  """The createPost mutation"""
  createPost(
    """Input for the createPost mutation"""
    input: CreatePostInput!
  ): CreatePostPayload

  """The createPostFormat mutation"""
  createPostFormat(
    """Input for the createPostFormat mutation"""
    input: CreatePostFormatInput!
  ): CreatePostFormatPayload

  """The createTag mutation"""
  createTag(
    """Input for the createTag mutation"""
    input: CreateTagInput!
  ): CreateTagPayload

  """The createUser mutation"""
  createUser(
    """Input for the createUser mutation"""
    input: CreateUserInput!
  ): CreateUserPayload

  """The deleteCategory mutation"""
  deleteCategory(
    """Input for the deleteCategory mutation"""
    input: DeleteCategoryInput!
  ): DeleteCategoryPayload

  """The deleteComment mutation"""
  deleteComment(
    """Input for the deleteComment mutation"""
    input: DeleteCommentInput!
  ): DeleteCommentPayload

  """The deleteGfDraftEntry mutation"""
  deleteGfDraftEntry(
    """Input for the deleteGfDraftEntry mutation"""
    input: DeleteGfDraftEntryInput!
  ): DeleteGfDraftEntryPayload

  """The deleteGfEntry mutation"""
  deleteGfEntry(
    """Input for the deleteGfEntry mutation"""
    input: DeleteGfEntryInput!
  ): DeleteGfEntryPayload

  """The deleteMediaItem mutation"""
  deleteMediaItem(
    """Input for the deleteMediaItem mutation"""
    input: DeleteMediaItemInput!
  ): DeleteMediaItemPayload

  """The deletePage mutation"""
  deletePage(
    """Input for the deletePage mutation"""
    input: DeletePageInput!
  ): DeletePagePayload

  """The deletePost mutation"""
  deletePost(
    """Input for the deletePost mutation"""
    input: DeletePostInput!
  ): DeletePostPayload

  """The deletePostFormat mutation"""
  deletePostFormat(
    """Input for the deletePostFormat mutation"""
    input: DeletePostFormatInput!
  ): DeletePostFormatPayload

  """The deleteTag mutation"""
  deleteTag(
    """Input for the deleteTag mutation"""
    input: DeleteTagInput!
  ): DeleteTagPayload

  """The deleteUser mutation"""
  deleteUser(
    """Input for the deleteUser mutation"""
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Increase the count."""
  increaseCount(
    """The count to increase"""
    count: Int
  ): Int

  """Login a user. Request for an authToken and User details in response"""
  login(
    """Input for the login mutation"""
    input: LoginInput!
  ): LoginPayload

  """Use a valid JWT Refresh token to retrieve a new JWT Auth Token"""
  refreshJwtAuthToken(
    """Input for the refreshJwtAuthToken mutation"""
    input: RefreshJwtAuthTokenInput!
  ): RefreshJwtAuthTokenPayload

  """The registerUser mutation"""
  registerUser(
    """Input for the registerUser mutation"""
    input: RegisterUserInput!
  ): RegisterUserPayload

  """The resetUserPassword mutation"""
  resetUserPassword(
    """Input for the resetUserPassword mutation"""
    input: ResetUserPasswordInput!
  ): ResetUserPasswordPayload

  """The restoreComment mutation"""
  restoreComment(
    """Input for the restoreComment mutation"""
    input: RestoreCommentInput!
  ): RestoreCommentPayload

  """Send password reset email to user"""
  sendPasswordResetEmail(
    """Input for the sendPasswordResetEmail mutation"""
    input: SendPasswordResetEmailInput!
  ): SendPasswordResetEmailPayload

  """The submitGfDraftEntry mutation"""
  submitGfDraftEntry(
    """Input for the submitGfDraftEntry mutation"""
    input: SubmitGfDraftEntryInput!
  ): SubmitGfDraftEntryPayload

  """The SubmitGfForm mutation"""
  submitGfForm(
    """Input for the SubmitGfForm mutation"""
    input: SubmitGfFormInput!
  ): SubmitGfFormPayload

  """The updateCategory mutation"""
  updateCategory(
    """Input for the updateCategory mutation"""
    input: UpdateCategoryInput!
  ): UpdateCategoryPayload

  """The updateComment mutation"""
  updateComment(
    """Input for the updateComment mutation"""
    input: UpdateCommentInput!
  ): UpdateCommentPayload

  """The updateGfDraftEntry mutation"""
  updateGfDraftEntry(
    """Input for the updateGfDraftEntry mutation"""
    input: UpdateGfDraftEntryInput!
  ): UpdateGfDraftEntryPayload

  """The updateGfEntry mutation"""
  updateGfEntry(
    """Input for the updateGfEntry mutation"""
    input: UpdateGfEntryInput!
  ): UpdateGfEntryPayload

  """The updateMediaItem mutation"""
  updateMediaItem(
    """Input for the updateMediaItem mutation"""
    input: UpdateMediaItemInput!
  ): UpdateMediaItemPayload

  """The updatePage mutation"""
  updatePage(
    """Input for the updatePage mutation"""
    input: UpdatePageInput!
  ): UpdatePagePayload

  """The updatePost mutation"""
  updatePost(
    """Input for the updatePost mutation"""
    input: UpdatePostInput!
  ): UpdatePostPayload

  """The updatePostFormat mutation"""
  updatePostFormat(
    """Input for the updatePostFormat mutation"""
    input: UpdatePostFormatInput!
  ): UpdatePostFormatPayload

  """The updateSettings mutation"""
  updateSettings(
    """Input for the updateSettings mutation"""
    input: UpdateSettingsInput!
  ): UpdateSettingsPayload

  """The updateTag mutation"""
  updateTag(
    """Input for the updateTag mutation"""
    input: UpdateTagInput!
  ): UpdateTagPayload

  """The updateUser mutation"""
  updateUser(
    """Input for the updateUser mutation"""
    input: UpdateUserInput!
  ): UpdateUserPayload
}

"""The root entry point into the Graph"""
type RootQuery {
  """Entry point to get all settings for the site"""
  allSettings: Settings

  """Connection between the RootQuery type and the category type"""
  categories(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: RootQueryToCategoryConnectionWhereArgs
  ): RootQueryToCategoryConnection

  """A 0bject"""
  category(
    """The globally unique identifier of the object."""
    id: ID!

    """Type of unique identifier to fetch by. Default is Global ID"""
    idType: CategoryIdType
  ): Category

  """Returns a Comment"""
  comment(
    """Unique identifier for the comment node."""
    id: ID!

    """Type of unique identifier to fetch a comment by. Default is Global ID"""
    idType: CommentNodeIdTypeEnum
  ): Comment

  """Connection between the RootQuery type and the Comment type"""
  comments(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: RootQueryToCommentConnectionWhereArgs
  ): RootQueryToCommentConnection

  """A node used to manage content"""
  contentNode(
    """
    Whether to return the Preview Node instead of the Published Node. When the ID of a Node is provided along with asPreview being set to true, the preview node with un-published changes will be returned instead of the published node. If no preview node exists or the requester doesn't have proper capabilities to preview, no node will be returned. If the ID provided is a URI and has a preview query arg, it will be used as a fallback if the "asPreview" argument is not explicitly provided as an argument.
    """
    asPreview: Boolean

    """
    The content type the node is used for. Required when idType is set to "name" or "slug"
    """
    contentType: ContentTypeEnum

    """Unique identifier for the content node."""
    id: ID!

    """
    Type of unique identifier to fetch a content node by. Default is Global ID
    """
    idType: ContentNodeIdTypeEnum
  ): ContentNode

  """Connection between the RootQuery type and the ContentNode type"""
  contentNodes(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: RootQueryToContentNodeConnectionWhereArgs
  ): RootQueryToContentNodeConnection

  """Fetch a Content Type node by unique Identifier"""
  contentType(
    """Unique Identifier for the Content Type node."""
    id: ID!

    """
    Type of unique identifier to fetch a content type by. Default is Global ID
    """
    idType: ContentTypeIdTypeEnum
  ): ContentType

  """Connection between the RootQuery type and the ContentType type"""
  contentTypes(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): RootQueryToContentTypeConnection

  """Fields of the &#039;DiscussionSettings&#039; settings group"""
  discussionSettings: DiscussionSettings

  """Fields of the &#039;GeneralSettings&#039; settings group"""
  generalSettings: GeneralSettings

  """Get a Gravity Forms entry."""
  gfDraftEntry(
    """Unique identifier for the object."""
    id: ID!

    """
    Type of unique identifier to fetch a content node by. Default is Global ID.
    """
    idType: DraftEntryIdTypeEnum
  ): GfDraftEntry

  """Connection between the RootQuery type and the GfEntry type"""
  gfEntries(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: RootQueryToGfEntryConnectionWhereArgs
  ): RootQueryToGfEntryConnection

  """Get a Gravity Forms entry."""
  gfEntry(
    """Unique identifier for the object."""
    id: ID!

    """
    Type of unique identifier to fetch a content node by. Default is Global ID.
    """
    idType: EntryIdTypeEnum
  ): GfEntry

  """Get a Gravity Forms form."""
  gfForm(
    """Unique identifier for the object."""
    id: ID!

    """
    Type of unique identifier to fetch a content node by. Default is Global ID.
    """
    idType: FormIdTypeEnum
  ): GfForm

  """Connection between the RootQuery type and the GfForm type"""
  gfForms(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: RootQueryToGfFormConnectionWhereArgs
  ): RootQueryToGfFormConnection

  """Gravity Forms settings."""
  gfSettings: GfSettings

  """Connection between the RootQuery type and the GfSubmittedEntry type"""
  gfSubmittedEntries(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: RootQueryToGfSubmittedEntryConnectionWhereArgs
  ): RootQueryToGfSubmittedEntryConnection

  """Get a Gravity Forms entry."""
  gfSubmittedEntry(
    """Unique identifier for the object."""
    id: ID!

    """
    Type of unique identifier to fetch a content node by. Default is Global ID.
    """
    idType: SubmittedEntryIdTypeEnum
  ): GfSubmittedEntry

  """An object of the mediaItem Type. """
  mediaItem(
    """
    Whether to return the Preview Node instead of the Published Node. When the ID of a Node is provided along with asPreview being set to true, the preview node with un-published changes will be returned instead of the published node. If no preview node exists or the requester doesn't have proper capabilities to preview, no node will be returned. If the ID provided is a URI and has a preview query arg, it will be used as a fallback if the "asPreview" argument is not explicitly provided as an argument.
    """
    asPreview: Boolean

    """The globally unique identifier of the object."""
    id: ID!

    """Type of unique identifier to fetch by. Default is Global ID"""
    idType: MediaItemIdType
  ): MediaItem

  """A mediaItem object"""
  mediaItemBy(
    """Get the mediaItem object by its global ID"""
    id: ID

    """Get the mediaItem by its database ID"""
    mediaItemId: Int

    """
    Get the mediaItem by its slug (only available for non-hierarchical types)
    """
    slug: String

    """Get the mediaItem by its uri"""
    uri: String
  ): MediaItem @deprecated(reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)")

  """Connection between the RootQuery type and the mediaItem type"""
  mediaItems(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: RootQueryToMediaItemConnectionWhereArgs
  ): RootQueryToMediaItemConnection

  """A WordPress navigation menu"""
  menu(
    """The globally unique identifier of the menu."""
    id: ID!

    """Type of unique identifier to fetch a menu by. Default is Global ID"""
    idType: MenuNodeIdTypeEnum
  ): Menu

  """A WordPress navigation menu item"""
  menuItem(
    """The globally unique identifier of the menu item."""
    id: ID!

    """
    Type of unique identifier to fetch a menu item by. Default is Global ID
    """
    idType: MenuItemNodeIdTypeEnum
  ): MenuItem

  """Connection between the RootQuery type and the MenuItem type"""
  menuItems(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: RootQueryToMenuItemConnectionWhereArgs
  ): RootQueryToMenuItemConnection

  """Connection between the RootQuery type and the Menu type"""
  menus(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: RootQueryToMenuConnectionWhereArgs
  ): RootQueryToMenuConnection

  """Fetches an object given its ID"""
  node(
    """The unique identifier of the node"""
    id: ID
  ): Node

  """Fetches an object given its Unique Resource Identifier"""
  nodeByUri(
    """
    Unique Resource Identifier in the form of a path or permalink for a node. Ex: "/hello-world"
    """
    uri: String!
  ): UniformResourceIdentifiable

  """An object of the page Type. """
  page(
    """
    Whether to return the Preview Node instead of the Published Node. When the ID of a Node is provided along with asPreview being set to true, the preview node with un-published changes will be returned instead of the published node. If no preview node exists or the requester doesn't have proper capabilities to preview, no node will be returned. If the ID provided is a URI and has a preview query arg, it will be used as a fallback if the "asPreview" argument is not explicitly provided as an argument.
    """
    asPreview: Boolean

    """The globally unique identifier of the object."""
    id: ID!

    """Type of unique identifier to fetch by. Default is Global ID"""
    idType: PageIdType
  ): Page

  """A page object"""
  pageBy(
    """Get the page object by its global ID"""
    id: ID

    """Get the page by its database ID"""
    pageId: Int

    """Get the page by its uri"""
    uri: String
  ): Page @deprecated(reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)")

  """Connection between the RootQuery type and the page type"""
  pages(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: RootQueryToPageConnectionWhereArgs
  ): RootQueryToPageConnection

  """A WordPress plugin"""
  plugin(
    """The globally unique identifier of the plugin."""
    id: ID!
  ): Plugin

  """Connection between the RootQuery type and the Plugin type"""
  plugins(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: RootQueryToPluginConnectionWhereArgs
  ): RootQueryToPluginConnection

  """An object of the post Type. """
  post(
    """
    Whether to return the Preview Node instead of the Published Node. When the ID of a Node is provided along with asPreview being set to true, the preview node with un-published changes will be returned instead of the published node. If no preview node exists or the requester doesn't have proper capabilities to preview, no node will be returned. If the ID provided is a URI and has a preview query arg, it will be used as a fallback if the "asPreview" argument is not explicitly provided as an argument.
    """
    asPreview: Boolean

    """The globally unique identifier of the object."""
    id: ID!

    """Type of unique identifier to fetch by. Default is Global ID"""
    idType: PostIdType
  ): Post

  """A post object"""
  postBy(
    """Get the post object by its global ID"""
    id: ID

    """Get the post by its database ID"""
    postId: Int

    """Get the post by its slug (only available for non-hierarchical types)"""
    slug: String

    """Get the post by its uri"""
    uri: String
  ): Post @deprecated(reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)")

  """A 0bject"""
  postFormat(
    """The globally unique identifier of the object."""
    id: ID!

    """Type of unique identifier to fetch by. Default is Global ID"""
    idType: PostFormatIdType
  ): PostFormat

  """Connection between the RootQuery type and the postFormat type"""
  postFormats(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: RootQueryToPostFormatConnectionWhereArgs
  ): RootQueryToPostFormatConnection

  """Connection between the RootQuery type and the post type"""
  posts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: RootQueryToPostConnectionWhereArgs
  ): RootQueryToPostConnection

  """Fields of the &#039;ReadingSettings&#039; settings group"""
  readingSettings: ReadingSettings

  """Connection between the RootQuery type and the EnqueuedScript type"""
  registeredScripts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): RootQueryToEnqueuedScriptConnection

  """Connection between the RootQuery type and the EnqueuedStylesheet type"""
  registeredStylesheets(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): RootQueryToEnqueuedStylesheetConnection

  """Connection between the RootQuery type and the ContentNode type"""
  revisions(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: RootQueryToRevisionsConnectionWhereArgs
  ): RootQueryToRevisionsConnection

  """Returns seo site data"""
  seo: SEOConfig

  """A 0bject"""
  tag(
    """The globally unique identifier of the object."""
    id: ID!

    """Type of unique identifier to fetch by. Default is Global ID"""
    idType: TagIdType
  ): Tag

  """Connection between the RootQuery type and the tag type"""
  tags(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: RootQueryToTagConnectionWhereArgs
  ): RootQueryToTagConnection

  """Connection between the RootQuery type and the Taxonomy type"""
  taxonomies(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): RootQueryToTaxonomyConnection

  """Fetch a Taxonomy node by unique Identifier"""
  taxonomy(
    """Unique Identifier for the Taxonomy node."""
    id: ID!

    """Type of unique identifier to fetch a taxonomy by. Default is Global ID"""
    idType: TaxonomyIdTypeEnum
  ): Taxonomy

  """A node in a taxonomy used to group and relate content nodes"""
  termNode(
    """Unique identifier for the term node."""
    id: ID!

    """
    Type of unique identifier to fetch a term node by. Default is Global ID
    """
    idType: TermNodeIdTypeEnum

    """
    The taxonomy of the tern node. Required when idType is set to "name" or "slug"
    """
    taxonomy: TaxonomyEnum
  ): TermNode

  """Connection between the RootQuery type and the TermNode type"""
  terms(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: RootQueryToTermNodeConnectionWhereArgs
  ): RootQueryToTermNodeConnection

  """A Theme object"""
  theme(
    """The globally unique identifier of the theme."""
    id: ID!
  ): Theme

  """Connection between the RootQuery type and the Theme type"""
  themes(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): RootQueryToThemeConnection

  """Returns a user"""
  user(
    """The globally unique identifier of the user."""
    id: ID!

    """Type of unique identifier to fetch a user by. Default is Global ID"""
    idType: UserNodeIdTypeEnum
  ): User

  """Returns a user role"""
  userRole(
    """The globally unique identifier of the user object."""
    id: ID!
  ): UserRole

  """Connection between the RootQuery type and the UserRole type"""
  userRoles(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): RootQueryToUserRoleConnection

  """Connection between the RootQuery type and the User type"""
  users(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: RootQueryToUserConnectionWhereArgs
  ): RootQueryToUserConnection

  """Returns the current user"""
  viewer: User

  """Fields of the &#039;WritingSettings&#039; settings group"""
  writingSettings: WritingSettings
}

"""Connection between the RootQuery type and the category type"""
type RootQueryToCategoryConnection implements CategoryConnection & Connection {
  """Edges for the RootQueryToCategoryConnection connection"""
  edges: [RootQueryToCategoryConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [Category!]!

  """Information about pagination in a connection."""
  pageInfo: RootQueryToCategoryConnectionPageInfo!
}

"""An edge in a connection"""
type RootQueryToCategoryConnectionEdge implements CategoryConnectionEdge & Edge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Category!
}

"""Page Info on the &quot;RootQueryToCategoryConnection&quot;"""
type RootQueryToCategoryConnectionPageInfo implements CategoryConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the RootQueryToCategoryConnection connection"""
input RootQueryToCategoryConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Direction the connection should be ordered in"""
  order: OrderEnum

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomyId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the RootQuery type and the Comment type"""
type RootQueryToCommentConnection implements CommentConnection & Connection {
  """Edges for the RootQueryToCommentConnection connection"""
  edges: [RootQueryToCommentConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [Comment!]!

  """Information about pagination in a connection."""
  pageInfo: RootQueryToCommentConnectionPageInfo!
}

"""An edge in a connection"""
type RootQueryToCommentConnectionEdge implements CommentConnectionEdge & Edge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Comment!
}

"""Page Info on the &quot;RootQueryToCommentConnection&quot;"""
type RootQueryToCommentConnectionPageInfo implements CommentConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the RootQueryToCommentConnection connection"""
input RootQueryToCommentConnectionWhereArgs {
  """Comment author email address."""
  authorEmail: String

  """Array of author IDs to include comments for."""
  authorIn: [ID]

  """Array of author IDs to exclude comments for."""
  authorNotIn: [ID]

  """Comment author URL."""
  authorUrl: String

  """Array of comment IDs to include."""
  commentIn: [ID]

  """
  Array of IDs of users whose unapproved comments will be returned by the query regardless of status.
  """
  commentNotIn: [ID]

  """Include comments of a given type."""
  commentType: String

  """Include comments from a given array of comment types."""
  commentTypeIn: [String]

  """Exclude comments from a given array of comment types."""
  commentTypeNotIn: String

  """Content object author ID to limit results by."""
  contentAuthor: [ID]

  """Array of author IDs to retrieve comments for."""
  contentAuthorIn: [ID]

  """Array of author IDs *not* to retrieve comments for."""
  contentAuthorNotIn: [ID]

  """Limit results to those affiliated with a given content object ID."""
  contentId: ID

  """Array of content object IDs to include affiliated comments for."""
  contentIdIn: [ID]

  """Array of content object IDs to exclude affiliated comments for."""
  contentIdNotIn: [ID]

  """Content object name (i.e. slug ) to retrieve affiliated comments for."""
  contentName: String

  """Content Object parent ID to retrieve affiliated comments for."""
  contentParent: Int

  """
  Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentStatus: [PostStatusEnum]

  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [ContentTypeEnum]

  """
  Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]

  """Karma score to retrieve matching comments for."""
  karma: Int

  """The cardinality of the order of the connection"""
  order: OrderEnum

  """Field to order the comments by."""
  orderby: CommentsConnectionOrderbyEnum

  """Parent ID of comment to retrieve children of."""
  parent: Int

  """Array of parent IDs of comments to retrieve children for."""
  parentIn: [ID]

  """Array of parent IDs of comments *not* to retrieve children for."""
  parentNotIn: [ID]

  """Search term(s) to retrieve matching comments for."""
  search: String

  """Comment status to limit results by."""
  status: String

  """Include comments for a specific user ID."""
  userId: ID
}

"""Connection between the RootQuery type and the ContentNode type"""
type RootQueryToContentNodeConnection implements Connection & ContentNodeConnection {
  """Edges for the RootQueryToContentNodeConnection connection"""
  edges: [RootQueryToContentNodeConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [ContentNode!]!

  """Information about pagination in a connection."""
  pageInfo: RootQueryToContentNodeConnectionPageInfo!
}

"""An edge in a connection"""
type RootQueryToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: ContentNode!
}

"""Page Info on the &quot;RootQueryToContentNodeConnection&quot;"""
type RootQueryToContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""
Arguments for filtering the RootQueryToContentNodeConnection connection
"""
input RootQueryToContentNodeConnectionWhereArgs {
  """The Types of content to filter"""
  contentTypes: [ContentTypeEnum]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific database ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What parameter to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [PostStatusEnum]

  """Show posts with a specific status."""
  status: PostStatusEnum

  """Title of the object"""
  title: String
}

"""Connection between the RootQuery type and the ContentType type"""
type RootQueryToContentTypeConnection implements Connection & ContentTypeConnection {
  """Edges for the RootQueryToContentTypeConnection connection"""
  edges: [RootQueryToContentTypeConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [ContentType!]!

  """Information about pagination in a connection."""
  pageInfo: RootQueryToContentTypeConnectionPageInfo!
}

"""An edge in a connection"""
type RootQueryToContentTypeConnectionEdge implements ContentTypeConnectionEdge & Edge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: ContentType!
}

"""Page Info on the &quot;RootQueryToContentTypeConnection&quot;"""
type RootQueryToContentTypeConnectionPageInfo implements ContentTypeConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Connection between the RootQuery type and the EnqueuedScript type"""
type RootQueryToEnqueuedScriptConnection implements Connection & EnqueuedScriptConnection {
  """Edges for the RootQueryToEnqueuedScriptConnection connection"""
  edges: [RootQueryToEnqueuedScriptConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [EnqueuedScript!]!

  """Information about pagination in a connection."""
  pageInfo: RootQueryToEnqueuedScriptConnectionPageInfo!
}

"""An edge in a connection"""
type RootQueryToEnqueuedScriptConnectionEdge implements Edge & EnqueuedScriptConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: EnqueuedScript!
}

"""Page Info on the &quot;RootQueryToEnqueuedScriptConnection&quot;"""
type RootQueryToEnqueuedScriptConnectionPageInfo implements EnqueuedScriptConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Connection between the RootQuery type and the EnqueuedStylesheet type"""
type RootQueryToEnqueuedStylesheetConnection implements Connection & EnqueuedStylesheetConnection {
  """Edges for the RootQueryToEnqueuedStylesheetConnection connection"""
  edges: [RootQueryToEnqueuedStylesheetConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [EnqueuedStylesheet!]!

  """Information about pagination in a connection."""
  pageInfo: RootQueryToEnqueuedStylesheetConnectionPageInfo!
}

"""An edge in a connection"""
type RootQueryToEnqueuedStylesheetConnectionEdge implements Edge & EnqueuedStylesheetConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: EnqueuedStylesheet!
}

"""Page Info on the &quot;RootQueryToEnqueuedStylesheetConnection&quot;"""
type RootQueryToEnqueuedStylesheetConnectionPageInfo implements EnqueuedStylesheetConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Connection between the RootQuery type and the GfEntry type"""
type RootQueryToGfEntryConnection implements Connection & GfEntryConnection {
  """Edges for the RootQueryToGfEntryConnection connection"""
  edges: [RootQueryToGfEntryConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [GfEntry!]!

  """Information about pagination in a connection."""
  pageInfo: RootQueryToGfEntryConnectionPageInfo!
}

"""An edge in a connection"""
type RootQueryToGfEntryConnectionEdge implements Edge & GfEntryConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: GfEntry!
}

"""Page Info on the &quot;RootQueryToGfEntryConnection&quot;"""
type RootQueryToGfEntryConnectionPageInfo implements GfEntryConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the RootQueryToGfEntryConnection connection"""
input RootQueryToGfEntryConnectionWhereArgs {
  """Date filters to apply."""
  dateFilters: EntriesDateFiltersInput

  """
  Entry status. Default is `SUBMITTED`. Currently no other types are supported.
  """
  entryType: EntryTypeEnum

  """Field-specific filters to apply."""
  fieldFilters: [EntriesFieldFiltersInput]

  """Whether to filter by ALL or ANY of the field filters. Default is ALL."""
  fieldFiltersMode: FieldFiltersModeEnum

  """
  Array of form IDs to limit the entries to. Exclude this argument to query all forms.
  """
  formIds: [ID]

  """How to sort the entries."""
  orderby: EntriesConnectionOrderbyInput

  """Entry status. Default is "ACTIVE"."""
  status: EntryStatusEnum
}

"""Connection between the RootQuery type and the GfForm type"""
type RootQueryToGfFormConnection implements Connection & GfFormConnection {
  """Edges for the RootQueryToGfFormConnection connection"""
  edges: [RootQueryToGfFormConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [GfForm!]!

  """Information about pagination in a connection."""
  pageInfo: RootQueryToGfFormConnectionPageInfo!
}

"""An edge in a connection"""
type RootQueryToGfFormConnectionEdge implements Edge & GfFormConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: GfForm!
}

"""Page Info on the &quot;RootQueryToGfFormConnection&quot;"""
type RootQueryToGfFormConnectionPageInfo implements GfFormConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the RootQueryToGfFormConnection connection"""
input RootQueryToGfFormConnectionWhereArgs {
  """
  Array of form database IDs to return. Exclude this argument to query all forms.
  """
  formIds: [ID]

  """How to sort the entries."""
  orderby: FormsConnectionOrderbyInput

  """Status of the forms to get."""
  status: FormStatusEnum
}

"""Connection between the RootQuery type and the GfSubmittedEntry type"""
type RootQueryToGfSubmittedEntryConnection implements Connection & GfSubmittedEntryConnection {
  """Edges for the RootQueryToGfSubmittedEntryConnection connection"""
  edges: [RootQueryToGfSubmittedEntryConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [GfSubmittedEntry!]!

  """Information about pagination in a connection."""
  pageInfo: RootQueryToGfSubmittedEntryConnectionPageInfo!
}

"""An edge in a connection"""
type RootQueryToGfSubmittedEntryConnectionEdge implements Edge & GfSubmittedEntryConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: GfSubmittedEntry!
}

"""Page Info on the &quot;RootQueryToGfSubmittedEntryConnection&quot;"""
type RootQueryToGfSubmittedEntryConnectionPageInfo implements GfSubmittedEntryConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""
Arguments for filtering the RootQueryToGfSubmittedEntryConnection connection
"""
input RootQueryToGfSubmittedEntryConnectionWhereArgs {
  """Date filters to apply."""
  dateFilters: EntriesDateFiltersInput

  """Field-specific filters to apply."""
  fieldFilters: [EntriesFieldFiltersInput]

  """Whether to filter by ALL or ANY of the field filters. Default is ALL."""
  fieldFiltersMode: FieldFiltersModeEnum

  """
  Array of form IDs to limit the entries to. Exclude this argument to query all forms.
  """
  formIds: [ID]

  """How to sort the entries."""
  orderby: EntriesConnectionOrderbyInput

  """Entry status. Default is "ACTIVE"."""
  status: EntryStatusEnum
}

"""Connection between the RootQuery type and the mediaItem type"""
type RootQueryToMediaItemConnection implements Connection & MediaItemConnection {
  """Edges for the RootQueryToMediaItemConnection connection"""
  edges: [RootQueryToMediaItemConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [MediaItem!]!

  """Information about pagination in a connection."""
  pageInfo: RootQueryToMediaItemConnectionPageInfo!
}

"""An edge in a connection"""
type RootQueryToMediaItemConnectionEdge implements Edge & MediaItemConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: MediaItem!
}

"""Page Info on the &quot;RootQueryToMediaItemConnection&quot;"""
type RootQueryToMediaItemConnectionPageInfo implements MediaItemConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the RootQueryToMediaItemConnection connection"""
input RootQueryToMediaItemConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific database ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What parameter to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [PostStatusEnum]

  """Show posts with a specific status."""
  status: PostStatusEnum

  """Title of the object"""
  title: String
}

"""Connection between the RootQuery type and the Menu type"""
type RootQueryToMenuConnection implements Connection & MenuConnection {
  """Edges for the RootQueryToMenuConnection connection"""
  edges: [RootQueryToMenuConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [Menu!]!

  """Information about pagination in a connection."""
  pageInfo: RootQueryToMenuConnectionPageInfo!
}

"""An edge in a connection"""
type RootQueryToMenuConnectionEdge implements Edge & MenuConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Menu!
}

"""Page Info on the &quot;RootQueryToMenuConnection&quot;"""
type RootQueryToMenuConnectionPageInfo implements MenuConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the RootQueryToMenuConnection connection"""
input RootQueryToMenuConnectionWhereArgs {
  """The database ID of the object"""
  id: Int

  """The menu location for the menu being queried"""
  location: MenuLocationEnum

  """The slug of the menu to query items for"""
  slug: String
}

"""Connection between the RootQuery type and the MenuItem type"""
type RootQueryToMenuItemConnection implements Connection & MenuItemConnection {
  """Edges for the RootQueryToMenuItemConnection connection"""
  edges: [RootQueryToMenuItemConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [MenuItem!]!

  """Information about pagination in a connection."""
  pageInfo: RootQueryToMenuItemConnectionPageInfo!
}

"""An edge in a connection"""
type RootQueryToMenuItemConnectionEdge implements Edge & MenuItemConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: MenuItem!
}

"""Page Info on the &quot;RootQueryToMenuItemConnection&quot;"""
type RootQueryToMenuItemConnectionPageInfo implements MenuItemConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the RootQueryToMenuItemConnection connection"""
input RootQueryToMenuItemConnectionWhereArgs {
  """The database ID of the object"""
  id: Int

  """The menu location for the menu being queried"""
  location: MenuLocationEnum

  """The database ID of the parent menu object"""
  parentDatabaseId: Int

  """The ID of the parent menu object"""
  parentId: ID
}

"""Connection between the RootQuery type and the page type"""
type RootQueryToPageConnection implements Connection & PageConnection {
  """Edges for the RootQueryToPageConnection connection"""
  edges: [RootQueryToPageConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [Page!]!

  """Information about pagination in a connection."""
  pageInfo: RootQueryToPageConnectionPageInfo!
}

"""An edge in a connection"""
type RootQueryToPageConnectionEdge implements Edge & PageConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Page!
}

"""Page Info on the &quot;RootQueryToPageConnection&quot;"""
type RootQueryToPageConnectionPageInfo implements PageConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the RootQueryToPageConnection connection"""
input RootQueryToPageConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific database ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What parameter to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [PostStatusEnum]

  """Show posts with a specific status."""
  status: PostStatusEnum

  """Title of the object"""
  title: String
}

"""Connection between the RootQuery type and the Plugin type"""
type RootQueryToPluginConnection implements Connection & PluginConnection {
  """Edges for the RootQueryToPluginConnection connection"""
  edges: [RootQueryToPluginConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [Plugin!]!

  """Information about pagination in a connection."""
  pageInfo: RootQueryToPluginConnectionPageInfo!
}

"""An edge in a connection"""
type RootQueryToPluginConnectionEdge implements Edge & PluginConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Plugin!
}

"""Page Info on the &quot;RootQueryToPluginConnection&quot;"""
type RootQueryToPluginConnectionPageInfo implements PageInfo & PluginConnectionPageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the RootQueryToPluginConnection connection"""
input RootQueryToPluginConnectionWhereArgs {
  """Show plugin based on a keyword search."""
  search: String

  """Retrieve plugins where plugin status is in an array."""
  stati: [PluginStatusEnum]

  """Show plugins with a specific status."""
  status: PluginStatusEnum
}

"""Connection between the RootQuery type and the post type"""
type RootQueryToPostConnection implements Connection & PostConnection {
  """Edges for the RootQueryToPostConnection connection"""
  edges: [RootQueryToPostConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [Post!]!

  """Information about pagination in a connection."""
  pageInfo: RootQueryToPostConnectionPageInfo!
}

"""An edge in a connection"""
type RootQueryToPostConnectionEdge implements Edge & PostConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Post!
}

"""Page Info on the &quot;RootQueryToPostConnection&quot;"""
type RootQueryToPostConnectionPageInfo implements PageInfo & PostConnectionPageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the RootQueryToPostConnection connection"""
input RootQueryToPostConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Category ID"""
  categoryId: Int

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryIn: [ID]

  """Use Category Slug"""
  categoryName: String

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific database ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What parameter to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [PostStatusEnum]

  """Show posts with a specific status."""
  status: PostStatusEnum

  """Tag Slug"""
  tag: String

  """Use Tag ID"""
  tagId: String

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagIn: [ID]

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagNotIn: [ID]

  """Array of tag slugs, used to display objects from one tag AND another"""
  tagSlugAnd: [String]

  """Array of tag slugs, used to include objects in ANY specified tags"""
  tagSlugIn: [String]

  """Title of the object"""
  title: String
}

"""Connection between the RootQuery type and the postFormat type"""
type RootQueryToPostFormatConnection implements Connection & PostFormatConnection {
  """Edges for the RootQueryToPostFormatConnection connection"""
  edges: [RootQueryToPostFormatConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [PostFormat!]!

  """Information about pagination in a connection."""
  pageInfo: RootQueryToPostFormatConnectionPageInfo!
}

"""An edge in a connection"""
type RootQueryToPostFormatConnectionEdge implements Edge & PostFormatConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: PostFormat!
}

"""Page Info on the &quot;RootQueryToPostFormatConnection&quot;"""
type RootQueryToPostFormatConnectionPageInfo implements PageInfo & PostFormatConnectionPageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the RootQueryToPostFormatConnection connection"""
input RootQueryToPostFormatConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Direction the connection should be ordered in"""
  order: OrderEnum

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomyId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the RootQuery type and the ContentNode type"""
type RootQueryToRevisionsConnection implements Connection & ContentNodeConnection {
  """Edges for the RootQueryToRevisionsConnection connection"""
  edges: [RootQueryToRevisionsConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [ContentNode!]!

  """Information about pagination in a connection."""
  pageInfo: RootQueryToRevisionsConnectionPageInfo!
}

"""An edge in a connection"""
type RootQueryToRevisionsConnectionEdge implements ContentNodeConnectionEdge & Edge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: ContentNode!
}

"""Page Info on the &quot;RootQueryToRevisionsConnection&quot;"""
type RootQueryToRevisionsConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the RootQueryToRevisionsConnection connection"""
input RootQueryToRevisionsConnectionWhereArgs {
  """The Types of content to filter"""
  contentTypes: [ContentTypeEnum]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific database ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What parameter to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [PostStatusEnum]

  """Show posts with a specific status."""
  status: PostStatusEnum

  """Title of the object"""
  title: String
}

"""Connection between the RootQuery type and the tag type"""
type RootQueryToTagConnection implements Connection & TagConnection {
  """Edges for the RootQueryToTagConnection connection"""
  edges: [RootQueryToTagConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [Tag!]!

  """Information about pagination in a connection."""
  pageInfo: RootQueryToTagConnectionPageInfo!
}

"""An edge in a connection"""
type RootQueryToTagConnectionEdge implements Edge & TagConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Tag!
}

"""Page Info on the &quot;RootQueryToTagConnection&quot;"""
type RootQueryToTagConnectionPageInfo implements PageInfo & TagConnectionPageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the RootQueryToTagConnection connection"""
input RootQueryToTagConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Direction the connection should be ordered in"""
  order: OrderEnum

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomyId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the RootQuery type and the Taxonomy type"""
type RootQueryToTaxonomyConnection implements Connection & TaxonomyConnection {
  """Edges for the RootQueryToTaxonomyConnection connection"""
  edges: [RootQueryToTaxonomyConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [Taxonomy!]!

  """Information about pagination in a connection."""
  pageInfo: RootQueryToTaxonomyConnectionPageInfo!
}

"""An edge in a connection"""
type RootQueryToTaxonomyConnectionEdge implements Edge & TaxonomyConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Taxonomy!
}

"""Page Info on the &quot;RootQueryToTaxonomyConnection&quot;"""
type RootQueryToTaxonomyConnectionPageInfo implements PageInfo & TaxonomyConnectionPageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Connection between the RootQuery type and the TermNode type"""
type RootQueryToTermNodeConnection implements Connection & TermNodeConnection {
  """Edges for the RootQueryToTermNodeConnection connection"""
  edges: [RootQueryToTermNodeConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [TermNode!]!

  """Information about pagination in a connection."""
  pageInfo: RootQueryToTermNodeConnectionPageInfo!
}

"""An edge in a connection"""
type RootQueryToTermNodeConnectionEdge implements Edge & TermNodeConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: TermNode!
}

"""Page Info on the &quot;RootQueryToTermNodeConnection&quot;"""
type RootQueryToTermNodeConnectionPageInfo implements PageInfo & TermNodeConnectionPageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the RootQueryToTermNodeConnection connection"""
input RootQueryToTermNodeConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Direction the connection should be ordered in"""
  order: OrderEnum

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """The Taxonomy to filter terms by"""
  taxonomies: [TaxonomyEnum]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomyId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the RootQuery type and the Theme type"""
type RootQueryToThemeConnection implements Connection & ThemeConnection {
  """Edges for the RootQueryToThemeConnection connection"""
  edges: [RootQueryToThemeConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [Theme!]!

  """Information about pagination in a connection."""
  pageInfo: RootQueryToThemeConnectionPageInfo!
}

"""An edge in a connection"""
type RootQueryToThemeConnectionEdge implements Edge & ThemeConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Theme!
}

"""Page Info on the &quot;RootQueryToThemeConnection&quot;"""
type RootQueryToThemeConnectionPageInfo implements PageInfo & ThemeConnectionPageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Connection between the RootQuery type and the User type"""
type RootQueryToUserConnection implements Connection & UserConnection {
  """Edges for the RootQueryToUserConnection connection"""
  edges: [RootQueryToUserConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [User!]!

  """Information about pagination in a connection."""
  pageInfo: RootQueryToUserConnectionPageInfo!
}

"""An edge in a connection"""
type RootQueryToUserConnectionEdge implements Edge & UserConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: User!
}

"""Page Info on the &quot;RootQueryToUserConnection&quot;"""
type RootQueryToUserConnectionPageInfo implements PageInfo & UserConnectionPageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the RootQueryToUserConnection connection"""
input RootQueryToUserConnectionWhereArgs {
  """Array of userIds to exclude."""
  exclude: [Int]

  """
  Pass an array of post types to filter results to users who have published posts in those post types.
  """
  hasPublishedPosts: [ContentTypeEnum]

  """Array of userIds to include."""
  include: [Int]

  """The user login."""
  login: String

  """
  An array of logins to include. Users matching one of these logins will be included in results.
  """
  loginIn: [String]

  """
  An array of logins to exclude. Users matching one of these logins will not be included in results.
  """
  loginNotIn: [String]

  """The user nicename."""
  nicename: String

  """
  An array of nicenames to include. Users matching one of these nicenames will be included in results.
  """
  nicenameIn: [String]

  """
  An array of nicenames to exclude. Users matching one of these nicenames will not be included in results.
  """
  nicenameNotIn: [String]

  """What parameter to use to order the objects by."""
  orderby: [UsersConnectionOrderbyInput]

  """
  An array of role names that users must match to be included in results. Note that this is an inclusive list: users must match *each* role.
  """
  role: UserRoleEnum

  """
  An array of role names. Matched users must have at least one of these roles.
  """
  roleIn: [UserRoleEnum]

  """
  An array of role names to exclude. Users matching one or more of these roles will not be included in results.
  """
  roleNotIn: [UserRoleEnum]

  """
  Search keyword. Searches for possible string matches on columns. When "searchColumns" is left empty, it tries to determine which column to search in based on search string.
  """
  search: String

  """
  Array of column names to be searched. Accepts 'ID', 'login', 'nicename', 'email', 'url'.
  """
  searchColumns: [UsersConnectionSearchColumnEnum]
}

"""Connection between the RootQuery type and the UserRole type"""
type RootQueryToUserRoleConnection implements Connection & UserRoleConnection {
  """Edges for the RootQueryToUserRoleConnection connection"""
  edges: [RootQueryToUserRoleConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [UserRole!]!

  """Information about pagination in a connection."""
  pageInfo: RootQueryToUserRoleConnectionPageInfo!
}

"""An edge in a connection"""
type RootQueryToUserRoleConnectionEdge implements Edge & UserRoleConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: UserRole!
}

"""Page Info on the &quot;RootQueryToUserRoleConnection&quot;"""
type RootQueryToUserRoleConnectionPageInfo implements PageInfo & UserRoleConnectionPageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""The Yoast SEO breadcrumb config"""
type SEOBreadcrumbs {
  """"""
  archivePrefix: String

  """"""
  boldLast: Boolean

  """"""
  enabled: Boolean

  """"""
  homeText: String

  """"""
  notFoundText: String

  """"""
  prefix: String

  """"""
  searchPrefix: String

  """"""
  separator: String

  """"""
  showBlogPage: Boolean
}

"""Types of cards"""
enum SEOCardType {
  summary
  summary_large_image
}

"""The Yoast SEO site level configuration data"""
type SEOConfig {
  """"""
  breadcrumbs: SEOBreadcrumbs

  """"""
  contentTypes: SEOContentTypes

  """"""
  meta: SEOGlobalMeta

  """"""
  openGraph: SEOOpenGraph

  """"""
  redirects: [SEORedirect]

  """"""
  schema: SEOSchema

  """"""
  social: SEOSocial

  """"""
  webmaster: SEOWebmaster
}

"""The Yoast SEO search appearance content types fields"""
type SEOContentType {
  """"""
  archive: SEOContentTypeArchive

  """"""
  metaDesc: String

  """"""
  metaRobotsNoindex: Boolean

  """"""
  schema: SEOPageInfoSchema

  """"""
  schemaType: String

  """"""
  title: String
}

"""The Yoast SEO search appearance content types fields"""
type SEOContentTypeArchive {
  """"""
  archiveLink: String

  """"""
  breadcrumbTitle: String

  """"""
  fullHead: String

  """"""
  hasArchive: Boolean

  """"""
  metaDesc: String

  """"""
  metaRobotsFollow: String

  """"""
  metaRobotsIndex: String

  """"""
  metaRobotsNofollow: Boolean

  """"""
  metaRobotsNoindex: Boolean

  """"""
  title: String
}

"""The Yoast SEO search appearance content types"""
type SEOContentTypes {
  """"""
  mediaItem: SEOContentType

  """"""
  page: SEOContentType

  """"""
  post: SEOContentType
}

"""The Yoast SEO meta data"""
type SEOGlobalMeta {
  """"""
  author: SEOGlobalMetaAuthor

  """"""
  config: SEOGlobalMetaConfig

  """"""
  date: SEOGlobalMetaDate

  """"""
  homepage: SEOGlobalMetaHome

  """"""
  notFound: SEOGlobalMeta404
}

"""The Yoast SEO meta 404 data"""
type SEOGlobalMeta404 {
  """"""
  breadcrumb: String

  """"""
  title: String
}

"""The Yoast SEO Author data"""
type SEOGlobalMetaAuthor {
  """"""
  description: String

  """"""
  title: String
}

"""The Yoast SEO meta config data"""
type SEOGlobalMetaConfig {
  """"""
  separator: String
}

"""The Yoast SEO Date data"""
type SEOGlobalMetaDate {
  """"""
  description: String

  """"""
  title: String
}

"""The Yoast SEO homepage data"""
type SEOGlobalMetaHome {
  """"""
  description: String

  """"""
  title: String
}

"""The Open Graph data"""
type SEOOpenGraph {
  """"""
  defaultImage: MediaItem

  """"""
  frontPage: SEOOpenGraphFrontPage
}

"""The Open Graph Front page data"""
type SEOOpenGraphFrontPage {
  """"""
  description: String

  """"""
  image: MediaItem

  """"""
  title: String
}

"""The Schema for post type"""
type SEOPageInfoSchema {
  """"""
  raw: String
}

""""""
type SEOPostTypeBreadcrumbs {
  """"""
  text: String

  """"""
  url: String
}

"""The page info SEO details"""
type SEOPostTypePageInfo {
  """"""
  schema: SEOPageInfoSchema
}

"""The Schema types"""
type SEOPostTypeSchema {
  """"""
  articleType: [String]

  """"""
  pageType: [String]

  """"""
  raw: String
}

"""The Yoast redirect data  (Yoast Premium only)"""
type SEORedirect {
  """"""
  format: String

  """"""
  origin: String

  """"""
  target: String

  """"""
  type: Int
}

"""The Yoast SEO schema data"""
type SEOSchema {
  """"""
  companyLogo: MediaItem

  """"""
  companyName: String

  """"""
  companyOrPerson: String

  """"""
  homeUrl: String

  """"""
  inLanguage: String

  """"""
  logo: MediaItem

  """"""
  personLogo: MediaItem

  """"""
  personName: String

  """"""
  siteName: String

  """"""
  siteUrl: String

  """"""
  wordpressSiteName: String
}

"""The Yoast SEO Social media links"""
type SEOSocial {
  """"""
  facebook: SEOSocialFacebook

  """"""
  instagram: SEOSocialInstagram

  """"""
  linkedIn: SEOSocialLinkedIn

  """"""
  mySpace: SEOSocialMySpace

  """"""
  otherSocials: [String]

  """"""
  pinterest: SEOSocialPinterest

  """"""
  twitter: SEOSocialTwitter

  """"""
  wikipedia: SEOSocialWikipedia

  """"""
  youTube: SEOSocialYoutube
}

""""""
type SEOSocialFacebook {
  """"""
  defaultImage: MediaItem

  """"""
  url: String
}

""""""
type SEOSocialInstagram {
  """"""
  url: String
}

""""""
type SEOSocialLinkedIn {
  """"""
  url: String
}

""""""
type SEOSocialMySpace {
  """"""
  url: String
}

""""""
type SEOSocialPinterest {
  """"""
  metaTag: String

  """"""
  url: String
}

""""""
type SEOSocialTwitter {
  """"""
  cardType: SEOCardType

  """"""
  username: String
}

""""""
type SEOSocialWikipedia {
  """"""
  url: String
}

""""""
type SEOSocialYoutube {
  """"""
  url: String
}

"""The Schema types for Taxonomy"""
type SEOTaxonomySchema {
  """"""
  raw: String
}

""""""
type SEOUser {
  """"""
  breadcrumbTitle: String

  """"""
  canonical: String

  """"""
  fullHead: String

  """"""
  language: String

  """"""
  metaDesc: String

  """"""
  metaRobotsNofollow: String

  """"""
  metaRobotsNoindex: String

  """"""
  opengraphDescription: String

  """"""
  opengraphImage: MediaItem

  """"""
  opengraphTitle: String

  """"""
  region: String

  """"""
  schema: SEOUserSchema

  """"""
  social: SEOUserSocial

  """"""
  title: String

  """"""
  twitterDescription: String

  """"""
  twitterImage: MediaItem

  """"""
  twitterTitle: String
}

"""The Schema types for User"""
type SEOUserSchema {
  """"""
  articleType: [String]

  """"""
  pageType: [String]

  """"""
  raw: String
}

""""""
type SEOUserSocial {
  """"""
  facebook: String

  """"""
  instagram: String

  """"""
  linkedIn: String

  """"""
  mySpace: String

  """"""
  pinterest: String

  """"""
  soundCloud: String

  """"""
  twitter: String

  """"""
  wikipedia: String

  """"""
  youTube: String
}

"""The Yoast SEO  webmaster fields"""
type SEOWebmaster {
  """"""
  baiduVerify: String

  """"""
  googleVerify: String

  """"""
  msVerify: String

  """"""
  yandexVerify: String
}

"""The strategy to use when loading the script"""
enum ScriptLoadingStrategyEnum {
  """Use the script `async` attribute"""
  ASYNC

  """Use the script `defer` attribute"""
  DEFER
}

"""A Gravity Forms section field."""
type SectionField implements FormField & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDescriptionSetting & GfFieldWithLabelSetting & Node {
  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """Field description."""
  description: String

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""A Gravity Forms select field."""
type SelectField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithAutocompleteSetting & GfFieldWithChoices & GfFieldWithChoicesSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithEnhancedUISetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """The autocomplete attribute for the field."""
  autocompleteAttribute: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """The choices for the field."""
  choices: [SelectFieldChoice]

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """Whether autocomplete should be enabled for this field."""
  hasAutocomplete: Boolean

  """
  Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
  """
  hasChoiceValue: Boolean

  """
  When set to true, the &quot;Chosen&quot; jQuery script will be applied to this field, enabling search capabilities to Drop Down fields and a more user-friendly interface for Multi Select fields.
  """
  hasEnhancedUI: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [GfFieldInput]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""SelectFieldChoice choice values."""
type SelectFieldChoice implements GfFieldChoice & GfFieldChoiceWithChoicesSetting {
  """
  Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
  """
  isSelected: Boolean

  """The text to be displayed to the user when displaying this choice."""
  text: String

  """
  The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
  """
  value: String
}

"""Input for the sendPasswordResetEmail mutation."""
input SendPasswordResetEmailInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """A string that contains the user's username or email address."""
  username: String!
}

"""The payload for the sendPasswordResetEmail mutation."""
type SendPasswordResetEmailPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """
  Whether the mutation completed successfully. This does NOT necessarily mean that an email was sent.
  """
  success: Boolean

  """The user that the password reset email was sent to"""
  user: User @deprecated(reason: "This field will be removed in a future version of WPGraphQL")
}

"""All of the registered settings"""
type Settings {
  """Settings of the the string Settings Group"""
  discussionSettingsDefaultCommentStatus: String

  """Settings of the the string Settings Group"""
  discussionSettingsDefaultPingStatus: String

  """Settings of the the string Settings Group"""
  generalSettingsDateFormat: String

  """Settings of the the string Settings Group"""
  generalSettingsDescription: String

  """Settings of the the string Settings Group"""
  generalSettingsEmail: String

  """Settings of the the string Settings Group"""
  generalSettingsLanguage: String

  """Settings of the the integer Settings Group"""
  generalSettingsStartOfWeek: Int

  """Settings of the the string Settings Group"""
  generalSettingsTimeFormat: String

  """Settings of the the string Settings Group"""
  generalSettingsTimezone: String

  """Settings of the the string Settings Group"""
  generalSettingsTitle: String

  """Settings of the the string Settings Group"""
  generalSettingsUrl: String

  """Settings of the the integer Settings Group"""
  readingSettingsPageForPosts: Int

  """Settings of the the integer Settings Group"""
  readingSettingsPageOnFront: Int

  """Settings of the the integer Settings Group"""
  readingSettingsPostsPerPage: Int

  """Settings of the the string Settings Group"""
  readingSettingsShowOnFront: String

  """Settings of the the integer Settings Group"""
  writingSettingsDefaultCategory: Int

  """Settings of the the string Settings Group"""
  writingSettingsDefaultPostFormat: String

  """Settings of the the boolean Settings Group"""
  writingSettingsUseSmilies: Boolean
}

"""A Gravity Forms shipping field."""
interface ShippingField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDescriptionSetting & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPrepopulateFieldSetting & Node {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""A Gravity Forms radio shipping field."""
type ShippingRadioField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithChoices & GfFieldWithChoicesSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithOtherChoiceSetting & GfFieldWithPersonalData & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & Node & ShippingField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """The choices for the field."""
  choices: [ShippingRadioFieldChoice]

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """
  Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
  """
  hasChoiceValue: Boolean

  """
  Indicates whether the &#039;Enable &quot;other&quot; choice&#039; option is checked in the editor.
  """
  hasOtherChoice: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [GfFieldInput]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""ShippingRadioFieldChoice choice values."""
type ShippingRadioFieldChoice implements GfFieldChoice & GfFieldChoiceWithChoicesSetting & GfFieldChoiceWithOtherChoiceSetting {
  """The price associated with the choice."""
  formattedPrice: String

  """Indicates the radio button item is the “Other” choice."""
  isOtherChoice: Boolean

  """
  Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
  """
  isSelected: Boolean

  """The price associated with the choice."""
  price: Float

  """The text to be displayed to the user when displaying this choice."""
  text: String

  """
  The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
  """
  value: String
}

"""A Gravity Forms select shipping field."""
type ShippingSelectField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithAutocompleteSetting & GfFieldWithChoices & GfFieldWithChoicesSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithEnhancedUISetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node & ShippingField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """The autocomplete attribute for the field."""
  autocompleteAttribute: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """The choices for the field."""
  choices: [ShippingSelectFieldChoice]

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """Whether autocomplete should be enabled for this field."""
  hasAutocomplete: Boolean

  """
  Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
  """
  hasChoiceValue: Boolean

  """
  When set to true, the &quot;Chosen&quot; jQuery script will be applied to this field, enabling search capabilities to Drop Down fields and a more user-friendly interface for Multi Select fields.
  """
  hasEnhancedUI: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [GfFieldInput]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""ShippingSelectFieldChoice choice values."""
type ShippingSelectFieldChoice implements GfFieldChoice & GfFieldChoiceWithChoicesSetting {
  """The price associated with the choice."""
  formattedPrice: String

  """
  Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
  """
  isSelected: Boolean

  """The price associated with the choice."""
  price: Float

  """The text to be displayed to the user when displaying this choice."""
  text: String

  """
  The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
  """
  value: String
}

"""A Gravity Forms singleshipping singleshipping field."""
type ShippingSingleField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithBasePriceSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDescriptionSetting & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPrepopulateFieldSetting & Node & ShippingField {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """The price of the product, prefixed by the currency."""
  formattedPrice: String

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """The price of the product."""
  price: Float

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""
The Confirmation object returned on submission. Null if the submission was not successful.
"""
type SubmissionConfirmation {
  """
  Contains the confirmation message HTML to display. Only applicable when type is set to `MESSAGE`.
  """
  message: String

  """
  The page that the browser will be redirected to. Only applicable when type is set to `PAGE`.
  """
  page: SubmissionConfirmationToPageConnectionEdge

  """
  Contains the Id of the WordPress page that the browser will be redirected to. Only applicable when type is set to `PAGE`.
  """
  pageId: Int

  """
  Contains the query string to be appended to the redirection url. Only applicable when type is set to `REDIRECT` or `PAGE` .
  """
  queryString: String

  """Determines the type of confirmation to be used."""
  type: SubmissionConfirmationTypeEnum

  """
  The URL the submission should redirect to. Only applicable when type is set to `REDIRECT`.
  """
  url: String
}

"""Connection between the SubmissionConfirmation type and the Page type"""
type SubmissionConfirmationToPageConnectionEdge implements Edge & OneToOneConnection & PageConnectionEdge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The node of the connection, without the edges"""
  node: Page!
}

"""Type of confirmation returned by the submission."""
enum SubmissionConfirmationTypeEnum {
  """A confirmation "message"."""
  MESSAGE

  """A "redirect" to a given URL."""
  REDIRECT
}

"""Entry meta input fields for submitting Gravity Forms forms."""
input SubmitFormMetaInput {
  """
  ID of the user that submitted of the form if a logged in user submitted the form.
  """
  createdById: Int

  """The UTC date the entry was created, in `Y-m-d H:i:s` format."""
  dateCreatedGmt: String

  """Client IP of user who submitted the form."""
  ip: String

  """Used to overwrite the sourceUrl the form was submitted from."""
  sourceUrl: String

  """
  The name and version of both the browser and operating system from which the entry was submitted.
  """
  userAgent: String
}

"""Input for the submitGfDraftEntry mutation."""
input SubmitGfDraftEntryInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """Either the global ID of the draft entry, or its resume token."""
  id: ID!

  """The ID type for the draft entry. Defaults to `ID` ."""
  idType: DraftEntryIdTypeEnum
}

"""The payload for the submitGfDraftEntry mutation."""
type SubmitGfDraftEntryPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The form confirmation data. Null if the submission has `errors`"""
  confirmation: SubmissionConfirmation

  """The entry that was created."""
  entry: GfSubmittedEntry

  """Field errors."""
  errors: [FieldError]
}

"""Input for the SubmitGfForm mutation."""
input SubmitGfFormInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The entry meta associated with the submission."""
  entryMeta: SubmitFormMetaInput

  """The field ids and their values."""
  fieldValues: [FormFieldValuesInput]!

  """The form ID. Accepts either a global or Database ID."""
  id: ID!

  """Set to `true` if submitting a draft entry. Defaults to `false`."""
  saveAsDraft: Boolean

  """
  Useful for multi-page forms to indicate which page of the form was just submitted.
  """
  sourcePage: Int

  """
  Useful for multi-page forms to indicate which page is to be loaded if the current page passes validation.
  """
  targetPage: Int
}

"""The payload for the SubmitGfForm mutation."""
type SubmitGfFormPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The form confirmation data. Null if the submission has `errors`"""
  confirmation: SubmissionConfirmation

  """The entry that was created."""
  entry: GfEntry

  """Field errors."""
  errors: [FieldError]

  """
  Draft resume URL. Null if submitting an entry. If the &quot;Referer&quot; header is not included in the request, this will be an empty string.
  """
  resumeUrl: String

  """Connection between the SubmitGfFormPayload type and the FormField type"""
  targetPageFormFields(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): SubmitGfFormPayloadToFormFieldConnection

  """
  The page number of the form that should be displayed after submission. This will be different than the `targetPage` provided to the mutation if a field on a previous field failed validation.
  """
  targetPageNumber: Int
}

"""Connection between the SubmitGfFormPayload type and the FormField type"""
type SubmitGfFormPayloadToFormFieldConnection implements Connection & FormFieldConnection {
  """Edges for the SubmitGfFormPayloadToFormFieldConnection connection"""
  edges: [SubmitGfFormPayloadToFormFieldConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [FormField!]!

  """Information about pagination in a connection."""
  pageInfo: SubmitGfFormPayloadToFormFieldConnectionPageInfo!
}

"""An edge in a connection"""
type SubmitGfFormPayloadToFormFieldConnectionEdge implements Edge & FormFieldConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: FormField!
}

"""Page Info on the &quot;SubmitGfFormPayloadToFormFieldConnection&quot;"""
type SubmitGfFormPayloadToFormFieldConnectionPageInfo implements FormFieldConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""The Type of Identifier used to fetch a single resource."""
enum SubmittedEntryIdTypeEnum {
  """The database ID assigned by Gravity Forms. Used by submitted entries."""
  DATABASE_ID

  """Unique global ID for the object."""
  ID
}

"""
The &quot;Table&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;.
"""
type Table implements AcfFieldGroup & AcfFieldGroupFields & Table_Fields {
  """The name of the field group"""
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
}

"""Interface representing fields of the ACF &quot;Table&quot; Field Group"""
interface Table_Fields implements AcfFieldGroup & AcfFieldGroupFields {
  """The name of the field group"""
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
}

"""The tag type"""
type Tag implements DatabaseIdentifier & MenuItemLinkable & Node & TermNode & UniformResourceIdentifiable {
  """Connection between the Tag type and the ContentNode type"""
  contentNodes(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: TagToContentNodeConnectionWhereArgs
  ): TagToContentNodeConnection

  """The number of objects connected to the object"""
  count: Int

  """The unique identifier stored in the database"""
  databaseId: Int!

  """The description of the object"""
  description: String

  """Connection between the TermNode type and the EnqueuedScript type"""
  enqueuedScripts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): TermNodeToEnqueuedScriptConnection

  """Connection between the TermNode type and the EnqueuedStylesheet type"""
  enqueuedStylesheets(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): TermNodeToEnqueuedStylesheetConnection

  """The globally unique ID for the object"""
  id: ID!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The link to the term"""
  link: String

  """The human friendly name of the object."""
  name: String

  """Connection between the Tag type and the post type"""
  posts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: TagToPostConnectionWhereArgs
  ): TagToPostConnection

  """The Yoast SEO data of the Tags taxonomy."""
  seo: TaxonomySEO

  """An alphanumeric identifier for the object unique to its type."""
  slug: String

  """The id field matches the WP_Post-&gt;ID field."""
  tagId: Int @deprecated(reason: "Deprecated in favor of databaseId")

  """Connection between the Tag type and the Taxonomy type"""
  taxonomy: TagToTaxonomyConnectionEdge

  """The name of the taxonomy that the object is associated with"""
  taxonomyName: String

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int

  """The unique resource identifier path"""
  uri: String
}

"""Connection to tag Nodes"""
interface TagConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected tag Nodes
  """
  edges: [TagConnectionEdge!]!

  """A list of connected tag Nodes"""
  nodes: [Tag!]!

  """Information about pagination in a connection."""
  pageInfo: TagConnectionPageInfo!
}

"""Edge between a Node and a connected tag"""
interface TagConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The connected tag Node"""
  node: Tag!
}

"""Page Info on the connected TagConnectionEdge"""
interface TagConnectionPageInfo implements PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""The Type of Identifier used to fetch a single resource. Default is ID."""
enum TagIdType {
  """The Database ID for the node"""
  DATABASE_ID

  """The hashed Global ID"""
  ID

  """The name of the node"""
  NAME

  """Url friendly name of the node"""
  SLUG

  """The URI for the node"""
  URI
}

"""Connection between the Tag type and the ContentNode type"""
type TagToContentNodeConnection implements Connection & ContentNodeConnection {
  """Edges for the TagToContentNodeConnection connection"""
  edges: [TagToContentNodeConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [ContentNode!]!

  """Information about pagination in a connection."""
  pageInfo: TagToContentNodeConnectionPageInfo!
}

"""An edge in a connection"""
type TagToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: ContentNode!
}

"""Page Info on the &quot;TagToContentNodeConnection&quot;"""
type TagToContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the TagToContentNodeConnection connection"""
input TagToContentNodeConnectionWhereArgs {
  """The Types of content to filter"""
  contentTypes: [ContentTypesOfTagEnum]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific database ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What parameter to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [PostStatusEnum]

  """Show posts with a specific status."""
  status: PostStatusEnum

  """Title of the object"""
  title: String
}

"""Connection between the Tag type and the post type"""
type TagToPostConnection implements Connection & PostConnection {
  """Edges for the TagToPostConnection connection"""
  edges: [TagToPostConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [Post!]!

  """Information about pagination in a connection."""
  pageInfo: TagToPostConnectionPageInfo!
}

"""An edge in a connection"""
type TagToPostConnectionEdge implements Edge & PostConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Post!
}

"""Page Info on the &quot;TagToPostConnection&quot;"""
type TagToPostConnectionPageInfo implements PageInfo & PostConnectionPageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the TagToPostConnection connection"""
input TagToPostConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Category ID"""
  categoryId: Int

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryIn: [ID]

  """Use Category Slug"""
  categoryName: String

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific database ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What parameter to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [PostStatusEnum]

  """Show posts with a specific status."""
  status: PostStatusEnum

  """Tag Slug"""
  tag: String

  """Use Tag ID"""
  tagId: String

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagIn: [ID]

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagNotIn: [ID]

  """Array of tag slugs, used to display objects from one tag AND another"""
  tagSlugAnd: [String]

  """Array of tag slugs, used to include objects in ANY specified tags"""
  tagSlugIn: [String]

  """Title of the object"""
  title: String
}

"""Connection between the Tag type and the Taxonomy type"""
type TagToTaxonomyConnectionEdge implements Edge & OneToOneConnection & TaxonomyConnectionEdge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The node of the connection, without the edges"""
  node: Taxonomy!
}

"""A taxonomy object"""
type Taxonomy implements Node {
  """List of Content Types associated with the Taxonomy"""
  connectedContentTypes(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): TaxonomyToContentTypeConnection

  """List of Term Nodes associated with the Taxonomy"""
  connectedTerms(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): TaxonomyToTermNodeConnection

  """
  Description of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;description
  """
  description: String

  """The plural name of the post type within the GraphQL Schema."""
  graphqlPluralName: String

  """The singular name of the post type within the GraphQL Schema."""
  graphqlSingleName: String

  """Whether the taxonomy is hierarchical"""
  hierarchical: Boolean

  """The globally unique identifier of the taxonomy object."""
  id: ID!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """Name of the taxonomy shown in the menu. Usually plural."""
  label: String

  """
  The display name of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;label
  """
  name: String

  """Whether the taxonomy is publicly queryable"""
  public: Boolean

  """
  Name of content type to display in REST API &quot;wp/v2&quot; namespace.
  """
  restBase: String

  """The REST Controller class assigned to handling this content type."""
  restControllerClass: String

  """
  Whether to show the taxonomy as part of a tag cloud widget. This field is equivalent to WP_Taxonomy-&gt;show_tagcloud
  """
  showCloud: Boolean

  """
  Whether to display a column for the taxonomy on its post type listing screens.
  """
  showInAdminColumn: Boolean

  """Whether to add the post type to the GraphQL Schema."""
  showInGraphql: Boolean

  """Whether to show the taxonomy in the admin menu"""
  showInMenu: Boolean

  """Whether the taxonomy is available for selection in navigation menus."""
  showInNavMenus: Boolean

  """Whether to show the taxonomy in the quick/bulk edit panel."""
  showInQuickEdit: Boolean

  """
  Whether to add the post type route in the REST API &quot;wp/v2&quot; namespace.
  """
  showInRest: Boolean

  """
  Whether to generate and allow a UI for managing terms in this taxonomy in the admin
  """
  showUi: Boolean
}

"""Connection to Taxonomy Nodes"""
interface TaxonomyConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected Taxonomy Nodes
  """
  edges: [TaxonomyConnectionEdge!]!

  """A list of connected Taxonomy Nodes"""
  nodes: [Taxonomy!]!

  """Information about pagination in a connection."""
  pageInfo: TaxonomyConnectionPageInfo!
}

"""Edge between a Node and a connected Taxonomy"""
interface TaxonomyConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The connected Taxonomy Node"""
  node: Taxonomy!
}

"""Page Info on the connected TaxonomyConnectionEdge"""
interface TaxonomyConnectionPageInfo implements PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Allowed taxonomies"""
enum TaxonomyEnum {
  """Taxonomy enum category"""
  CATEGORY

  """Taxonomy enum post_format"""
  POSTFORMAT

  """Taxonomy enum post_tag"""
  TAG
}

"""
The Type of Identifier used to fetch a single Taxonomy node. To be used along with the "id" field. Default is "ID".
"""
enum TaxonomyIdTypeEnum {
  """The globally unique ID"""
  ID

  """The name of the taxonomy"""
  NAME
}

""""""
type TaxonomySEO {
  """"""
  breadcrumbs: [SEOPostTypeBreadcrumbs]

  """"""
  canonical: String

  """"""
  cornerstone: Boolean

  """"""
  focuskw: String

  """"""
  fullHead: String

  """"""
  metaDesc: String

  """"""
  metaKeywords: String

  """"""
  metaRobotsNofollow: String

  """"""
  metaRobotsNoindex: String

  """"""
  opengraphAuthor: String

  """"""
  opengraphDescription: String

  """"""
  opengraphImage: MediaItem

  """"""
  opengraphModifiedTime: String

  """"""
  opengraphPublishedTime: String

  """"""
  opengraphPublisher: String

  """"""
  opengraphSiteName: String

  """"""
  opengraphTitle: String

  """"""
  opengraphType: String

  """"""
  opengraphUrl: String

  """"""
  schema: SEOTaxonomySchema

  """"""
  title: String

  """"""
  twitterDescription: String

  """"""
  twitterImage: MediaItem

  """"""
  twitterTitle: String
}

"""Connection between the Taxonomy type and the ContentType type"""
type TaxonomyToContentTypeConnection implements Connection & ContentTypeConnection {
  """Edges for the TaxonomyToContentTypeConnection connection"""
  edges: [TaxonomyToContentTypeConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [ContentType!]!

  """Information about pagination in a connection."""
  pageInfo: TaxonomyToContentTypeConnectionPageInfo!
}

"""An edge in a connection"""
type TaxonomyToContentTypeConnectionEdge implements ContentTypeConnectionEdge & Edge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: ContentType!
}

"""Page Info on the &quot;TaxonomyToContentTypeConnection&quot;"""
type TaxonomyToContentTypeConnectionPageInfo implements ContentTypeConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Connection between the Taxonomy type and the TermNode type"""
type TaxonomyToTermNodeConnection implements Connection & TermNodeConnection {
  """Edges for the TaxonomyToTermNodeConnection connection"""
  edges: [TaxonomyToTermNodeConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [TermNode!]!

  """Information about pagination in a connection."""
  pageInfo: TaxonomyToTermNodeConnectionPageInfo!
}

"""An edge in a connection"""
type TaxonomyToTermNodeConnectionEdge implements Edge & TermNodeConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: TermNode!
}

"""Page Info on the &quot;TaxonomyToTermNodeConnection&quot;"""
type TaxonomyToTermNodeConnectionPageInfo implements PageInfo & TermNodeConnectionPageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""The template assigned to the node"""
type Template_PageNoTitle implements ContentTemplate {
  """The name of the template"""
  templateName: String
}

"""The template assigned to the node"""
type Template_PageWithSidebar implements ContentTemplate {
  """The name of the template"""
  templateName: String
}

"""The template assigned to the node"""
type Template_PageWithWideImage implements ContentTemplate {
  """The name of the template"""
  templateName: String
}

"""The template assigned to the node"""
type Template_SingleWithSidebar implements ContentTemplate {
  """The name of the template"""
  templateName: String
}

"""
Terms are nodes within a Taxonomy, used to group and relate other nodes.
"""
interface TermNode implements Node & UniformResourceIdentifiable {
  """The number of objects connected to the object"""
  count: Int

  """Identifies the primary key from the database."""
  databaseId: Int!

  """The description of the object"""
  description: String

  """Connection between the TermNode type and the EnqueuedScript type"""
  enqueuedScripts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): TermNodeToEnqueuedScriptConnection

  """Connection between the TermNode type and the EnqueuedStylesheet type"""
  enqueuedStylesheets(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): TermNodeToEnqueuedStylesheetConnection

  """The globally unique ID for the object"""
  id: ID!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The link to the term"""
  link: String

  """The human friendly name of the object."""
  name: String

  """An alphanumeric identifier for the object unique to its type."""
  slug: String

  """The name of the taxonomy that the object is associated with"""
  taxonomyName: String

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int

  """The unique resource identifier path"""
  uri: String
}

"""Connection to TermNode Nodes"""
interface TermNodeConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected TermNode Nodes
  """
  edges: [TermNodeConnectionEdge!]!

  """A list of connected TermNode Nodes"""
  nodes: [TermNode!]!

  """Information about pagination in a connection."""
  pageInfo: TermNodeConnectionPageInfo!
}

"""Edge between a Node and a connected TermNode"""
interface TermNodeConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The connected TermNode Node"""
  node: TermNode!
}

"""Page Info on the connected TermNodeConnectionEdge"""
interface TermNodeConnectionPageInfo implements PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""
The Type of Identifier used to fetch a single resource. Default is "ID". To be used along with the "id" field.
"""
enum TermNodeIdTypeEnum {
  """The Database ID for the node"""
  DATABASE_ID

  """The hashed Global ID"""
  ID

  """The name of the node"""
  NAME

  """Url friendly name of the node"""
  SLUG

  """The URI for the node"""
  URI
}

"""Connection between the TermNode type and the EnqueuedScript type"""
type TermNodeToEnqueuedScriptConnection implements Connection & EnqueuedScriptConnection {
  """Edges for the TermNodeToEnqueuedScriptConnection connection"""
  edges: [TermNodeToEnqueuedScriptConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [EnqueuedScript!]!

  """Information about pagination in a connection."""
  pageInfo: TermNodeToEnqueuedScriptConnectionPageInfo!
}

"""An edge in a connection"""
type TermNodeToEnqueuedScriptConnectionEdge implements Edge & EnqueuedScriptConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: EnqueuedScript!
}

"""Page Info on the &quot;TermNodeToEnqueuedScriptConnection&quot;"""
type TermNodeToEnqueuedScriptConnectionPageInfo implements EnqueuedScriptConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Connection between the TermNode type and the EnqueuedStylesheet type"""
type TermNodeToEnqueuedStylesheetConnection implements Connection & EnqueuedStylesheetConnection {
  """Edges for the TermNodeToEnqueuedStylesheetConnection connection"""
  edges: [TermNodeToEnqueuedStylesheetConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [EnqueuedStylesheet!]!

  """Information about pagination in a connection."""
  pageInfo: TermNodeToEnqueuedStylesheetConnectionPageInfo!
}

"""An edge in a connection"""
type TermNodeToEnqueuedStylesheetConnectionEdge implements Edge & EnqueuedStylesheetConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: EnqueuedStylesheet!
}

"""Page Info on the &quot;TermNodeToEnqueuedStylesheetConnection&quot;"""
type TermNodeToEnqueuedStylesheetConnectionPageInfo implements EnqueuedStylesheetConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Options for ordering the connection by"""
enum TermObjectsConnectionOrderbyEnum {
  """Order the connection by item count."""
  COUNT

  """Order the connection by description."""
  DESCRIPTION

  """Order the connection by name."""
  NAME

  """Order the connection by slug."""
  SLUG

  """Order the connection by term group."""
  TERM_GROUP

  """Order the connection by term id."""
  TERM_ID

  """Order the connection by term order."""
  TERM_ORDER
}

"""A Gravity Forms textarea field."""
type TextAreaField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithErrorMessageSetting & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithMaxLengthSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRichTextEditorSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """Indicates whether the field uses the rich text editor interface."""
  hasRichTextEditor: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """
  Specifies the maximum number of characters allowed in a text or textarea (paragraph) field.
  """
  maxLength: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""A Gravity Forms text field."""
type TextField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithAutocompleteSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithErrorMessageSetting & GfFieldWithInputMaskSetting & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithMaxLengthSetting & GfFieldWithPasswordFieldSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """The autocomplete attribute for the field."""
  autocompleteAttribute: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """Whether autocomplete should be enabled for this field."""
  hasAutocomplete: Boolean

  """Whether the field has an input mask."""
  hasInputMask: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """The pattern used for the input mask."""
  inputMaskValue: String

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """
  Determines if a text field input tag should be created with a &quot;password&quot; type.
  """
  isPasswordInput: Boolean

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """
  Specifies the maximum number of characters allowed in a text or textarea (paragraph) field.
  """
  maxLength: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""A theme object"""
type Theme implements Node {
  """
  Name of the theme author(s), could also be a company name. This field is equivalent to WP_Theme-&gt;get( &quot;Author&quot; ).
  """
  author: String

  """
  URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;AuthorURI&quot; ).
  """
  authorUri: String

  """
  The description of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Description&quot; ).
  """
  description: String

  """The globally unique identifier of the theme object."""
  id: ID!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """
  Display name of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Name&quot; ).
  """
  name: String

  """
  The URL of the screenshot for the theme. The screenshot is intended to give an overview of what the theme looks like. This field is equivalent to WP_Theme-&gt;get_screenshot().
  """
  screenshot: String

  """
  The theme slug is used to internally match themes. Theme slugs can have subdirectories like: my-theme/sub-theme. This field is equivalent to WP_Theme-&gt;get_stylesheet().
  """
  slug: String

  """
  URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;Tags&quot; ).
  """
  tags: [String]

  """
  A URI if the theme has a website associated with it. The Theme URI is handy for directing users to a theme site for support etc. This field is equivalent to WP_Theme-&gt;get( &quot;ThemeURI&quot; ).
  """
  themeUri: String

  """
  The current version of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Version&quot; ).
  """
  version: String
}

"""Connection to Theme Nodes"""
interface ThemeConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected Theme Nodes
  """
  edges: [ThemeConnectionEdge!]!

  """A list of connected Theme Nodes"""
  nodes: [Theme!]!

  """Information about pagination in a connection."""
  pageInfo: ThemeConnectionPageInfo!
}

"""Edge between a Node and a connected Theme"""
interface ThemeConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The connected Theme Node"""
  node: Theme!
}

"""Page Info on the connected ThemeConnectionEdge"""
interface ThemeConnectionPageInfo implements PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""A Gravity Forms time field."""
type TimeField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithErrorMessageSetting & GfFieldWithInputs & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSubLabelPlacementSetting & GfFieldWithTimeFormatSetting & Node {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """The inputs for the field."""
  inputs: [TimeInputProperty]

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """
  The placement of the labels for the subfields within the group. This setting controls all of the subfields, they cannot be set individually. They may be aligned above or below the inputs. If this property is not set, the “Sub-Label Placement” setting on the Form Settings-&gt;Form Layout page is used. If no setting is specified, the default is above inputs.
  """
  subLabelPlacement: FormFieldSubLabelPlacementEnum

  """Determines how the time is displayed."""
  timeFormat: TimeFieldFormatEnum

  """Time field value."""
  timeValues: TimeFieldValue

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""How the time is displayed."""
enum TimeFieldFormatEnum {
  """12-hour time format."""
  H12

  """24-hour time format."""
  H24
}

"""The individual properties for each element of the Time value field."""
type TimeFieldValue {
  """AM or PM."""
  amPm: AmPmEnum

  """
  The full display value in 12-hour format. Example: &quot;08:25 am&quot;.
  """
  displayValue: String

  """The hours, in this format: hh."""
  hours: String

  """The minutes, in this format: mm."""
  minutes: String
}

"""TimeInputProperty input values."""
type TimeInputProperty implements GfFieldInput & GfFieldInputWithTimeFormatSetting {
  """The autocomplete attribute for the field."""
  autocompleteAttribute: String

  """
  The custom label for the input. When set, this is used in place of the label.
  """
  customLabel: String

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """
  The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field.
  """
  id: Float

  """The label to be used for the input."""
  label: String

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String
}

"""A Gravity Forms total field."""
type TotalField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDescriptionSetting & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & Node {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """The globally unique ID for the object"""
  id: ID!

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""Any node that has a URI"""
interface UniformResourceIdentifiable implements Node {
  """The globally unique ID for the object"""
  id: ID!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The unique resource identifier path"""
  uri: String
}

"""Input for the updateCategory mutation."""
input UpdateCategoryInput {
  """The slug that the category will be an alias of"""
  aliasOf: String

  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The description of the category object"""
  description: String

  """The ID of the category object to update"""
  id: ID!

  """The name of the category object to mutate"""
  name: String

  """The ID of the category that should be set as the parent"""
  parentId: ID

  """
  If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name.
  """
  slug: String
}

"""The payload for the updateCategory mutation."""
type UpdateCategoryPayload {
  """The created category"""
  category: Category

  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
}

"""Input for the updateComment mutation."""
input UpdateCommentInput {
  """The approval status of the comment."""
  approved: String

  """The name of the comment's author."""
  author: String

  """The email of the comment's author."""
  authorEmail: String

  """The url of the comment's author."""
  authorUrl: String

  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The database ID of the post object the comment belongs to."""
  commentOn: Int

  """Content of the comment."""
  content: String

  """
  The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17 
  """
  date: String

  """The ID of the comment being updated."""
  id: ID!

  """Parent comment ID of current comment."""
  parent: ID

  """The approval status of the comment"""
  status: CommentStatusEnum

  """Type of comment."""
  type: String
}

"""The payload for the updateComment mutation."""
type UpdateCommentPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The comment that was created"""
  comment: Comment

  """
  Whether the mutation succeeded. If the comment is not approved, the server will not return the comment to a non authenticated user, but a success message can be returned if the create succeeded, and the client can optimistically add the comment to the client cache
  """
  success: Boolean
}

"""Entry meta input fields for updating draft Gravity Forms entries."""
input UpdateDraftEntryMetaInput {
  """
  ID of the user that submitted of the form if a logged in user submitted the form.
  """
  createdById: Int

  """The UTC date the entry was created, in `Y-m-d H:i:s` format."""
  dateCreatedGmt: String

  """Client IP of user who submitted the form."""
  ip: String

  """Used to overwrite the sourceUrl the form was submitted from."""
  sourceUrl: String

  """
  The name and version of both the browser and operating system from which the entry was submitted.
  """
  userAgent: String
}

"""Entry meta input fields for updating Gravity Forms entries."""
input UpdateEntryMetaInput {
  """
  ID of the user that submitted of the form if a logged in user submitted the form.
  """
  createdById: Int

  """The UTC date the entry was created, in `Y-m-d H:i:s` format."""
  dateCreatedGmt: String

  """Client IP of user who submitted the form."""
  ip: String

  """Whether the entry has been read."""
  isRead: Boolean

  """Whether the entry has been starred (i.e marked with a star)."""
  isStarred: Boolean

  """Used to overwrite the sourceUrl the form was submitted from."""
  sourceUrl: String

  """The current status of the entry."""
  status: EntryStatusEnum

  """
  The name and version of both the browser and operating system from which the entry was submitted.
  """
  userAgent: String
}

"""Input for the updateGfDraftEntry mutation."""
input UpdateGfDraftEntryInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The entry meta values to update."""
  entryMeta: UpdateDraftEntryMetaInput

  """The field ids and their values."""
  fieldValues: [FormFieldValuesInput]

  """Either the global ID of the draft entry, or its resume token."""
  id: ID!

  """The ID type for the draft entry. Defaults to `ID` ."""
  idType: DraftEntryIdTypeEnum

  """
  Whether the field values should be validated on submission. Defaults to false.
  """
  shouldValidate: Boolean
}

"""The payload for the updateGfDraftEntry mutation."""
type UpdateGfDraftEntryPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """
  The draft entry after the update mutation has been applied. If a validation error occurred, the draft entry will NOT have been updated with the invalid value provided.
  """
  draftEntry: GfDraftEntry

  """Field validation errors."""
  errors: [FieldError]

  """
  Draft resume URL. If the &quot;Referer&quot; header is not included in the request, this will be an empty string.
  """
  resumeUrl: String
}

"""Input for the updateGfEntry mutation."""
input UpdateGfEntryInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The entry meta values to update."""
  entryMeta: UpdateEntryMetaInput

  """The field ids and their values to update."""
  fieldValues: [FormFieldValuesInput]

  """ID of the entry to update, either a global or database ID."""
  id: ID!

  """
  Whether the field values should be validated on submission. Defaults to false.
  """
  shouldValidate: Boolean
}

"""The payload for the updateGfEntry mutation."""
type UpdateGfEntryPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The entry that was created."""
  entry: GfSubmittedEntry

  """Field errors."""
  errors: [FieldError]
}

"""Input for the updateMediaItem mutation."""
input UpdateMediaItemInput {
  """Alternative text to display when mediaItem is not displayed"""
  altText: String

  """The userId to assign as the author of the mediaItem"""
  authorId: ID

  """The caption for the mediaItem"""
  caption: String

  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The comment status for the mediaItem"""
  commentStatus: String

  """The date of the mediaItem"""
  date: String

  """The date (in GMT zone) of the mediaItem"""
  dateGmt: String

  """Description of the mediaItem"""
  description: String

  """The file name of the mediaItem"""
  filePath: String

  """The file type of the mediaItem"""
  fileType: MimeTypeEnum

  """The ID of the mediaItem object"""
  id: ID!

  """The ID of the parent object"""
  parentId: ID

  """The ping status for the mediaItem"""
  pingStatus: String

  """The slug of the mediaItem"""
  slug: String

  """The status of the mediaItem"""
  status: MediaItemStatusEnum

  """The title of the mediaItem"""
  title: String
}

"""The payload for the updateMediaItem mutation."""
type UpdateMediaItemPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The MediaItem object mutation type."""
  mediaItem: MediaItem
}

"""Input for the updatePage mutation."""
input UpdatePageInput {
  """The userId to assign as the author of the object"""
  authorId: ID

  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The comment status for the object"""
  commentStatus: String

  """The content of the object"""
  content: String

  """
  The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17 
  """
  date: String

  """The ID of the page object"""
  id: ID!

  """Override the edit lock when another user is editing the post"""
  ignoreEditLock: Boolean

  """
  A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types.
  """
  menuOrder: Int

  """The ID of the parent object"""
  parentId: ID

  """The password used to protect the content of the object"""
  password: String

  """The slug of the object"""
  slug: String

  """The status of the object"""
  status: PostStatusEnum

  """The title of the object"""
  title: String
}

"""The payload for the updatePage mutation."""
type UpdatePagePayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The Post object mutation type."""
  page: Page
}

"""Input for the updatePostFormat mutation."""
input UpdatePostFormatInput {
  """The slug that the post_format will be an alias of"""
  aliasOf: String

  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The description of the post_format object"""
  description: String

  """The ID of the postFormat object to update"""
  id: ID!

  """The name of the post_format object to mutate"""
  name: String

  """
  If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name.
  """
  slug: String
}

"""The payload for the updatePostFormat mutation."""
type UpdatePostFormatPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The created post_format"""
  postFormat: PostFormat
}

"""Input for the updatePost mutation."""
input UpdatePostInput {
  """The userId to assign as the author of the object"""
  authorId: ID

  """Set connections between the post and categories"""
  categories: PostCategoriesInput

  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The comment status for the object"""
  commentStatus: String

  """The content of the object"""
  content: String

  """
  The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17 
  """
  date: String

  """The excerpt of the object"""
  excerpt: String

  """The ID of the post object"""
  id: ID!

  """Override the edit lock when another user is editing the post"""
  ignoreEditLock: Boolean

  """
  A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types.
  """
  menuOrder: Int

  """The password used to protect the content of the object"""
  password: String

  """The ping status for the object"""
  pingStatus: String

  """URLs that have been pinged."""
  pinged: [String]

  """Set connections between the post and postFormats"""
  postFormats: PostPostFormatsInput

  """The slug of the object"""
  slug: String

  """The status of the object"""
  status: PostStatusEnum

  """Set connections between the post and tags"""
  tags: PostTagsInput

  """The title of the object"""
  title: String

  """URLs queued to be pinged."""
  toPing: [String]
}

"""The payload for the updatePost mutation."""
type UpdatePostPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The Post object mutation type."""
  post: Post
}

"""Input for the updateSettings mutation."""
input UpdateSettingsInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """Allow people to submit comments on new posts."""
  discussionSettingsDefaultCommentStatus: String

  """
  Allow link notifications from other blogs (pingbacks and trackbacks) on new articles.
  """
  discussionSettingsDefaultPingStatus: String

  """A date format for all date strings."""
  generalSettingsDateFormat: String

  """Site tagline."""
  generalSettingsDescription: String

  """This address is used for admin purposes, like new user notification."""
  generalSettingsEmail: String

  """WordPress locale code."""
  generalSettingsLanguage: String

  """A day number of the week that the week should start on."""
  generalSettingsStartOfWeek: Int

  """A time format for all time strings."""
  generalSettingsTimeFormat: String

  """A city in the same timezone as you."""
  generalSettingsTimezone: String

  """Site title."""
  generalSettingsTitle: String

  """Site URL."""
  generalSettingsUrl: String

  """The ID of the page that should display the latest posts"""
  readingSettingsPageForPosts: Int

  """The ID of the page that should be displayed on the front page"""
  readingSettingsPageOnFront: Int

  """Blog pages show at most."""
  readingSettingsPostsPerPage: Int

  """What to show on the front page"""
  readingSettingsShowOnFront: String

  """Default post category."""
  writingSettingsDefaultCategory: Int

  """Default post format."""
  writingSettingsDefaultPostFormat: String

  """Convert emoticons like :-) and :-P to graphics on display."""
  writingSettingsUseSmilies: Boolean
}

"""The payload for the updateSettings mutation."""
type UpdateSettingsPayload {
  """Update all settings."""
  allSettings: Settings

  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """Update the DiscussionSettings setting."""
  discussionSettings: DiscussionSettings

  """Update the GeneralSettings setting."""
  generalSettings: GeneralSettings

  """Update the ReadingSettings setting."""
  readingSettings: ReadingSettings

  """Update the WritingSettings setting."""
  writingSettings: WritingSettings
}

"""Input for the updateTag mutation."""
input UpdateTagInput {
  """The slug that the post_tag will be an alias of"""
  aliasOf: String

  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The description of the post_tag object"""
  description: String

  """The ID of the tag object to update"""
  id: ID!

  """The name of the post_tag object to mutate"""
  name: String

  """
  If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name.
  """
  slug: String
}

"""The payload for the updateTag mutation."""
type UpdateTagPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The created post_tag"""
  tag: Tag
}

"""Input for the updateUser mutation."""
input UpdateUserInput {
  """User's AOL IM account."""
  aim: String

  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """A string containing content about the user."""
  description: String

  """
  A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user).
  """
  displayName: String

  """A string containing the user's email address."""
  email: String

  """	The user's first name."""
  firstName: String

  """The ID of the user"""
  id: ID!

  """User's Jabber account."""
  jabber: String

  """The user's last name."""
  lastName: String

  """User's locale."""
  locale: String

  """
  A string that contains a URL-friendly name for the user. The default is the user's username.
  """
  nicename: String

  """The user's nickname, defaults to the user's username."""
  nickname: String

  """A string that contains the plain text password for the user."""
  password: String

  """If true, this will refresh the users JWT secret."""
  refreshJwtUserSecret: Boolean

  """The date the user registered. Format is Y-m-d H:i:s."""
  registered: String

  """
  If true, this will revoke the users JWT secret. If false, this will unrevoke the JWT secret AND issue a new one. To revoke, the user must have proper capabilities to edit users JWT secrets.
  """
  revokeJwtUserSecret: Boolean

  """
  A string for whether to enable the rich editor or not. False if not empty.
  """
  richEditing: String

  """An array of roles to be assigned to the user."""
  roles: [String]

  """A string containing the user's URL for the user's web site."""
  websiteUrl: String

  """User's Yahoo IM account."""
  yim: String
}

"""The payload for the updateUser mutation."""
type UpdateUserPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String

  """The User object mutation type."""
  user: User
}

"""
The `Upload` special type represents a file to be uploaded in the same HTTP request as specified by [graphql-multipart-request-spec](https://github.com/jaydenseric/graphql-multipart-request-spec).
"""
scalar Upload

"""A User object"""
type User implements Commenter & DatabaseIdentifier & Node & UniformResourceIdentifiable {
  """
  Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument.
  """
  avatar(
    """
    Whether to always show the default image, never the Gravatar. Default false
    """
    forceDefault: Boolean

    """The rating level of the avatar."""
    rating: AvatarRatingEnum

    """
    The size attribute of the avatar field can be used to fetch avatars of different sizes. The value corresponds to the dimension in pixels to fetch. The default is 96 pixels.
    """
    size: Int = 96
  ): Avatar

  """
  User metadata option name. Usually it will be &quot;wp_capabilities&quot;.
  """
  capKey: String

  """A list of capabilities (permissions) granted to the user"""
  capabilities: [String]

  """Connection between the User type and the Comment type"""
  comments(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: UserToCommentConnectionWhereArgs
  ): UserToCommentConnection

  """Identifies the primary key from the database."""
  databaseId: Int!

  """Description of the user."""
  description: String

  """
  Email address of the user. This is equivalent to the WP_User-&gt;user_email property.
  """
  email: String

  """Connection between the User type and the EnqueuedScript type"""
  enqueuedScripts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): UserToEnqueuedScriptConnection

  """Connection between the User type and the EnqueuedStylesheet type"""
  enqueuedStylesheets(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): UserToEnqueuedStylesheetConnection

  """
  A complete list of capabilities including capabilities inherited from a role. This is equivalent to the array keys of WP_User-&gt;allcaps.
  """
  extraCapabilities: [String]

  """
  First name of the user. This is equivalent to the WP_User-&gt;user_first_name property.
  """
  firstName: String

  """The globally unique identifier for the user object."""
  id: ID!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """
  Whether the JWT User secret has been revoked. If the secret has been revoked, auth tokens will not be issued until an admin, or user with proper capabilities re-issues a secret for the user.
  """
  isJwtAuthSecretRevoked: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """
  The expiration for the JWT Token for the user. If not set custom for the user, it will use the default sitewide expiration setting
  """
  jwtAuthExpiration: String

  """
  A JWT token that can be used in future requests for authentication/authorization
  """
  jwtAuthToken: String

  """
  A JWT token that can be used in future requests to get a refreshed jwtAuthToken. If the refresh token used in a request is revoked or otherwise invalid, a valid Auth token will NOT be issued in the response headers.
  """
  jwtRefreshToken: String

  """
  A unique secret tied to the users JWT token that can be revoked or refreshed. Revoking the secret prevents JWT tokens from being issued to the user. Refreshing the token invalidates previously issued tokens, but allows new tokens to be issued.
  """
  jwtUserSecret: String

  """
  Last name of the user. This is equivalent to the WP_User-&gt;user_last_name property.
  """
  lastName: String

  """
  The preferred language locale set for the user. Value derived from get_user_locale().
  """
  locale: String

  """Connection between the User type and the mediaItem type"""
  mediaItems(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: UserToMediaItemConnectionWhereArgs
  ): UserToMediaItemConnection

  """
  Display name of the user. This is equivalent to the WP_User-&gt;display_name property.
  """
  name: String

  """
  The nicename for the user. This field is equivalent to WP_User-&gt;user_nicename
  """
  nicename: String

  """Nickname of the user."""
  nickname: String

  """Connection between the User type and the page type"""
  pages(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: UserToPageConnectionWhereArgs
  ): UserToPageConnection

  """Connection between the User type and the post type"""
  posts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: UserToPostConnectionWhereArgs
  ): UserToPostConnection

  """
  The date the user registered or was created. The field follows a full ISO8601 date string format.
  """
  registeredDate: String

  """Connection between the User and Revisions authored by the user"""
  revisions(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int

    """Arguments for filtering the connection"""
    where: UserToRevisionsConnectionWhereArgs
  ): UserToRevisionsConnection

  """Connection between the User type and the UserRole type"""
  roles(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """The number of items to return after the referenced "after" cursor"""
    first: Int

    """The number of items to return before the referenced "before" cursor"""
    last: Int
  ): UserToUserRoleConnection

  """The Yoast SEO data of a user"""
  seo: SEOUser

  """
  Whether the Toolbar should be displayed when the user is viewing the site.
  """
  shouldShowAdminToolbar: Boolean

  """
  The slug for the user. This field is equivalent to WP_User-&gt;user_nicename
  """
  slug: String

  """The unique resource identifier path"""
  uri: String

  """A website url that is associated with the user."""
  url: String

  """The Id of the user. Equivalent to WP_User-&gt;ID"""
  userId: Int @deprecated(reason: "Deprecated in favor of the databaseId field")

  """
  Username for the user. This field is equivalent to WP_User-&gt;user_login.
  """
  username: String
}

"""Connection to User Nodes"""
interface UserConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected User Nodes
  """
  edges: [UserConnectionEdge!]!

  """A list of connected User Nodes"""
  nodes: [User!]!

  """Information about pagination in a connection."""
  pageInfo: UserConnectionPageInfo!
}

"""Edge between a Node and a connected User"""
interface UserConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The connected User Node"""
  node: User!
}

"""Page Info on the connected UserConnectionEdge"""
interface UserConnectionPageInfo implements PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""
The Type of Identifier used to fetch a single User node. To be used along with the "id" field. Default is "ID".
"""
enum UserNodeIdTypeEnum {
  """The Database ID for the node"""
  DATABASE_ID

  """The Email of the User"""
  EMAIL

  """The hashed Global ID"""
  ID

  """The slug of the User"""
  SLUG

  """The URI for the node"""
  URI

  """The username the User uses to login with"""
  USERNAME
}

"""A user role object"""
type UserRole implements Node {
  """The capabilities that belong to this role"""
  capabilities: [String]

  """The display name of the role"""
  displayName: String

  """The globally unique identifier for the user role object."""
  id: ID!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """The registered name of the role"""
  name: String
}

"""Connection to UserRole Nodes"""
interface UserRoleConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected UserRole Nodes
  """
  edges: [UserRoleConnectionEdge!]!

  """A list of connected UserRole Nodes"""
  nodes: [UserRole!]!

  """Information about pagination in a connection."""
  pageInfo: UserRoleConnectionPageInfo!
}

"""Edge between a Node and a connected UserRole"""
interface UserRoleConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String

  """The connected UserRole Node"""
  node: UserRole!
}

"""Page Info on the connected UserRoleConnectionEdge"""
interface UserRoleConnectionPageInfo implements PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Names of available user roles"""
enum UserRoleEnum {
  """User role with specific capabilities"""
  ADMINISTRATOR

  """User role with specific capabilities"""
  AUTHOR

  """User role with specific capabilities"""
  CONTRIBUTOR

  """User role with specific capabilities"""
  EDITOR

  """User role with specific capabilities"""
  SEO_EDITOR

  """User role with specific capabilities"""
  SEO_MANAGER

  """User role with specific capabilities"""
  SUBSCRIBER
}

"""Connection between the User type and the Comment type"""
type UserToCommentConnection implements CommentConnection & Connection {
  """Edges for the UserToCommentConnection connection"""
  edges: [UserToCommentConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [Comment!]!

  """Information about pagination in a connection."""
  pageInfo: UserToCommentConnectionPageInfo!
}

"""An edge in a connection"""
type UserToCommentConnectionEdge implements CommentConnectionEdge & Edge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Comment!
}

"""Page Info on the &quot;UserToCommentConnection&quot;"""
type UserToCommentConnectionPageInfo implements CommentConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the UserToCommentConnection connection"""
input UserToCommentConnectionWhereArgs {
  """Comment author email address."""
  authorEmail: String

  """Array of author IDs to include comments for."""
  authorIn: [ID]

  """Array of author IDs to exclude comments for."""
  authorNotIn: [ID]

  """Comment author URL."""
  authorUrl: String

  """Array of comment IDs to include."""
  commentIn: [ID]

  """
  Array of IDs of users whose unapproved comments will be returned by the query regardless of status.
  """
  commentNotIn: [ID]

  """Include comments of a given type."""
  commentType: String

  """Include comments from a given array of comment types."""
  commentTypeIn: [String]

  """Exclude comments from a given array of comment types."""
  commentTypeNotIn: String

  """Content object author ID to limit results by."""
  contentAuthor: [ID]

  """Array of author IDs to retrieve comments for."""
  contentAuthorIn: [ID]

  """Array of author IDs *not* to retrieve comments for."""
  contentAuthorNotIn: [ID]

  """Limit results to those affiliated with a given content object ID."""
  contentId: ID

  """Array of content object IDs to include affiliated comments for."""
  contentIdIn: [ID]

  """Array of content object IDs to exclude affiliated comments for."""
  contentIdNotIn: [ID]

  """Content object name (i.e. slug ) to retrieve affiliated comments for."""
  contentName: String

  """Content Object parent ID to retrieve affiliated comments for."""
  contentParent: Int

  """
  Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentStatus: [PostStatusEnum]

  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [ContentTypeEnum]

  """
  Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]

  """Karma score to retrieve matching comments for."""
  karma: Int

  """The cardinality of the order of the connection"""
  order: OrderEnum

  """Field to order the comments by."""
  orderby: CommentsConnectionOrderbyEnum

  """Parent ID of comment to retrieve children of."""
  parent: Int

  """Array of parent IDs of comments to retrieve children for."""
  parentIn: [ID]

  """Array of parent IDs of comments *not* to retrieve children for."""
  parentNotIn: [ID]

  """Search term(s) to retrieve matching comments for."""
  search: String

  """Comment status to limit results by."""
  status: String

  """Include comments for a specific user ID."""
  userId: ID
}

"""Connection between the User type and the EnqueuedScript type"""
type UserToEnqueuedScriptConnection implements Connection & EnqueuedScriptConnection {
  """Edges for the UserToEnqueuedScriptConnection connection"""
  edges: [UserToEnqueuedScriptConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [EnqueuedScript!]!

  """Information about pagination in a connection."""
  pageInfo: UserToEnqueuedScriptConnectionPageInfo!
}

"""An edge in a connection"""
type UserToEnqueuedScriptConnectionEdge implements Edge & EnqueuedScriptConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: EnqueuedScript!
}

"""Page Info on the &quot;UserToEnqueuedScriptConnection&quot;"""
type UserToEnqueuedScriptConnectionPageInfo implements EnqueuedScriptConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Connection between the User type and the EnqueuedStylesheet type"""
type UserToEnqueuedStylesheetConnection implements Connection & EnqueuedStylesheetConnection {
  """Edges for the UserToEnqueuedStylesheetConnection connection"""
  edges: [UserToEnqueuedStylesheetConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [EnqueuedStylesheet!]!

  """Information about pagination in a connection."""
  pageInfo: UserToEnqueuedStylesheetConnectionPageInfo!
}

"""An edge in a connection"""
type UserToEnqueuedStylesheetConnectionEdge implements Edge & EnqueuedStylesheetConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: EnqueuedStylesheet!
}

"""Page Info on the &quot;UserToEnqueuedStylesheetConnection&quot;"""
type UserToEnqueuedStylesheetConnectionPageInfo implements EnqueuedStylesheetConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Connection between the User type and the mediaItem type"""
type UserToMediaItemConnection implements Connection & MediaItemConnection {
  """Edges for the UserToMediaItemConnection connection"""
  edges: [UserToMediaItemConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [MediaItem!]!

  """Information about pagination in a connection."""
  pageInfo: UserToMediaItemConnectionPageInfo!
}

"""An edge in a connection"""
type UserToMediaItemConnectionEdge implements Edge & MediaItemConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: MediaItem!
}

"""Page Info on the &quot;UserToMediaItemConnection&quot;"""
type UserToMediaItemConnectionPageInfo implements MediaItemConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the UserToMediaItemConnection connection"""
input UserToMediaItemConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific database ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What parameter to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [PostStatusEnum]

  """Show posts with a specific status."""
  status: PostStatusEnum

  """Title of the object"""
  title: String
}

"""Connection between the User type and the page type"""
type UserToPageConnection implements Connection & PageConnection {
  """Edges for the UserToPageConnection connection"""
  edges: [UserToPageConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [Page!]!

  """Information about pagination in a connection."""
  pageInfo: UserToPageConnectionPageInfo!
}

"""An edge in a connection"""
type UserToPageConnectionEdge implements Edge & PageConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Page!
}

"""Page Info on the &quot;UserToPageConnection&quot;"""
type UserToPageConnectionPageInfo implements PageConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the UserToPageConnection connection"""
input UserToPageConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific database ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What parameter to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [PostStatusEnum]

  """Show posts with a specific status."""
  status: PostStatusEnum

  """Title of the object"""
  title: String
}

"""Connection between the User type and the post type"""
type UserToPostConnection implements Connection & PostConnection {
  """Edges for the UserToPostConnection connection"""
  edges: [UserToPostConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [Post!]!

  """Information about pagination in a connection."""
  pageInfo: UserToPostConnectionPageInfo!
}

"""An edge in a connection"""
type UserToPostConnectionEdge implements Edge & PostConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Post!
}

"""Page Info on the &quot;UserToPostConnection&quot;"""
type UserToPostConnectionPageInfo implements PageInfo & PostConnectionPageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the UserToPostConnection connection"""
input UserToPostConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Category ID"""
  categoryId: Int

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryIn: [ID]

  """Use Category Slug"""
  categoryName: String

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific database ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What parameter to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [PostStatusEnum]

  """Show posts with a specific status."""
  status: PostStatusEnum

  """Tag Slug"""
  tag: String

  """Use Tag ID"""
  tagId: String

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagIn: [ID]

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagNotIn: [ID]

  """Array of tag slugs, used to display objects from one tag AND another"""
  tagSlugAnd: [String]

  """Array of tag slugs, used to include objects in ANY specified tags"""
  tagSlugIn: [String]

  """Title of the object"""
  title: String
}

"""Connection between the User type and the ContentNode type"""
type UserToRevisionsConnection implements Connection & ContentNodeConnection {
  """Edges for the UserToRevisionsConnection connection"""
  edges: [UserToRevisionsConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [ContentNode!]!

  """Information about pagination in a connection."""
  pageInfo: UserToRevisionsConnectionPageInfo!
}

"""An edge in a connection"""
type UserToRevisionsConnectionEdge implements ContentNodeConnectionEdge & Edge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: ContentNode!
}

"""Page Info on the &quot;UserToRevisionsConnection&quot;"""
type UserToRevisionsConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Arguments for filtering the UserToRevisionsConnection connection"""
input UserToRevisionsConnectionWhereArgs {
  """The Types of content to filter"""
  contentTypes: [ContentTypeEnum]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific database ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What parameter to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Retrieve posts where post status is in an array."""
  stati: [PostStatusEnum]

  """Show posts with a specific status."""
  status: PostStatusEnum

  """Title of the object"""
  title: String
}

"""Connection between the User type and the UserRole type"""
type UserToUserRoleConnection implements Connection & UserRoleConnection {
  """Edges for the UserToUserRoleConnection connection"""
  edges: [UserToUserRoleConnectionEdge!]!

  """The nodes of the connection, without the edges"""
  nodes: [UserRole!]!

  """Information about pagination in a connection."""
  pageInfo: UserToUserRoleConnectionPageInfo!
}

"""An edge in a connection"""
type UserToUserRoleConnectionEdge implements Edge & UserRoleConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: UserRole!
}

"""Page Info on the &quot;UserToUserRoleConnection&quot;"""
type UserToUserRoleConnectionPageInfo implements PageInfo & UserRoleConnectionPageInfo & WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Field to order the connection by"""
enum UsersConnectionOrderbyEnum {
  """Order by display name"""
  DISPLAY_NAME

  """Order by email address"""
  EMAIL

  """Order by login"""
  LOGIN

  """Preserve the login order given in the LOGIN_IN array"""
  LOGIN_IN

  """Order by nice name"""
  NICE_NAME

  """Preserve the nice name order given in the NICE_NAME_IN array"""
  NICE_NAME_IN

  """Order by registration date"""
  REGISTERED

  """Order by URL"""
  URL
}

"""Options for ordering the connection"""
input UsersConnectionOrderbyInput {
  """The field name used to sort the results."""
  field: UsersConnectionOrderbyEnum!

  """The cardinality of the order of the connection"""
  order: OrderEnum
}

"""Column used for searching for users."""
enum UsersConnectionSearchColumnEnum {
  """The user's email address."""
  EMAIL

  """The globally unique ID."""
  ID

  """The username the User uses to login with."""
  LOGIN

  """A URL-friendly name for the user. The default is the user's username."""
  NICENAME

  """The URL of the user's website."""
  URL
}

"""Information about pagination in a connection."""
interface WPPageInfo implements PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Raw schema for page"""
  seo: SEOPostTypePageInfo

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""A Gravity Forms website field."""
type WebsiteField implements FormField & GfFieldWithAdminLabelSetting & GfFieldWithConditionalLogicSetting & GfFieldWithCssClassSetting & GfFieldWithDefaultValueSetting & GfFieldWithDescriptionSetting & GfFieldWithDuplicatesSetting & GfFieldWithErrorMessageSetting & GfFieldWithLabelPlacementSetting & GfFieldWithLabelSetting & GfFieldWithPersonalData & GfFieldWithPlaceholderSetting & GfFieldWithPrepopulateFieldSetting & GfFieldWithRulesSetting & GfFieldWithSizeSetting & Node {
  """
  When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
  """
  adminLabel: String

  """Determines if the field’s value can be pre-populated dynamically."""
  canPrepopulate: Boolean

  """
  Controls the visibility of the field based on values selected by the user.
  """
  conditionalLogic: ConditionalLogic

  """
  String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
  """
  cssClass: String

  """Field database ID."""
  databaseId: Int!

  """
  Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
  """
  defaultValue: String

  """Field description."""
  description: String

  """The placement of the field description."""
  descriptionPlacement: FormFieldDescriptionPlacementEnum

  """
  Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
  """
  displayOnly: Boolean

  """
  Contains the message that is displayed for fields that fail validation.
  """
  errorMessage: String

  """The globally unique ID for the object"""
  id: ID!

  """
  Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
  """
  inputName: String

  """
  The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
  """
  inputType: FormFieldTypeEnum

  """
  Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
  """
  isRequired: Boolean

  """Field label that will be displayed on the form and on the admin pages."""
  label: String

  """The field label position."""
  labelPlacement: FormFieldLabelPlacementEnum

  """The number of CSS grid columns the field should span."""
  layoutGridColumnSpan: Int

  """
  The number of CSS grid columns the spacer field following this one should span.
  """
  layoutSpacerGridColumnSpan: Int

  """The form page this field is located on. Default is 1."""
  pageNumber: Int

  """
  The form field-specifc policies for exporting and erasing personal data.
  """
  personalData: FormFieldDataPolicy

  """
  Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
  """
  placeholder: String

  """Determines if the field allows duplicate submissions."""
  shouldAllowDuplicates: Boolean

  """Determines the size of the field when displayed on the page."""
  size: FormFieldSizeEnum

  """The type of field to be displayed."""
  type: FormFieldTypeEnum

  """
  The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
  """
  value: String

  """Field visibility."""
  visibility: FormFieldVisibilityEnum
}

"""
Provides access to fields of the &quot;Table&quot; ACF Field Group via the &quot;table&quot; field
"""
interface WithAcfTable {
  """Fields of the Table ACF Field Group"""
  table: Table
}

"""The writing setting type"""
type WritingSettings {
  """Default post category."""
  defaultCategory: Int

  """Default post format."""
  defaultPostFormat: String

  """Convert emoticons like :-) and :-P to graphics on display."""
  useSmilies: Boolean
}